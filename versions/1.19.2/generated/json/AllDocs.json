{
  "version": "2.0.1",
  "extensions": {
    "BuiltInExtension": [
      {
        "name": "debug",
        "is_arbitrary": false,
        "desc": [
          "This is used to enable or disable debug mode"
        ],
        "params": [
          {
            "name": "bool",
            "type": "Boolean",
            "desc": "true to enable debug mode, false to disable debug mode"
          }
        ],
        "examples": [
          "debug(true);"
        ]
      },
      {
        "name": "eval",
        "is_arbitrary": false,
        "desc": [
          "This is used to evaluate a string as code.",
          "This will not inherit imports that are in the parent script"
        ],
        "params": [
          {
            "name": "code",
            "type": "String",
            "desc": "the code to evaluate"
          }
        ],
        "returns": {
          "type": "Object",
          "desc": "the result of the evaluation"
        },
        "examples": [
          "eval('1 + 1');"
        ]
      },
      {
        "name": "experimental",
        "is_arbitrary": false,
        "desc": [
          "This is used to enable or disable experimental mode"
        ],
        "params": [
          {
            "name": "bool",
            "type": "Boolean",
            "desc": "true to enable experimental mode, false to disable experimental mode"
          }
        ],
        "examples": [
          "experimental(true);"
        ]
      },
      {
        "name": "getArucasVersion",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the version of Arucas that is currently running"
        ],
        "returns": {
          "type": "String",
          "desc": "the version of Arucas that is currently running"
        },
        "examples": [
          "getArucasVersion();"
        ]
      },
      {
        "name": "getDate",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current date formatted with dd/MM/yyyy in your local time"
        ],
        "returns": {
          "type": "String",
          "desc": "the current date formatted with dd/MM/yyyy"
        },
        "examples": [
          "getDate();"
        ]
      },
      {
        "name": "getMilliTime",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current time in milliseconds"
        ],
        "returns": {
          "type": "Number",
          "desc": "the current time in milliseconds"
        },
        "examples": [
          "getMilliTime();"
        ]
      },
      {
        "name": "getNanoTime",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current time in nanoseconds"
        ],
        "returns": {
          "type": "Number",
          "desc": "the current time in nanoseconds"
        },
        "examples": [
          "getNanoTime();"
        ]
      },
      {
        "name": "getTime",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current time formatted with HH:mm:ss in your local time"
        ],
        "returns": {
          "type": "String",
          "desc": "the current time formatted with HH:mm:ss"
        },
        "examples": [
          "getTime();"
        ]
      },
      {
        "name": "getUnixTime",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current time in seconds since the Unix epoch"
        ],
        "returns": {
          "type": "Number",
          "desc": "the current time in seconds since the Unix epoch"
        },
        "examples": [
          "getUnixTime();"
        ]
      },
      {
        "name": "input",
        "is_arbitrary": false,
        "desc": [
          "This is used to take an input from the user"
        ],
        "params": [
          {
            "name": "prompt",
            "type": "String",
            "desc": "the prompt to show the user"
          }
        ],
        "returns": {
          "type": "String",
          "desc": "the input from the user"
        },
        "examples": [
          "input('What is your name?');"
        ]
      },
      {
        "name": "isMain",
        "is_arbitrary": false,
        "desc": [
          "This is used to check whether the script is the main script"
        ],
        "returns": {
          "type": "Boolean",
          "desc": "true if the script is the main script, false if it is not"
        },
        "examples": [
          "isMain();"
        ]
      },
      {
        "name": "len",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the length of a collection or string"
        ],
        "params": [
          {
            "name": "sizable",
            "type": "String",
            "desc": "the collection or string"
          }
        ],
        "examples": [
          "len(\"Hello World\");"
        ]
      },
      {
        "name": "print",
        "is_arbitrary": false,
        "desc": [
          "This prints a value to the output handler"
        ],
        "params": [
          {
            "name": "printValue",
            "type": "Object",
            "desc": "the value to print"
          }
        ],
        "examples": [
          "print('Hello World');"
        ]
      },
      {
        "name": "print",
        "is_arbitrary": true,
        "desc": [
          "This prints a number of values to the console",
          "If there are no arguments then this will print a new line,",
          "other wise it will print the contents without a new line"
        ],
        "params": [
          {
            "name": "printValue...",
            "type": "Object",
            "desc": "the value to print"
          }
        ],
        "examples": [
          "print('Hello World', 'This is a test', 123);"
        ]
      },
      {
        "name": "printDebug",
        "is_arbitrary": false,
        "desc": [
          "This logs something to the debug output.",
          "It only prints if debug mode is enabled: `debug(true)`"
        ],
        "params": [
          {
            "name": "printValue",
            "type": "Object",
            "desc": "the value to print"
          }
        ],
        "examples": [
          "debug(true); // Enable debug for testing\nif (true) {\n    printDebug(\"Inside if statement\");\n}"
        ]
      },
      {
        "name": "random",
        "is_arbitrary": false,
        "desc": [
          "This is used to generate a random integer between 0 and the bound"
        ],
        "params": [
          {
            "name": "bound",
            "type": "Number",
            "desc": "the maximum bound (exclusive)"
          }
        ],
        "returns": {
          "type": "Number",
          "desc": "the random integer"
        },
        "examples": [
          "random(10);"
        ]
      },
      {
        "name": "range",
        "is_arbitrary": false,
        "desc": [
          "This is used to generate a range of integers starting from 0, incrementing by 1"
        ],
        "params": [
          {
            "name": "bound",
            "type": "Number",
            "desc": "the maximum bound (exclusive)"
          }
        ],
        "returns": {
          "type": "Iterable",
          "desc": "an iterable object that returns the range of integers"
        },
        "examples": [
          "range(10);"
        ]
      },
      {
        "name": "range",
        "is_arbitrary": false,
        "desc": [
          "This is used to generate a range of numbers starting",
          "from a start value and ending at a bound value incrementing by 1"
        ],
        "params": [
          {
            "name": "start",
            "type": "Number",
            "desc": "the start value"
          },
          {
            "name": "bound",
            "type": "Number",
            "desc": "the maximum bound (exclusive)"
          }
        ],
        "returns": {
          "type": "Iterable",
          "desc": "an iterable object that returns the range of integers"
        },
        "examples": [
          "range(0, 10);"
        ]
      },
      {
        "name": "range",
        "is_arbitrary": false,
        "desc": [
          "This is used to generate a range of numbers starting from a",
          "start value and ending at a bound value incrementing by a step value"
        ],
        "params": [
          {
            "name": "start",
            "type": "Number",
            "desc": "the start value"
          },
          {
            "name": "bound",
            "type": "Number",
            "desc": "the maximum bound (exclusive)"
          },
          {
            "name": "step",
            "type": "Number",
            "desc": "the step value"
          }
        ],
        "returns": {
          "type": "Iterable",
          "desc": "an iterable object that returns the range of integers"
        },
        "examples": [
          "range(0, 10, 2);"
        ]
      },
      {
        "name": "run",
        "is_arbitrary": false,
        "desc": [
          "This is used to run a .arucas file, you can use on script to run other scripts"
        ],
        "params": [
          {
            "name": "path",
            "type": "String",
            "desc": "as a file path"
          }
        ],
        "returns": {
          "type": "Object",
          "desc": "any value that the file returns"
        },
        "examples": [
          "run('/home/user/script.arucas');"
        ]
      },
      {
        "name": "runFromString",
        "is_arbitrary": false,
        "deprecated": [
          "This should be replaced with 'eval(code)'"
        ],
        "desc": [
          "This is used to evaluate a string as code.",
          "This will not inherit imports that are in the parent script"
        ],
        "params": [
          {
            "name": "code",
            "type": "String",
            "desc": "the code to run"
          }
        ],
        "examples": [
          "runFromString('print(\"Hello World\");');"
        ]
      },
      {
        "name": "sleep",
        "is_arbitrary": false,
        "desc": [
          "This pauses your program for a certain amount of milliseconds"
        ],
        "params": [
          {
            "name": "milliseconds",
            "type": "Number",
            "desc": "milliseconds to sleep"
          }
        ],
        "examples": [
          "sleep(1000);"
        ]
      },
      {
        "name": "stop",
        "is_arbitrary": false,
        "desc": [
          "This is used to stop a script"
        ],
        "examples": [
          "stop();"
        ]
      },
      {
        "name": "suppressDeprecated",
        "is_arbitrary": false,
        "desc": [
          "This is used to enable or disable suppressing deprecation warnings"
        ],
        "params": [
          {
            "name": "bool",
            "type": "Boolean",
            "desc": "true to enable, false to disable warnings"
          }
        ],
        "examples": [
          "suppressDeprecated(true);"
        ]
      }
    ],
    "MinecraftExtension": [
      {
        "name": "hold",
        "is_arbitrary": false,
        "desc": [
          "This freezes the current thread and halts execution, same functionality as 'Thread.freeze()'"
        ],
        "examples": [
          "hold();"
        ]
      }
    ]
  },
  "classes": {
    "Biome": {
      "name": "Biome",
      "desc": [
        "This class represents biomes, and allows you to interact with things inside of them."
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "canSnow",
          "is_arbitrary": false,
          "desc": [
            "This function calculates wheter snow will fall at given coordinates"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether snow will fall at given position"
          },
          "examples": [
            "biome.canSnow(new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "canSnow",
          "is_arbitrary": false,
          "desc": [
            "This function calculates wheter snow will fall at given coordinates"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x coordinate"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y coordinate"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z coordinate"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether snow will fall at given position"
          },
          "examples": [
            "biome.canSnow(0, 100, 0);"
          ]
        },
        {
          "name": "getFogColor",
          "is_arbitrary": false,
          "desc": [
            "This function returns Fog color of the biome"
          ],
          "returns": {
            "type": "Number",
            "desc": "fog color of the biome"
          },
          "examples": [
            "biome.getFogColor();"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This function returns the path id of the biome, e.g. 'plains'"
          ],
          "returns": {
            "type": "String",
            "desc": "id of the biome"
          },
          "examples": [
            "biome.getId();"
          ]
        },
        {
          "name": "getSkyColor",
          "is_arbitrary": false,
          "desc": [
            "This function returns sky color of the biome"
          ],
          "returns": {
            "type": "Number",
            "desc": "sky color of the biome"
          },
          "examples": [
            "biome.getSkyColor();"
          ]
        },
        {
          "name": "getTemperature",
          "is_arbitrary": false,
          "desc": [
            "This function returns temperature of the biome"
          ],
          "returns": {
            "type": "Number",
            "desc": "temperature of the biome"
          },
          "examples": [
            "biome.getTemperature();"
          ]
        },
        {
          "name": "getWaterColor",
          "is_arbitrary": false,
          "desc": [
            "This function returns Fog color of the biome"
          ],
          "returns": {
            "type": "Number",
            "desc": "fog color of the biome"
          },
          "examples": [
            "biome.getWaterColor();"
          ]
        },
        {
          "name": "getWaterFogColor",
          "is_arbitrary": false,
          "desc": [
            "This function returns water fog color of the biome"
          ],
          "returns": {
            "type": "Number",
            "desc": "water fog color of the biome"
          },
          "examples": [
            "biome.getWaterFogColor();"
          ]
        },
        {
          "name": "hasHighHumidity",
          "is_arbitrary": false,
          "desc": [
            "This function returns if biome has high humidity"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether biome has high humidity"
          },
          "examples": [
            "biome.hasHighHumidity();"
          ]
        },
        {
          "name": "isCold",
          "is_arbitrary": false,
          "desc": [
            "This function calculates wheter biome is cold at given position"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether temperature is cold at given position"
          },
          "examples": [
            "biome.isCold(0, 100, 0);"
          ]
        },
        {
          "name": "isCold",
          "is_arbitrary": false,
          "desc": [
            "This function calculates wheter biome is cold at given position"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x coordinate"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y coordinate"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z coordinate"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether temperature is cold at given position"
          },
          "examples": [
            "biome.isCold(0, 100, 0);"
          ]
        },
        {
          "name": "isHot",
          "is_arbitrary": false,
          "desc": [
            "This function calculates wheter biome is hot at given position"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether temperature is hot at given position"
          },
          "examples": [
            "biome.isHot(0, 100, 0);"
          ]
        },
        {
          "name": "isHot",
          "is_arbitrary": false,
          "desc": [
            "This function calculates wheter biome is hot at given position"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x coordinate"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y coordinate"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z coordinate"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether temperature is hot at given position"
          },
          "examples": [
            "biome.isHot(0, 100, 0);"
          ]
        }
      ],
      "static_methods": []
    },
    "Block": {
      "name": "Block",
      "desc": [
        "This class allows interactions with blocks in Minecraft."
      ],
      "import_path": "Minecraft",
      "superclass": "Material",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getBlastResistance",
          "is_arbitrary": false,
          "desc": [
            "This gets the blast resistance of the Block"
          ],
          "returns": {
            "type": "Number",
            "desc": "the blast resistance of the Block"
          },
          "examples": [
            "block.getBlastResistance();"
          ]
        },
        {
          "name": "getBlockNbt",
          "is_arbitrary": false,
          "desc": [
            "This gets the NBT of the Block"
          ],
          "returns": {
            "type": "Map",
            "desc": "the NBT of the Block, may be null if the Block has no NBT"
          },
          "examples": [
            "block.getBlockNbt();"
          ]
        },
        {
          "name": "getBlockProperties",
          "is_arbitrary": false,
          "desc": [
            "This gets the properties of the Block",
            "You can find a list of all block properties",
            "[here](https://minecraft.fandom.com/wiki/Java_Edition_data_values#Block_states)"
          ],
          "returns": {
            "type": "Map",
            "desc": "the properties of the Block, may be empty if there are no properties"
          },
          "examples": [
            "block.getBlockProperties();"
          ]
        },
        {
          "name": "getDefaultState",
          "is_arbitrary": false,
          "desc": [
            "This gets the default state of the block, it will conserve any positions"
          ],
          "returns": {
            "type": "Block",
            "desc": "default state of the Block"
          },
          "examples": [
            "block.getDefaultState();"
          ]
        },
        {
          "name": "getHardness",
          "is_arbitrary": false,
          "desc": [
            "This gets the hardness of the Block"
          ],
          "returns": {
            "type": "Number",
            "desc": "the hardness of the Block"
          },
          "examples": [
            "block.getHardness();"
          ]
        },
        {
          "name": "getLuminance",
          "is_arbitrary": false,
          "desc": [
            "This gets the luminance of the Block"
          ],
          "returns": {
            "type": "Number",
            "desc": "the luminance of the Block"
          },
          "examples": [
            "block.getLuminance();"
          ]
        },
        {
          "name": "getMapColour",
          "is_arbitrary": false,
          "desc": [
            "This gets the map colour of the Block, can also be called with 'getMapColor'"
          ],
          "returns": {
            "type": "List",
            "desc": "a list with the map colour of the Block as RGB values"
          },
          "examples": [
            "block.getMapColour();"
          ]
        },
        {
          "name": "getMaterial",
          "is_arbitrary": false,
          "desc": [
            "This gets the material of the Block"
          ],
          "returns": {
            "type": "Material",
            "desc": "the material of the Block"
          },
          "examples": [
            "block.getMaterial();"
          ]
        },
        {
          "name": "getPos",
          "is_arbitrary": false,
          "desc": [
            "This gets the position of the Block"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the position of the Block, may be null if the Block has no position"
          },
          "examples": [
            "block.getPos();"
          ]
        },
        {
          "name": "getX",
          "is_arbitrary": false,
          "desc": [
            "This gets the X position of the Block"
          ],
          "returns": {
            "type": "Number",
            "desc": "the X position of the Block, may be null if the Block has no position"
          },
          "examples": [
            "block.getX();"
          ]
        },
        {
          "name": "getY",
          "is_arbitrary": false,
          "desc": [
            "This gets the Y position of the Block"
          ],
          "returns": {
            "type": "Number",
            "desc": "the Y position of the Block, may be null if the Block has no position"
          },
          "examples": [
            "block.getY();"
          ]
        },
        {
          "name": "getZ",
          "is_arbitrary": false,
          "desc": [
            "This gets the Z position of the Block"
          ],
          "returns": {
            "type": "Number",
            "desc": "the Z position of the Block, may be null if the Block has no position"
          },
          "examples": [
            "block.getZ();"
          ]
        },
        {
          "name": "hasBlockPosition",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block has a position or not"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block has a position"
          },
          "examples": [
            "block.hasBlockPosition();"
          ]
        },
        {
          "name": "isBlockEntity",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is a BlockEntity"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is a BlockEntity"
          },
          "examples": [
            "block.isBlockEntity();"
          ]
        },
        {
          "name": "isFluid",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is a fluid"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is a fluid"
          },
          "examples": [
            "block.isFluid();"
          ]
        },
        {
          "name": "isFluidSource",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is a fluid source"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is a fluid source"
          },
          "examples": [
            "block.isFluidSource();"
          ]
        },
        {
          "name": "isReplaceable",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is replaceable"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is replaceable"
          },
          "examples": [
            "block.isReplaceable();"
          ]
        },
        {
          "name": "isSideSolidFullSquare",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is solid on the full square"
          ],
          "params": [
            {
              "name": "side",
              "type": "String",
              "desc": "the side to check, for example: 'north', 'south', 'east', 'west', 'up', 'down'"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is solid on the full square"
          },
          "examples": [
            "block.isSideSolidFullSquare('north');"
          ]
        },
        {
          "name": "isSolidBlock",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is a solid block"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is a solid block"
          },
          "examples": [
            "block.isSolidBlock();"
          ]
        },
        {
          "name": "isSpawnable",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is spawnable in the case of zombies"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is spawnable in the case of zombies"
          },
          "examples": [
            "block.isSpawnable();"
          ]
        },
        {
          "name": "isSpawnable",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block allows spawning for given entity"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "the entity to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block allows spawning for given entity"
          },
          "examples": [
            "block.isSpawnable(zombie);"
          ]
        },
        {
          "name": "isTransparent",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is transparent"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is transparent"
          },
          "examples": [
            "block.isTransparent();"
          ]
        },
        {
          "name": "mirrorFrontBack",
          "is_arbitrary": false,
          "desc": [
            "This mirrors the Block around the front and back"
          ],
          "returns": {
            "type": "Block",
            "desc": "the mirrored Block"
          },
          "examples": [
            "block.mirrorFrontBack();"
          ]
        },
        {
          "name": "mirrorLeftRight",
          "is_arbitrary": false,
          "desc": [
            "This mirrors the Block around the left and right"
          ],
          "returns": {
            "type": "Block",
            "desc": "the mirrored Block"
          },
          "examples": [
            "block.mirrorLeftRight();"
          ]
        },
        {
          "name": "rotateYClockwise",
          "is_arbitrary": false,
          "desc": [
            "This rotates the Block 90 degrees clockwise"
          ],
          "returns": {
            "type": "Block",
            "desc": "the rotated Block"
          },
          "examples": [
            "block.rotateYClockwise();"
          ]
        },
        {
          "name": "rotateYCounterClockwise",
          "is_arbitrary": false,
          "desc": [
            "This rotates the Block 90 degrees counter-clockwise"
          ],
          "returns": {
            "type": "Block",
            "desc": "the rotated Block"
          },
          "examples": [
            "block.rotateYCounterClockwise();"
          ]
        },
        {
          "name": "sideCoversSmallSquare",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block covers a small square"
          ],
          "params": [
            {
              "name": "side",
              "type": "String",
              "desc": "the side to check, for example: 'north', 'south', 'east', 'west', 'up', 'down'"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block covers a small square"
          },
          "examples": [
            "block.sideCoversSmallSquare('north');"
          ]
        },
        {
          "name": "with",
          "is_arbitrary": false,
          "desc": [
            "This gets modified block with a property value, conserving positions"
          ],
          "params": [
            {
              "name": "property",
              "type": "String",
              "desc": "property name, such as 'facing', 'extended'"
            },
            {
              "name": "value",
              "type": "String",
              "desc": "value name, such as 'north', 'true'"
            }
          ],
          "returns": {
            "type": "Block",
            "desc": "new state of the Block"
          },
          "examples": [
            "block.with('facing', 'north');"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This creates a Block from a material or string"
          ],
          "params": [
            {
              "name": "material",
              "type": "Material",
              "desc": "the material, item stack, block, or string to create the Block from"
            }
          ],
          "returns": {
            "type": "Block",
            "desc": "the Block created from the material or string"
          },
          "examples": [
            "Block.of(Material.STONE);"
          ]
        }
      ]
    },
    "Boolean": {
      "name": "Boolean",
      "desc": [
        "This is the boolean type, representing either true or false.",
        "This class cannot be instantiated, or extended"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [],
      "static_methods": []
    },
    "BoxShape": {
      "name": "BoxShape",
      "desc": [
        "This class allows you to create box shapes that can be rendered in the world."
      ],
      "import_path": "Minecraft",
      "superclass": "CorneredShape",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "Creates a new box shape, this is used to render boxes"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The position which will be used for the first and second corner of the box"
            }
          ],
          "examples": [
            "new BoxShape(new Pos(0, 0, 0));"
          ]
        },
        {
          "desc": [
            "Creates a new box shape, this is used to render boxes"
          ],
          "params": [
            {
              "name": "pos1",
              "type": "Pos",
              "desc": "The position of the first corner of the box"
            },
            {
              "name": "pos2",
              "type": "Pos",
              "desc": "The position of the second corner of the box"
            }
          ],
          "examples": [
            "new BoxShape(new Pos(0, 0, 0), new Pos(10, 10, 10));"
          ]
        },
        {
          "desc": [
            "Creates a new box shape, this is used to render boxes"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "The x position which will be used for the first and second corner of the box"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "The y position which will be used for the first and second corner of the box"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "The z position which will be used for the first and second corner of the box"
            }
          ],
          "examples": [
            "new BoxShape(0, 0, 0);"
          ]
        },
        {
          "desc": [
            "Creates a new box shape, this is used to render boxes"
          ],
          "params": [
            {
              "name": "x1",
              "type": "Number",
              "desc": "The x position of the first corner of the box"
            },
            {
              "name": "y1",
              "type": "Number",
              "desc": "The y position of the first corner of the box"
            },
            {
              "name": "z1",
              "type": "Number",
              "desc": "The z position of the first corner of the box"
            },
            {
              "name": "x2",
              "type": "Number",
              "desc": "The x position of the second corner of the box"
            },
            {
              "name": "y2",
              "type": "Number",
              "desc": "The y position of the second corner of the box"
            },
            {
              "name": "z2",
              "type": "Number",
              "desc": "The z position of the second corner of the box"
            }
          ],
          "examples": [
            "new BoxShape(0, 0, 0, 10, 10, 10);"
          ]
        }
      ],
      "methods": [],
      "static_methods": []
    },
    "CentredShape": {
      "name": "CentredShape",
      "desc": [
        "This class represents shapes that are positioned centrally with a width"
      ],
      "import_path": "Minecraft",
      "superclass": "OutlinedShape",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "centrePositions",
          "is_arbitrary": false,
          "desc": [
            "This centres the positions of the shape"
          ],
          "examples": [
            "shape.centrePositions();"
          ]
        },
        {
          "name": "getPos",
          "is_arbitrary": false,
          "desc": [
            "This gets the central position of the shape"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the central position of the shape"
          },
          "examples": [
            "shape.getPos();"
          ]
        },
        {
          "name": "getWidth",
          "is_arbitrary": false,
          "desc": [
            "This gets the width of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the width of the shape"
          },
          "examples": [
            "shape.getWidth();"
          ]
        },
        {
          "name": "setPos",
          "is_arbitrary": false,
          "desc": [
            "This sets the central position of the shape"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the central position of the shape"
            }
          ],
          "examples": [
            "shape.setPos(new Pos(1, 0, 100));"
          ]
        },
        {
          "name": "setWidth",
          "is_arbitrary": false,
          "desc": [
            "This sets the width of the shape"
          ],
          "params": [
            {
              "name": "width",
              "type": "Number",
              "desc": "the width of the shape"
            }
          ],
          "examples": [
            "shape.setWidth(10.5);"
          ]
        }
      ],
      "static_methods": []
    },
    "Collection": {
      "name": "Collection",
      "desc": [
        "This class is used to represent a collection of objects,",
        "this class is used internally as the parent of maps, lists, and sets.",
        "This cannot be instantiated directly.",
        "All collections inherit Iterable, and thus can be iterated over"
      ],
      "import_path": null,
      "superclass": "Iterable",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a collection, this cannot be called directly, only from child classes"
          ],
          "examples": [
            "class ChildCollection: Collection {\n    ChildCollection(): super();\n    \n    fun size() {\n        return 0;\n    }\n}"
          ]
        }
      ],
      "methods": [
        {
          "name": "isEmpty",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the collection is empty"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the collection is empty"
          },
          "examples": [
            "['object', 81, 96, 'case'].isEmpty(); // false"
          ]
        },
        {
          "name": "size",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the size of the collection"
          ],
          "returns": {
            "type": "Number",
            "desc": "the size of the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].size();"
          ]
        }
      ],
      "static_methods": []
    },
    "CommandBuilder": {
      "name": "CommandBuilder",
      "desc": [
        "This class allows you to build commands for Minecraft."
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "executes",
          "is_arbitrary": false,
          "desc": [
            "This sets the function to be executed when the command is executed,",
            "this should have the correct amount of parameters for the command"
          ],
          "params": [
            {
              "name": "function",
              "type": "CommandBuilder",
              "desc": "the function to execute"
            }
          ],
          "returns": {
            "type": "CommandBuilder",
            "desc": "the parent command builder"
          },
          "examples": [
            "commandBuilder.executes(fun() { });"
          ]
        },
        {
          "name": "then",
          "is_arbitrary": false,
          "desc": [
            "This adds a child CommandBuilder to your command builder"
          ],
          "params": [
            {
              "name": "childBuilder",
              "type": "CommandBuilder",
              "desc": "the child command builder to add"
            }
          ],
          "returns": {
            "type": "CommandBuilder",
            "desc": "the parent command builder"
          },
          "examples": [
            "commandBuilder.then(CommandBuilder.literal('subcommand'));"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "argument",
          "is_arbitrary": false,
          "desc": [
            "Creates an argument builder with a specific argument type, and a name",
            "to see all the different types refer to CommandBuilder.fromMap(...)"
          ],
          "params": [
            {
              "name": "argumentName",
              "type": "String",
              "desc": "the name of the argument"
            },
            {
              "name": "argumentType",
              "type": "String",
              "desc": "the type of the argument"
            }
          ],
          "returns": {
            "type": "CommandBuilder",
            "desc": "the argument builder"
          },
          "examples": [
            "CommandBuilder.argument('test', 'entityid');"
          ]
        },
        {
          "name": "argument",
          "is_arbitrary": false,
          "desc": [
            "Creates an argument builder with a specific argument type, a name, and a default value",
            "to see all the different types refer to CommandBuilder.fromMap(...)"
          ],
          "params": [
            {
              "name": "argumentName",
              "type": "String",
              "desc": "the name of the argument"
            },
            {
              "name": "argumentType",
              "type": "String",
              "desc": "the type of the argument"
            },
            {
              "name": "suggestions",
              "type": "List",
              "desc": "a list of strings for the suggestions for the argument"
            }
          ],
          "returns": {
            "type": "CommandBuilder",
            "desc": "the argument builder"
          },
          "examples": [
            "CommandBuilder.argument('test', 'word', ['wow', 'suggestion']);"
          ]
        },
        {
          "name": "fromMap",
          "is_arbitrary": false,
          "desc": [
            "Creates an argument builder from a map.",
            "The map must contain a 'name' key as a String that is the name of the command,",
            "the map then can contain 'subcommands' as a map which contains the subcommands,",
            "the key of the subcommands is the name of the subcommand, and the value is a map,",
            "if the name is encased in '<' and '>' it will be treated as an argument, otherwise it will be treated as a literal.",
            "You can chain arguments by leaving a space in the name like: 'literal <arg>'.",
            "If the key has no name and is just an empty string the value will be used as the function",
            "which will be executed when the command is executed, the function should have the appropriate",
            "number of parameters, the number of parameters is determined by the number of arguments.",
            "Argument types are defined in the main map under the key 'arguments' with the value of a map",
            "the keys of this map should be the names of your arguments used in your subcommands,",
            "this should be a map and must have the key 'type' which should be a string that is the type of the argument.",
            "Optionally if the type is of 'integer' or 'double' you can also have the key 'min' and 'max' with numbers as the value,",
            "and if the type is of 'enum' you must have the key 'enum' with the enum class type as the value: 'enum': MyEnum.type.",
            "You can also optionally have 'suggests' which has the value of a list of strings that are suggestions for the argument.",
            "You can also optionally have 'suggester' which has the value of a function that will be called to get suggestions for the argument,",
            "this function should have arbitrary number of parameters which will be the arguments that the user has entered so far.",
            "The possible argument types are: 'PlayerName', 'Word', 'GreedyString', 'Double', 'Integer', 'Boolean', 'Enum',",
            "'ItemStack', 'Particle', 'RecipeId', 'EntityId', 'EnchantmentId'"
          ],
          "params": [
            {
              "name": "argumentMap",
              "type": "Map",
              "desc": "the map of arguments"
            }
          ],
          "returns": {
            "type": "CommandBuilder",
            "desc": "the argument builder"
          },
          "examples": [
            "effectCommandMap = {\n    \"name\" : \"effect\",\n    \"subcommands\" : {\n        \"give\" : {\n            \"<targets> <effect>\" : {\n                \"\" : fun(target, effect) {\n                    // do something\n                },\n                \"<seconds>\" : {\n                    \"\" : fun(target, effect, second) {\n                        // do something\n                    },\n                    \"<amplifier>\" : {\n                        \"\" : fun(target, effect, second, amplifier) {\n                            // do something\n                        },\n                        \"<hideParticle>\" : {\n                            \"\" : fun(target, effect, second, amplifier, hideParticle) {\n                                // do something\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"clear\" : {\n            \"\" : fun() {\n                // do something\n            },\n            \"<targets>\" : {\n                \"\" : fun(target) {\n                    // do something\n                },\n                \"<effect>\" : {\n                    \"\" : fun(target, effect) {\n                        // do something\n                    }\n                }\n            }\n        }\n    },\n    \"arguments\" : {\n        \"targets\" : { \"type\" : \"Entity\" },\n        \"effect\" : { \"type\" : \"Effect\", \"suggests\" : [\"effect1\", \"effect2\"] },\n        \"seconds\" : { \"type\" : \"Integer\", \"min\" : 0, \"max\" : 1000000 },\n        \"amplifier\" : { \"type\" : \"Integer\", \"min\" : 0, \"max\" : 255 },\n        \"hideParticle\" : { \"type\" : \"Boolean\" }\n    }\n};\neffectCommand = CommandBuilder.fromMap(effectCommandMap);"
          ]
        },
        {
          "name": "literal",
          "is_arbitrary": false,
          "desc": [
            "Creates a literal argument with just a string"
          ],
          "params": [
            {
              "name": "argument",
              "type": "String",
              "desc": "the literal argument"
            }
          ],
          "returns": {
            "type": "CommandBuilder",
            "desc": "the argument builder"
          },
          "examples": [
            "CommandBuilder.literal('test');"
          ]
        }
      ]
    },
    "Config": {
      "name": "Config",
      "desc": [
        "This class allows you to create configs for your scripts"
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "addListener",
          "is_arbitrary": false,
          "desc": [
            "Adds a listener to the config, the listener will be called when the config is changed",
            "The listener must have one parameter, this is the new value that was set"
          ],
          "params": [
            {
              "name": "listener",
              "type": "Function",
              "desc": "The listener to add"
            }
          ],
          "examples": [
            "config.addListener(function(newValue) {\n    print(newValue);\n});"
          ]
        },
        {
          "name": "getCategory",
          "is_arbitrary": false,
          "desc": [
            "Gets the category of the config"
          ],
          "returns": {
            "type": "String",
            "desc": "The category of the config"
          },
          "examples": [
            "config.getCategory();"
          ]
        },
        {
          "name": "getDefaultValue",
          "is_arbitrary": false,
          "desc": [
            "Gets the default value of the config"
          ],
          "returns": {
            "type": "Object",
            "desc": "The default value of the config"
          },
          "examples": [
            "config.getDefaultValue();"
          ]
        },
        {
          "name": "getDescription",
          "is_arbitrary": false,
          "desc": [
            "Gets the description of the config"
          ],
          "returns": {
            "type": "String",
            "desc": "The description of the config"
          },
          "examples": [
            "config.getDescription();"
          ]
        },
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "Gets the name of the config"
          ],
          "returns": {
            "type": "String",
            "desc": "The name of the config"
          },
          "examples": [
            "config.getName();"
          ]
        },
        {
          "name": "getOptionalInfo",
          "is_arbitrary": false,
          "desc": [
            "Gets the optional info of the config"
          ],
          "returns": {
            "type": "String",
            "desc": "The optional info of the config"
          },
          "examples": [
            "config.getOptionalInfo();"
          ]
        },
        {
          "name": "getType",
          "is_arbitrary": false,
          "desc": [
            "Gets the type of the config"
          ],
          "returns": {
            "type": "String",
            "desc": "The type of the config"
          },
          "examples": [
            "config.getType();"
          ]
        },
        {
          "name": "getValue",
          "is_arbitrary": false,
          "desc": [
            "Gets the value of the config"
          ],
          "returns": {
            "type": "Object",
            "desc": "The value of the config"
          },
          "examples": [
            "config.getValue();"
          ]
        },
        {
          "name": "resetToDefault",
          "is_arbitrary": false,
          "desc": [
            "Resets the config to the default value"
          ],
          "examples": [
            "config.resetToDefault();"
          ]
        },
        {
          "name": "setValue",
          "is_arbitrary": false,
          "desc": [
            "Sets the value of the config, if the value is invalid it will not be changed"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "The new value of the config"
            }
          ],
          "examples": [
            "config.setValue(10);"
          ]
        },
        {
          "name": "toJson",
          "is_arbitrary": false,
          "desc": [
            "Converts the config into a json value, this will not keep the listeners"
          ],
          "returns": {
            "type": "Json",
            "desc": "The config as a json value"
          },
          "examples": [
            "config.toJson();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "fromListOfMap",
          "is_arbitrary": false,
          "desc": [
            "Creates a config from a list of config maps"
          ],
          "params": [
            {
              "name": "list",
              "type": "List",
              "desc": "The list of config maps"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "A list of configs created from the list of config maps"
          },
          "examples": [
            "configs = [\n    {\n        \"type\": \"boolean\",\n        \"name\": \"My Config\",\n        \"description\": \"This is my config\"\n    },\n    {\n        \"type\": \"cycle\",\n        \"name\": \"My Cycle Config\",\n        \"description\": \"This is my cycle config\",\n        \"cycle_values\": [\"one\", \"two\", \"three\"],\n        \"default_value\": \"two\"\n    }\n];\nconfigs = Config.fromListOfMap(configs);"
          ]
        },
        {
          "name": "fromMap",
          "is_arbitrary": false,
          "desc": [
            "Creates a config from a map",
            "The map must contain the following keys:",
            "'type' which is the type of the config which can be 'boolean', 'cycle', 'double', 'double_slider', 'integer', 'integer_slider', 'list', or 'string',",
            "'name' which is the name of the config",
            "And can optionally contain the following keys:",
            "'description' which is a description of the config,",
            "'optional_info' which is an optional info for the config,",
            "'default_value' which is the default value of the config,",
            "'category' which is the category of the config,",
            "'value' which is the current value of the config, ",
            "'listener' which is a function that will be called when the config changes, this must have 1 parameter which is the rule that was changed,",
            "'max_length' which is the max length for the input of the config, this must be an integer > 0, default is 32",
            "And 'cycle' types must contain the following keys:",
            "'cycle_values' which is a list of values that the config can cycle through.",
            "And slider types must contain the following keys:",
            "'min' which is the minimum value of the slider,",
            "'max' which is the maximum value of the slider"
          ],
          "params": [
            {
              "name": "map",
              "type": "Map",
              "desc": "The map to create the config from"
            }
          ],
          "returns": {
            "type": "Config",
            "desc": "The config created from the map"
          },
          "examples": [
            "configMap = {\n    \"type\": \"string\",\n    \"name\": \"My Config\",\n    \"description\": \"This is my config\",\n    \"category\": \"Useful\",\n    \"optional_info\": \"This is an optional info\",\n    \"default_value\": \"foo\",\n    \"value\": \"bar\",\n    \"listener\": fun(newValue) { },\n    \"max_length\": 64\n};\nconfig = Config.fromMap(configMap);"
          ]
        }
      ]
    },
    "ConfigHandler": {
      "name": "ConfigHandler",
      "desc": [
        "This class allows you to easily read and write config files."
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "Creates a new ConfigHandler, this is used to read and save configs"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "The name of the config, this will also be the name of the config file"
            }
          ],
          "examples": [
            "new ConfigHandler('MyConfig');"
          ]
        },
        {
          "desc": [
            "Creates a new ConfigHandler, this is used to read and save configs"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "The name of the config, this will also be the name of the config file"
            },
            {
              "name": "read",
              "type": "Boolean",
              "desc": "Whether or not to read the config on creation"
            }
          ],
          "examples": [
            "new ConfigHandler('MyConfig', false);"
          ]
        }
      ],
      "methods": [
        {
          "name": "addConfig",
          "is_arbitrary": false,
          "desc": [
            "Adds a config to the handler"
          ],
          "params": [
            {
              "name": "config",
              "type": "Config",
              "desc": "The config to add"
            }
          ],
          "examples": [
            "config = Config.fromMap({\n    \"type\": \"boolean\",\n    \"name\": \"My Config\",\n    \"description\": \"This is my config\"\n});\nconfigHandler.addConfig(config);"
          ]
        },
        {
          "name": "addConfigs",
          "is_arbitrary": true,
          "desc": [
            "Adds multiple configs to the handler, you can pass in a list of configs",
            "or a varargs of configs, this is for compatability with older scripts"
          ],
          "params": [
            {
              "name": "configs...",
              "type": "Config",
              "desc": "The configs to add"
            }
          ],
          "examples": [
            "config = Config.fromMap({\n    \"type\": \"boolean\",\n    \"name\": \"My Config\",\n    \"description\": \"This is my config\"\n});\nconfigHandler.addConfigs(config, config);"
          ]
        },
        {
          "name": "createScreen",
          "is_arbitrary": false,
          "desc": [
            "Creates a new config screen containing all of the configs in the handler, in alphabetical order.",
            "The screen name will be the default, the same as the name of the config handler"
          ],
          "returns": {
            "type": "Screen",
            "desc": "The new config screen"
          },
          "examples": [
            "configHandler.createScreen();"
          ]
        },
        {
          "name": "createScreen",
          "is_arbitrary": false,
          "desc": [
            "Creates a new config screen containing all of the configs in the handler, in alphabetical order"
          ],
          "params": [
            {
              "name": "title",
              "type": "Text",
              "desc": "The title of the screen"
            }
          ],
          "returns": {
            "type": "Screen",
            "desc": "The new config screen"
          },
          "examples": [
            "configHandler.createScreen(Text.of('wow'));"
          ]
        },
        {
          "name": "createScreen",
          "is_arbitrary": false,
          "desc": [
            "Creates a new config screen containing all of the configs in the handler"
          ],
          "params": [
            {
              "name": "title",
              "type": "Text",
              "desc": "The title of the screen"
            },
            {
              "name": "alphabetical",
              "type": "Boolean",
              "desc": "Whether or not to sort the configs alphabetically"
            }
          ],
          "returns": {
            "type": "Screen",
            "desc": "The new config screen"
          },
          "examples": [
            "configHandler.createScreen(Text.of('wow'), false);"
          ]
        },
        {
          "name": "getAllConfigs",
          "is_arbitrary": false,
          "desc": [
            "Gets all the configs in the handler"
          ],
          "returns": {
            "type": "List",
            "desc": "All the configs in the handler"
          },
          "examples": [
            "configHandler.getAllConfigs();"
          ]
        },
        {
          "name": "getConfig",
          "is_arbitrary": false,
          "desc": [
            "Gets a config from the handler"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "The name of the config"
            }
          ],
          "returns": {
            "type": "Config",
            "desc": "The config"
          },
          "examples": [
            "configHandler.getConfig('MyConfig');"
          ]
        },
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "Gets the name of the config"
          ],
          "returns": {
            "type": "String",
            "desc": "The name of the config"
          },
          "examples": [
            "configHandler.getName();"
          ]
        },
        {
          "name": "read",
          "is_arbitrary": false,
          "desc": [
            "Reads the all the configs from the file",
            "If configs are already in the handler, only the values",
            "will be overwritten"
          ],
          "examples": [
            "configHandler.read();"
          ]
        },
        {
          "name": "removeConfig",
          "is_arbitrary": false,
          "desc": [
            "Removes a config from the handler"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "The name of the config to remove"
            }
          ],
          "examples": [
            "configHandler.removeConfig('My Config');"
          ]
        },
        {
          "name": "resetAllToDefault",
          "is_arbitrary": false,
          "desc": [
            "Resets all configs to their default values"
          ],
          "examples": [
            "configHandler.resetAllToDefault();"
          ]
        },
        {
          "name": "save",
          "is_arbitrary": false,
          "desc": [
            "Saves the configs to the file"
          ],
          "examples": [
            "configHandler.save();"
          ]
        },
        {
          "name": "setSaveOnClose",
          "is_arbitrary": false,
          "desc": [
            "Sets whether or not the configs should be saved when the script ends, by default this is true"
          ],
          "params": [
            {
              "name": "saveOnClose",
              "type": "Boolean",
              "desc": "Whether or not the configs should be saved when the script ends"
            }
          ],
          "examples": [
            "configHandler.setSaveOnClose(false);"
          ]
        },
        {
          "name": "setSavePath",
          "is_arbitrary": false,
          "desc": [
            "Sets the path to save the configs to, this shouldn't include the file name"
          ],
          "params": [
            {
              "name": "savePath",
              "type": "File",
              "desc": "The path to save the configs to"
            }
          ],
          "examples": [
            "configHandler.setSavePath(new File('/home/user/scripts/'));"
          ]
        },
        {
          "name": "willSaveOnClose",
          "is_arbitrary": false,
          "desc": [
            "Gets whether or not the configs will be saved when the script ends"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "Whether or not the configs will be saved when the script ends"
          },
          "examples": [
            "configHandler.willSaveOnClose();"
          ]
        }
      ],
      "static_methods": []
    },
    "CorneredShape": {
      "name": "CorneredShape",
      "desc": [
        "This class represents all shapes that use 2 corners to dictate their position"
      ],
      "import_path": "Minecraft",
      "superclass": "OutlinedShape",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "centrePositions",
          "is_arbitrary": false,
          "desc": [
            "This centres the positions of the shape"
          ],
          "examples": [
            "shape.centrePositions();"
          ]
        },
        {
          "name": "getPos1",
          "is_arbitrary": false,
          "desc": [
            "This gets the first position of the shape"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the first position of the shape"
          },
          "examples": [
            "shape.getPos1();"
          ]
        },
        {
          "name": "getPos2",
          "is_arbitrary": false,
          "desc": [
            "This gets the second position of the shape"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the second position of the shape"
          },
          "examples": [
            "shape.getPos2();"
          ]
        },
        {
          "name": "setPos1",
          "is_arbitrary": false,
          "desc": [
            "This sets the first position of the shape"
          ],
          "params": [
            {
              "name": "pos1",
              "type": "Pos",
              "desc": "the first position of the shape"
            }
          ],
          "examples": [
            "shape.setPos1(new Pos(1, 0, 100));"
          ]
        },
        {
          "name": "setPos2",
          "is_arbitrary": false,
          "desc": [
            "This sets the second position of the shape"
          ],
          "params": [
            {
              "name": "pos2",
              "type": "Pos",
              "desc": "the second position of the shape"
            }
          ],
          "examples": [
            "shape.setPos2(new Pos(1, 0, 100));"
          ]
        }
      ],
      "static_methods": []
    },
    "Entity": {
      "name": "Entity",
      "desc": [
        "This class is mostly used to get data about entities."
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "canSpawnAt",
          "is_arbitrary": false,
          "desc": [
            "This checks whether the entity can spawn at given position with regard to light and hitbox"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether entity type can spawn at given position"
          },
          "examples": [
            "entity.canSpawnAt(new Pos(0,0,0));"
          ]
        },
        {
          "name": "collidesWith",
          "is_arbitrary": false,
          "desc": [
            "This checks whether the entity collides with a block at a given position"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position to check"
            },
            {
              "name": "block",
              "type": "Block",
              "desc": "the block to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the entity collides with the block"
          },
          "examples": [
            "entity.collidesWith(Pos.get(0, 0, 0), Block.of('minecraft:stone'));"
          ]
        },
        {
          "name": "getAge",
          "is_arbitrary": false,
          "desc": [
            "This gets the age of the entity in ticks"
          ],
          "returns": {
            "type": "Number",
            "desc": "the age of the entity in ticks"
          },
          "examples": [
            "entity.getAge();"
          ]
        },
        {
          "name": "getBiome",
          "is_arbitrary": false,
          "desc": [
            "This gets the biome of the entity"
          ],
          "returns": {
            "type": "Biome",
            "desc": "the biome the entity is in"
          },
          "examples": [
            "entity.getBiome();"
          ]
        },
        {
          "name": "getCustomName",
          "is_arbitrary": false,
          "desc": [
            "This gets the custom name of the entity if it has one"
          ],
          "returns": {
            "type": "String",
            "desc": "the custom name of the entity if it has one, otherwise null"
          },
          "examples": [
            "entity.getCustomName();"
          ]
        },
        {
          "name": "getDimension",
          "is_arbitrary": false,
          "desc": [
            "This gets the dimension of the entity"
          ],
          "returns": {
            "type": "String",
            "desc": "the dimension id of dimension the entity is in"
          },
          "examples": [
            "entity.getDimension();"
          ]
        },
        {
          "name": "getDistanceTo",
          "is_arbitrary": false,
          "desc": [
            "This gets the distance between the entity and the other entity"
          ],
          "params": [
            {
              "name": "otherEntity",
              "type": "Entity",
              "desc": "the other entity"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the distance between the entities"
          },
          "examples": [
            "entity.getDistanceTo(Player.get());"
          ]
        },
        {
          "name": "getEntityIdNumber",
          "is_arbitrary": false,
          "desc": [
            "This gets the entity id number of the entity"
          ],
          "returns": {
            "type": "Number",
            "desc": "the entity id number"
          },
          "examples": [
            "entity.getEntityIdNumber();"
          ]
        },
        {
          "name": "getEntityUuid",
          "is_arbitrary": false,
          "desc": [
            "This gets the uuid of the entity"
          ],
          "returns": {
            "type": "String",
            "desc": "the uuid of the entity"
          },
          "examples": [
            "entity.getEntityUuid();"
          ]
        },
        {
          "name": "getFullId",
          "is_arbitrary": false,
          "desc": [
            "This gets the full id of the entity, this returns the full id, so for example",
            "'minecraft:cow' you can find all entityNames on",
            "[Joa's Entity Property Encyclopedia](https://joakimthorsen.github.io/MCPropertyEncyclopedia/entities.html)"
          ],
          "returns": {
            "type": "String",
            "desc": "the full id of the entity"
          },
          "examples": [
            "entity.getFullId();"
          ]
        },
        {
          "name": "getHitbox",
          "is_arbitrary": false,
          "desc": [
            "This gets the hitbox of the entity in a list containing the two corners of the hitbox, the minimum point and the maximum point"
          ],
          "returns": {
            "type": "List",
            "desc": "the hitbox of the entity"
          },
          "examples": [
            "entity.getHitbox();"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This gets the id of the entity, this returns the id, so for examples 'cow'"
          ],
          "returns": {
            "type": "String",
            "desc": "the id of the entity"
          },
          "examples": [
            "entity.getId();"
          ]
        },
        {
          "name": "getLookingAtBlock",
          "is_arbitrary": false,
          "desc": [
            "This gets the block that the entity is currently looking at",
            "with a max range of 20 blocks, if there is no block then it will return air"
          ],
          "returns": {
            "type": "Block",
            "desc": "the block that the entity is looking at, containing the position"
          },
          "examples": [
            "entity.getLookingAtBlock();"
          ]
        },
        {
          "name": "getLookingAtBlock",
          "is_arbitrary": false,
          "desc": [
            "This gets the block that the entity is currently looking at",
            "with a specific max range, if there is no block then it will return air"
          ],
          "params": [
            {
              "name": "maxDistance",
              "type": "Number",
              "desc": "the max range to ray cast"
            }
          ],
          "returns": {
            "type": "Block",
            "desc": "the block that the entity is looking at, containing the position"
          },
          "examples": [
            "entity.getLookingAtBlock(10);"
          ]
        },
        {
          "name": "getLookingAtBlock",
          "is_arbitrary": false,
          "desc": [
            "This gets the block that the entity is currently looking at",
            "with a specific max range, and optionally whether fluids should",
            "be included, if there is no block then it will return air"
          ],
          "params": [
            {
              "name": "maxDistance",
              "type": "Number",
              "desc": "the max range to ray cast"
            },
            {
              "name": "fluidType",
              "type": "String",
              "desc": "the types of fluids to include, either 'none', 'sources', or 'all'"
            }
          ],
          "returns": {
            "type": "Block",
            "desc": "the block that the entity is looking at, containing the position"
          },
          "examples": [
            "entity.getLookingAtBlock(10, 'sources');"
          ]
        },
        {
          "name": "getLookingAtPos",
          "is_arbitrary": false,
          "desc": [
            "This gets the position that the entity is currently looking at with a specific max range"
          ],
          "params": [
            {
              "name": "maxDistance",
              "type": "Number",
              "desc": "the max range to ray cast"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the position that the entity is looking at, containing the x, y, and z"
          },
          "examples": [
            "entity.getLookingAtPos(10);"
          ]
        },
        {
          "name": "getNbt",
          "is_arbitrary": false,
          "desc": [
            "This gets the nbt of the entity as a map"
          ],
          "returns": {
            "type": "Map",
            "desc": "the nbt of the entity"
          },
          "examples": [
            "entity.getNbt();"
          ]
        },
        {
          "name": "getPitch",
          "is_arbitrary": false,
          "desc": [
            "This gets the pitch of the entity (vertical head rotation)"
          ],
          "returns": {
            "type": "Number",
            "desc": "the pitch of the entity, between -90 and 90"
          },
          "examples": [
            "entity.getPitch();"
          ]
        },
        {
          "name": "getPos",
          "is_arbitrary": false,
          "desc": [
            "This gets the position of the entity"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the position of the entity"
          },
          "examples": [
            "entity.getPos();"
          ]
        },
        {
          "name": "getSquaredDistanceTo",
          "is_arbitrary": false,
          "desc": [
            "This gets the squared distance between the entity and the other entity"
          ],
          "params": [
            {
              "name": "otherEntity",
              "type": "Entity",
              "desc": "the other entity"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the squared distance between the entities"
          },
          "examples": [
            "entity.getSquaredDistanceTo(Player.get());"
          ]
        },
        {
          "name": "getTranslatedName",
          "is_arbitrary": false,
          "desc": [
            "This gets the translated name of the entity, for examples 'minecraft:pig' would return 'Pig' if your language is in english"
          ],
          "returns": {
            "type": "String",
            "desc": "the translated name of the entity"
          },
          "examples": [
            "entity.getTranslatedName();"
          ]
        },
        {
          "name": "getVelocity",
          "is_arbitrary": false,
          "desc": [
            "This gets the velocity of the entity in a list in the form [x, y, z]"
          ],
          "returns": {
            "type": "List",
            "desc": "the velocity of the entity"
          },
          "examples": [
            "entity.getVelocity();"
          ]
        },
        {
          "name": "getWorld",
          "is_arbitrary": false,
          "desc": [
            "This gets the world the entity is in"
          ],
          "returns": {
            "type": "World",
            "desc": "the world the entity is in"
          },
          "examples": [
            "entity.getWorld();"
          ]
        },
        {
          "name": "getX",
          "is_arbitrary": false,
          "desc": [
            "This gets the x position of the entity"
          ],
          "returns": {
            "type": "Number",
            "desc": "the x position of the entity"
          },
          "examples": [
            "entity.getX();"
          ]
        },
        {
          "name": "getY",
          "is_arbitrary": false,
          "desc": [
            "This gets the y position of the entity"
          ],
          "returns": {
            "type": "Number",
            "desc": "the y position of the entity"
          },
          "examples": [
            "entity.getY();"
          ]
        },
        {
          "name": "getYaw",
          "is_arbitrary": false,
          "desc": [
            "This gets the yaw of the entity (horizontal head rotation)"
          ],
          "returns": {
            "type": "Number",
            "desc": "the yaw of the entity, between -180 and 180"
          },
          "examples": [
            "entity.getYaw();"
          ]
        },
        {
          "name": "getZ",
          "is_arbitrary": false,
          "desc": [
            "This gets the z position of the entity"
          ],
          "returns": {
            "type": "Number",
            "desc": "the z position of the entity"
          },
          "examples": [
            "entity.getZ();"
          ]
        },
        {
          "name": "isFalling",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is falling"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is falling, false if not"
          },
          "examples": [
            "entity.isFalling();"
          ]
        },
        {
          "name": "isGlowing",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is glowing"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is glowing, false if not"
          },
          "examples": [
            "entity.isGlowing();"
          ]
        },
        {
          "name": "isInLava",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is in lava"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is in lava, false if not"
          },
          "examples": [
            "entity.isInLava();"
          ]
        },
        {
          "name": "isOf",
          "is_arbitrary": false,
          "desc": [
            "This checks if the entity is of the given entity id"
          ],
          "params": [
            {
              "name": "entityId",
              "type": "String",
              "desc": "the entity id to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is of the given entity id"
          },
          "examples": [
            "entity.isOf('cow');"
          ]
        },
        {
          "name": "isOnFire",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is on fire"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is on fire, false if not"
          },
          "examples": [
            "entity.isOnFire();"
          ]
        },
        {
          "name": "isOnGround",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is on the ground"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is on the ground, false if not"
          },
          "examples": [
            "entity.isOnGround();"
          ]
        },
        {
          "name": "isSneaking",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the player is sneaking"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the player is sneaking, false if not"
          },
          "examples": [
            "entity.isSneaking();"
          ]
        },
        {
          "name": "isSprinting",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the player is sprinting"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the player is sprinting, false if not"
          },
          "examples": [
            "entity.isSprinting();"
          ]
        },
        {
          "name": "isSubmergedInWater",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is submerged in water"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is submerged in water, false if not"
          },
          "examples": [
            "entity.isSubmergedInWater();"
          ]
        },
        {
          "name": "isTouchingWater",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is touching water"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is touching water, false if not"
          },
          "examples": [
            "entity.isTouchingWater();"
          ]
        },
        {
          "name": "isTouchingWaterOrRain",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is touching water or rain"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is touching water or rain, false if not"
          },
          "examples": [
            "entity.isTouchingWaterOrRain();"
          ]
        },
        {
          "name": "setGlowing",
          "is_arbitrary": false,
          "desc": [
            "This sets the entity to either start glowing or stop glowing on the client"
          ],
          "params": [
            {
              "name": "glowing",
              "type": "Boolean",
              "desc": "the glowing state"
            }
          ],
          "examples": [
            "entity.setGlowing(true);"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This converts an entityId into an entity instance.",
            "This will throw an error if the id is not valid."
          ],
          "params": [
            {
              "name": "entityId",
              "type": "String",
              "desc": "the entityId to convert to an entity"
            }
          ],
          "returns": {
            "type": "Entity",
            "desc": "the entity instance from the id"
          },
          "examples": [
            "Entity.of('minecraft:pig');"
          ]
        }
      ]
    },
    "Enum": {
      "name": "Enum",
      "desc": [
        "This class is the super class of all enums in Arucas.",
        "Enums cannot be instantiated or extended"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the name of an enum value"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the enum value"
          },
          "examples": [
            "enum.getName();"
          ]
        },
        {
          "name": "ordinal",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the ordinal of the enum value"
          ],
          "returns": {
            "type": "Number",
            "desc": "the ordinal of the enum value"
          },
          "examples": [
            "enum.ordinal();"
          ]
        }
      ],
      "static_methods": []
    },
    "Error": {
      "name": "Error",
      "desc": [
        "This class is used for errors, and this is the only type that can be thrown.",
        "You are able to extend this class to create your own error types"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new Error value with no message"
          ],
          "examples": [
            "new Error();"
          ]
        },
        {
          "desc": [
            "This creates a new Error value with the given details as a message"
          ],
          "params": [
            {
              "name": "details",
              "type": "String",
              "desc": "the details of the error"
            }
          ],
          "examples": [
            "new Error('This is an error');"
          ]
        },
        {
          "desc": [
            "This creates a new Error value with the given details as a message and the given value"
          ],
          "params": [
            {
              "name": "details",
              "type": "String",
              "desc": "the details of the error"
            },
            {
              "name": "value",
              "type": "Object",
              "desc": "the value that is related to the error"
            }
          ],
          "examples": [
            "new Error('This is an error', [1, 2, 3]);"
          ]
        }
      ],
      "methods": [
        {
          "name": "getDetails",
          "is_arbitrary": false,
          "desc": [
            "This returns the raw message of the error"
          ],
          "returns": {
            "type": "String",
            "desc": "the details of the error"
          },
          "examples": [
            "error.getDetails();"
          ]
        },
        {
          "name": "getStackTraceString",
          "is_arbitrary": false,
          "desc": [
            "This prints the stack trace of this error"
          ],
          "returns": {
            "type": "String",
            "desc": "the stack trace converted to a string"
          },
          "examples": [
            "error.getStackTraceString();"
          ]
        },
        {
          "name": "getValue",
          "is_arbitrary": false,
          "desc": [
            "This returns the value that is related to the error"
          ],
          "returns": {
            "type": "Object",
            "desc": "the value that is related to the error"
          },
          "examples": [
            "error.getValue();"
          ]
        }
      ],
      "static_methods": []
    },
    "FakeBlock": {
      "name": "FakeBlock",
      "desc": [
        "This class can be used to create fake blocks which can be rendered in the world."
      ],
      "import_path": "Minecraft",
      "superclass": "Shape",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "Creates a fake block with the given block and position"
          ],
          "params": [
            {
              "name": "block",
              "type": "Block",
              "desc": "The block to use"
            },
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The position of the block"
            }
          ],
          "examples": [
            "new FakeBlock(Material.BEDROCK.asBlock(), new Pos(0, 0, 0));"
          ]
        }
      ],
      "methods": [
        {
          "name": "getBlock",
          "is_arbitrary": false,
          "desc": [
            "Gets the current block type of the fake block"
          ],
          "returns": {
            "type": "Block",
            "desc": "The block type of the fake block"
          },
          "examples": [
            "fakeBlock.getBlock();"
          ]
        },
        {
          "name": "getDirection",
          "is_arbitrary": false,
          "desc": [
            "Gets the direction of the fake block"
          ],
          "returns": {
            "type": "String",
            "desc": "The direction of the fake block, may be null"
          },
          "examples": [
            "fakeBlock.getDirection();"
          ]
        },
        {
          "name": "getPos",
          "is_arbitrary": false,
          "desc": [
            "Gets the position of the fake block"
          ],
          "returns": {
            "type": "Pos",
            "desc": "The position of the fake block"
          },
          "examples": [
            "fakeBlock.getPos();"
          ]
        },
        {
          "name": "setBlock",
          "is_arbitrary": false,
          "desc": [
            "Sets the block type to render of the fake block"
          ],
          "params": [
            {
              "name": "block",
              "type": "Block",
              "desc": "The block to render"
            }
          ],
          "examples": [
            "fakeBlock.setBlock(Material.BEDROCK.asBlock());"
          ]
        },
        {
          "name": "setCull",
          "is_arbitrary": false,
          "desc": [
            "Sets whether the fake block should be culled"
          ],
          "params": [
            {
              "name": "cull",
              "type": "Boolean",
              "desc": "Whether the fake block should be culled"
            }
          ],
          "examples": [
            "fakeBlock.setCull(true);"
          ]
        },
        {
          "name": "setDirection",
          "is_arbitrary": false,
          "desc": [
            "Sets the direction of the fake block,",
            "this may be null in which case the block will face the player"
          ],
          "params": [
            {
              "name": "direction",
              "type": "String",
              "desc": "The direction of the fake block"
            }
          ],
          "examples": [
            "fakeBlock.setDirection(Direction.UP);"
          ]
        },
        {
          "name": "setPos",
          "is_arbitrary": false,
          "desc": [
            "Sets the position of the fake block"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The position of the fake block"
            }
          ],
          "examples": [
            "fakeBlock.setPos(new Pos(0, 0, 0));"
          ]
        },
        {
          "name": "shouldCull",
          "is_arbitrary": false,
          "desc": [
            "Gets whether the fake block should be culled"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "Whether the fake block should be culled"
          },
          "examples": [
            "fakeBlock.shouldCull();"
          ]
        }
      ],
      "static_methods": []
    },
    "FakeEntity": {
      "name": "FakeEntity",
      "desc": [
        "This allows you to create a fake entity which can be rendered in the world."
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "Creates a new fake entity"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "The entity that you want to create into a fake entity"
            },
            {
              "name": "world",
              "type": "World",
              "desc": "The world that the entity is being rendered in"
            }
          ],
          "examples": [
            "fakeEntity = new FakeEntity();"
          ]
        }
      ],
      "methods": [
        {
          "name": "despawn",
          "is_arbitrary": false,
          "desc": [
            "Despawns the entity (makes it not render in the world)"
          ],
          "examples": [
            "fakeEntity.despawn();"
          ]
        },
        {
          "name": "getBodyYaw",
          "is_arbitrary": false,
          "desc": [
            "Gets the body yaw of the entity"
          ],
          "returns": {
            "type": "Number",
            "desc": "The body yaw of the entity"
          },
          "examples": [
            "bodyYaw = fakeEntity.getBodyYaw();"
          ]
        },
        {
          "name": "getPitch",
          "is_arbitrary": false,
          "desc": [
            "Gets the pitch of the entity"
          ],
          "returns": {
            "type": "Number",
            "desc": "The pitch of the entity"
          },
          "examples": [
            "pitch = fakeEntity.getPitch();"
          ]
        },
        {
          "name": "getPos",
          "is_arbitrary": false,
          "desc": [
            "Gets the position of the entity"
          ],
          "returns": {
            "type": "Pos",
            "desc": "The position of the entity"
          },
          "examples": [
            "pos = fakeEntity.getPos();"
          ]
        },
        {
          "name": "getWorld",
          "is_arbitrary": false,
          "desc": [
            "Gets the world that the entity is being rendered in"
          ],
          "returns": {
            "type": "World",
            "desc": "The world that the entity is being rendered in"
          },
          "examples": [
            "world = fakeEntity.getWorld();"
          ]
        },
        {
          "name": "getYaw",
          "is_arbitrary": false,
          "desc": [
            "Gets the yaw of the entity"
          ],
          "returns": {
            "type": "Number",
            "desc": "The yaw of the entity"
          },
          "examples": [
            "yaw = fakeEntity.getYaw();"
          ]
        },
        {
          "name": "setBodyYaw",
          "is_arbitrary": false,
          "desc": [
            "Sets the body yaw of the entity with no interpolation"
          ],
          "params": [
            {
              "name": "bodyYaw",
              "type": "Number",
              "desc": "The new body yaw of the entity"
            }
          ],
          "examples": [
            "fakeEntity.setBodyYaw(0);"
          ]
        },
        {
          "name": "setBodyYaw",
          "is_arbitrary": false,
          "desc": [
            "Sets the body yaw of the entity"
          ],
          "params": [
            {
              "name": "bodyYaw",
              "type": "Number",
              "desc": "The new body yaw of the entity"
            },
            {
              "name": "interpolationSteps",
              "type": "Number",
              "desc": "The number of interpolation steps to take"
            }
          ],
          "examples": [
            "fakeEntity.setBodyYaw(0, 10);"
          ]
        },
        {
          "name": "setPitch",
          "is_arbitrary": false,
          "desc": [
            "Sets the pitch of the entity with no interpolation"
          ],
          "params": [
            {
              "name": "pitch",
              "type": "Number",
              "desc": "The new pitch of the entity"
            }
          ],
          "examples": [
            "fakeEntity.setPitch(0);"
          ]
        },
        {
          "name": "setPitch",
          "is_arbitrary": false,
          "desc": [
            "Sets the pitch of the entity"
          ],
          "params": [
            {
              "name": "pitch",
              "type": "Number",
              "desc": "The new pitch of the entity"
            },
            {
              "name": "interpolationSteps",
              "type": "Number",
              "desc": "The number of interpolation steps to take"
            }
          ],
          "examples": [
            "fakeEntity.setPitch(0, 10);"
          ]
        },
        {
          "name": "setPos",
          "is_arbitrary": false,
          "desc": [
            "Sets the position of the entity with no interpolation"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The new position of the entity"
            }
          ],
          "examples": [
            "fakeEntity.setPos(new Pos(0, 0, 0));"
          ]
        },
        {
          "name": "setPos",
          "is_arbitrary": false,
          "desc": [
            "Sets the position of the entity"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The new position of the entity"
            },
            {
              "name": "interpolationSteps",
              "type": "Number",
              "desc": "The number of interpolation steps to take"
            }
          ],
          "examples": [
            "fakeEntity.setPos(new Pos(0, 0, 0), 0);"
          ]
        },
        {
          "name": "setWorld",
          "is_arbitrary": false,
          "desc": [
            "Sets the world that the entity is being rendered in"
          ],
          "params": [
            {
              "name": "world",
              "type": "World",
              "desc": "The world that the entity is being rendered in"
            }
          ],
          "examples": [
            "fakeEntity.setWorld(MinecraftClient.getClient().getWorld());"
          ]
        },
        {
          "name": "setYaw",
          "is_arbitrary": false,
          "desc": [
            "Sets the yaw of the entity with no interpolation"
          ],
          "params": [
            {
              "name": "yaw",
              "type": "Number",
              "desc": "The new yaw of the entity"
            }
          ],
          "examples": [
            "fakeEntity.setYaw(0);"
          ]
        },
        {
          "name": "setYaw",
          "is_arbitrary": false,
          "desc": [
            "Sets the yaw of the entity"
          ],
          "params": [
            {
              "name": "yaw",
              "type": "Number",
              "desc": "The new yaw of the entity"
            },
            {
              "name": "interpolationSteps",
              "type": "Number",
              "desc": "The number of interpolation steps to take"
            }
          ],
          "examples": [
            "fakeEntity.setYaw(0, 10);"
          ]
        },
        {
          "name": "spawn",
          "is_arbitrary": false,
          "desc": [
            "Spawns the entity (makes it render in the world)"
          ],
          "examples": [
            "fakeEntity.spawn();"
          ]
        },
        {
          "name": "updatePosAndRotation",
          "is_arbitrary": false,
          "desc": [
            "Updates the position and rotation of the entity with no interpolation"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The new position of the entity"
            },
            {
              "name": "yaw",
              "type": "Number",
              "desc": "The new yaw of the entity"
            },
            {
              "name": "pitch",
              "type": "Number",
              "desc": "The new pitch of the entity"
            }
          ],
          "examples": [
            "fakeEntity.updatePosAndRotation(new Pos(100, 0, 100), 0, 0);"
          ]
        },
        {
          "name": "updatePosAndRotation",
          "is_arbitrary": false,
          "desc": [
            "Updates the position and rotation of the entity"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The new position of the entity"
            },
            {
              "name": "yaw",
              "type": "Number",
              "desc": "The new yaw of the entity"
            },
            {
              "name": "pitch",
              "type": "Number",
              "desc": "The new pitch of the entity"
            },
            {
              "name": "interpolationSteps",
              "type": "Number",
              "desc": "The number of interpolation steps to take"
            }
          ],
          "examples": [
            "fakeEntity.updatePosAndRotation(new Pos(100, 0, 100), 0, 0, 10);"
          ]
        }
      ],
      "static_methods": []
    },
    "FakeScreen": {
      "name": "FakeScreen",
      "desc": [
        "This class extends Screen and so inherits all of their methods too,",
        "this class is used to create client side inventory screens."
      ],
      "import_path": "Minecraft",
      "superclass": "Screen",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "Creates a FakeScreen instance with given name and given amount of rows,",
            "this will throw an error if the rows are not between 1 and 6"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "the name of the screen"
            },
            {
              "name": "rows",
              "type": "Number",
              "desc": "the number of rows between 1 - 6"
            }
          ],
          "examples": [
            "new FakeScreen('MyScreen', 6);"
          ]
        }
      ],
      "methods": [
        {
          "name": "getStackForSlot",
          "is_arbitrary": false,
          "desc": [
            "Gets the stack for the given slot, if the slot is out of bounds it returns null"
          ],
          "params": [
            {
              "name": "slotNum",
              "type": "Number",
              "desc": "the slot number"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the stack for the given slot"
          },
          "examples": [
            "fakeScreen.getStackForSlot(0);"
          ]
        },
        {
          "name": "onClick",
          "is_arbitrary": false,
          "desc": [
            "This sets the callback for when a slot is clicked in the inventory.",
            "The callback must have 3 parameters, the first is the item stack that was clicked,",
            "then second is the slot number, third is the action as a string"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the callback function"
            }
          ],
          "examples": [
            "fakeScreen.onClick(fun(item, slotNum, action) {\n    // action can be any of the following:\n    // 'PICKUP', 'QUICK_MOVE', 'SWAP', 'CLONE', 'THROW', 'QUICK_CRAFT', or 'PICKUP_ALL'\n    print(action);\n});"
          ]
        },
        {
          "name": "setStackForSlot",
          "is_arbitrary": false,
          "desc": [
            "Sets the stack for the given slot, if the slot is out of bounds it won't be set"
          ],
          "params": [
            {
              "name": "slotNum",
              "type": "Number",
              "desc": "the slot number"
            },
            {
              "name": "stack",
              "type": "ItemStack",
              "desc": "the stack to set"
            }
          ],
          "examples": [
            "fakeScreen.setStackForSlot(0, Material.DIAMOND_BLOCK.asItemStack());"
          ]
        }
      ],
      "static_methods": []
    },
    "File": {
      "name": "File",
      "desc": [
        "This class allows you to read and write files"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new File object with set path"
          ],
          "params": [
            {
              "name": "path",
              "type": "String",
              "desc": "the path of the file"
            }
          ],
          "examples": [
            "new File('foo/bar/script.arucas');"
          ]
        }
      ],
      "methods": [
        {
          "name": "createDirectory",
          "is_arbitrary": false,
          "desc": [
            "This creates all parent directories of the file if they don't already exist"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the directories were created"
          },
          "examples": [
            "file.createDirectory();"
          ]
        },
        {
          "name": "delete",
          "is_arbitrary": false,
          "desc": [
            "This deletes the file"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the file was deleted"
          },
          "examples": [
            "file.delete();"
          ]
        },
        {
          "name": "exists",
          "is_arbitrary": false,
          "desc": [
            "This returns if the file exists"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the file exists"
          },
          "examples": [
            "file.exists();"
          ]
        },
        {
          "name": "getAbsolutePath",
          "is_arbitrary": false,
          "desc": [
            "This returns the absolute path of the file"
          ],
          "returns": {
            "type": "String",
            "desc": "the absolute path of the file"
          },
          "examples": [
            "file.getAbsolutePath();"
          ]
        },
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This returns the name of the file"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the file"
          },
          "examples": [
            "File.getName();"
          ]
        },
        {
          "name": "getPath",
          "is_arbitrary": false,
          "desc": [
            "This returns the path of the file"
          ],
          "returns": {
            "type": "String",
            "desc": "the path of the file"
          },
          "examples": [
            "file.getPath();"
          ]
        },
        {
          "name": "getSubFiles",
          "is_arbitrary": false,
          "desc": [
            "This returns a list of all the sub files in the directory"
          ],
          "returns": {
            "type": "List",
            "desc": "a list of all the sub files in the directory"
          },
          "examples": [
            "file.getSubFiles();"
          ]
        },
        {
          "name": "open",
          "is_arbitrary": false,
          "desc": [
            "This opens the file (as in opens it on your os)"
          ],
          "examples": [
            "file.open();"
          ]
        },
        {
          "name": "read",
          "is_arbitrary": false,
          "desc": [
            "This reads the file and returns the contents as a string"
          ],
          "returns": {
            "type": "String",
            "desc": "the contents of the file"
          },
          "examples": [
            "file.read();"
          ]
        },
        {
          "name": "resolve",
          "is_arbitrary": false,
          "desc": [
            "This gets a resolves file object from the current one"
          ],
          "params": [
            {
              "name": "filePath",
              "type": "String",
              "desc": "the relative file path"
            }
          ],
          "returns": {
            "type": "File",
            "desc": "the resolved file"
          },
          "examples": [
            "file.resolve('child.txt');"
          ]
        },
        {
          "name": "write",
          "is_arbitrary": false,
          "desc": [
            "This writes a string to a file"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to write to the file"
            }
          ],
          "examples": [
            "file.write('Hello World!');"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "getDirectory",
          "is_arbitrary": false,
          "desc": [
            "This returns the file of user directory"
          ],
          "returns": {
            "type": "File",
            "desc": "the file of the working directory"
          },
          "examples": [
            "File.getDirectory();"
          ]
        }
      ]
    },
    "Function": {
      "name": "Function",
      "desc": [
        "This class is used for functions, and this is the only type that can be called.",
        "You are able to extend this class and implement an 'invoke' method to create",
        "your own function types, this class cannot be instantiated directly"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a function, this cannot be called directly, only from child classes"
          ],
          "examples": [
            "class ChildFunction: Function {\n    ChildFunction(): super();\n}"
          ]
        }
      ],
      "methods": [],
      "static_methods": []
    },
    "Future": {
      "name": "Future",
      "desc": [
        "This class is used to represent values that are in the future.",
        "More precisely values that are being evaluated on another thread,",
        "this allows you to access those values once they've been processed"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "await",
          "is_arbitrary": false,
          "desc": [
            "This blocks the current thread until the future has",
            "been completed and then returns the value of the future"
          ],
          "returns": {
            "type": "Object",
            "desc": "The value of the future"
          },
          "examples": [
            "future.await();"
          ]
        },
        {
          "name": "isComplete",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the future has been completed"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "Whether the future has been completed"
          },
          "examples": [
            "future.isComplete();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "completed",
          "is_arbitrary": false,
          "desc": [
            "This returns a future that with a complete value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "The value to complete the future with"
            }
          ],
          "returns": {
            "type": "Future",
            "desc": "The future that has been completed with the value"
          },
          "examples": [
            "future = Future.completed(true);"
          ]
        }
      ]
    },
    "GameEvent": {
      "name": "GameEvent",
      "desc": [
        "This class allows you to register listeners for game events in Minecraft."
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new GameEvent, that is not cancellable"
          ],
          "params": [
            {
              "name": "eventName",
              "type": "String",
              "desc": "The name of the event, you can find these on the GameEvents page"
            },
            {
              "name": "onEvent",
              "type": "Function",
              "desc": "The function to run when the event is called, some events may have parameters"
            }
          ],
          "examples": [
            "new GameEvent('onClientTick', fun() { });"
          ]
        },
        {
          "desc": [
            "This creates a new GameEvent"
          ],
          "params": [
            {
              "name": "eventName",
              "type": "String",
              "desc": "The name of the event, you can find these on the GameEvents page"
            },
            {
              "name": "onEvent",
              "type": "Function",
              "desc": "The function to run when the event is called, some events may have parameters"
            },
            {
              "name": "cancellable",
              "type": "Boolean",
              "desc": "Whether or not the event is cancellable, if it is then it will run on the main thread"
            }
          ],
          "examples": [
            "new GameEvent('onClientTick', fun() { }, true);"
          ]
        }
      ],
      "methods": [
        {
          "name": "isRegistered",
          "is_arbitrary": false,
          "desc": [
            "This returns whether or not the event is registered"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "Whether or not the event is registered"
          },
          "examples": [
            "gameEvent.isRegistered();"
          ]
        },
        {
          "name": "register",
          "is_arbitrary": false,
          "desc": [
            "This registers the event"
          ],
          "examples": [
            "gameEvent.register();"
          ]
        },
        {
          "name": "unregister",
          "is_arbitrary": false,
          "desc": [
            "This unregisters the event"
          ],
          "examples": [
            "gameEvent.unregister();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "cancel",
          "is_arbitrary": false,
          "desc": [
            "If called on a cancellable event, this will stop execution and cancel the event,",
            "if called on a non-cancellable event, or not on an event, this will throw an error"
          ],
          "examples": [
            "GameEvent.cancel();"
          ]
        },
        {
          "name": "future",
          "is_arbitrary": false,
          "desc": [
            "This returns a future that allows you to wait for an event to occur"
          ],
          "returns": {
            "type": "Future",
            "desc": "the future, will complete once the event has occurred"
          },
          "examples": [
            "GameEvent.future('onClientTick').await();"
          ]
        },
        {
          "name": "unregisterAll",
          "is_arbitrary": false,
          "desc": [
            "This unregisters all events registered by this script"
          ],
          "examples": [
            "GameEvent.unregisterAll();"
          ]
        }
      ]
    },
    "ItemEntity": {
      "name": "ItemEntity",
      "desc": [
        "This class extends Entity and so inherits all of their methods too,",
        "ItemEntities are entities that are dropped items."
      ],
      "import_path": "Minecraft",
      "superclass": "Entity",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getCustomName",
          "is_arbitrary": false,
          "desc": [
            "This method returns the custom name of the ItemEntity"
          ],
          "returns": {
            "type": "String",
            "desc": "the custom name of the entity"
          },
          "examples": [
            "itemEntity.getCustomName();"
          ]
        },
        {
          "name": "getItemAge",
          "is_arbitrary": false,
          "desc": [
            "This method returns the age of the ItemEntity",
            "this is increased every tick and the item entity despawns after 6000 ticks"
          ],
          "returns": {
            "type": "Number",
            "desc": "the age of the entity"
          },
          "examples": [
            "itemEntity.getItemAge();"
          ]
        },
        {
          "name": "getItemStack",
          "is_arbitrary": false,
          "desc": [
            "This method returns the ItemStack that is held in the ItemEntity"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack that the entity holds"
          },
          "examples": [
            "itemEntity.getItemStack();"
          ]
        },
        {
          "name": "getThrower",
          "is_arbitrary": false,
          "desc": [
            "This method returns the player that threw the ItemEntity, null if not thrown by a player or player not found"
          ],
          "returns": {
            "type": "Player",
            "desc": "the player that threw the entity"
          },
          "examples": [
            "itemEntity.getThrower();"
          ]
        }
      ],
      "static_methods": []
    },
    "ItemStack": {
      "name": "ItemStack",
      "desc": [
        "This class represents an item stack. It can be used to create new item stacks, or to modify existing ones."
      ],
      "import_path": "Minecraft",
      "superclass": "Material",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "asEntity",
          "is_arbitrary": false,
          "desc": [
            "This creates an item entity with the item"
          ],
          "returns": {
            "type": "ItemEntity",
            "desc": "the entity of the ItemStack"
          },
          "examples": [
            "itemStack.asEntity();"
          ]
        },
        {
          "name": "getCount",
          "is_arbitrary": false,
          "desc": [
            "This gets the count of the ItemStack, the amount of items in the stack"
          ],
          "returns": {
            "type": "Number",
            "desc": "the count of the ItemStack"
          },
          "examples": [
            "itemStack.getCount();"
          ]
        },
        {
          "name": "getCustomName",
          "is_arbitrary": false,
          "desc": [
            "This gets the custom name of the ItemStack"
          ],
          "returns": {
            "type": "String",
            "desc": "the custom name of the ItemStack"
          },
          "examples": [
            "itemStack.getCustomName();"
          ]
        },
        {
          "name": "getDurability",
          "is_arbitrary": false,
          "desc": [
            "This gets the durability of the item"
          ],
          "returns": {
            "type": "Number",
            "desc": "the durability of the item"
          },
          "examples": [
            "itemStack.getDurability();"
          ]
        },
        {
          "name": "getEnchantments",
          "is_arbitrary": false,
          "desc": [
            "This gets the enchantments of the item, in a map containing the",
            "id of the enchantment as the key and the level of the enchantment as the value"
          ],
          "returns": {
            "type": "Map",
            "desc": "the enchantments of the item, map may be empty"
          },
          "examples": [
            "itemStack.getEnchantments();"
          ]
        },
        {
          "name": "getMaterial",
          "is_arbitrary": false,
          "desc": [
            "This gets the material of the ItemStack"
          ],
          "returns": {
            "type": "Material",
            "desc": "the material of the ItemStack"
          },
          "examples": [
            "itemStack.getMaterial();"
          ]
        },
        {
          "name": "getMaxCount",
          "is_arbitrary": false,
          "desc": [
            "This gets the max stack size of the ItemStack"
          ],
          "returns": {
            "type": "Number",
            "desc": "the max stack size of the ItemStack"
          },
          "examples": [
            "itemStack.getMaxCount();"
          ]
        },
        {
          "name": "getMaxDurability",
          "is_arbitrary": false,
          "desc": [
            "This gets the max durability of the item"
          ],
          "returns": {
            "type": "Number",
            "desc": "the max durability of the item"
          },
          "examples": [
            "itemStack.getMaxDurability();"
          ]
        },
        {
          "name": "getMiningSpeedMultiplier",
          "is_arbitrary": false,
          "desc": [
            "This gets the mining speed multiplier of the ItemStack for the given Block,",
            "for example a diamond pickaxe on stone would have a higher multiplier than air on stone"
          ],
          "params": [
            {
              "name": "block",
              "type": "Block",
              "desc": "the Block to get the mining speed multiplier for"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the mining speed multiplier of the ItemStack for the given Block"
          },
          "examples": [
            "pickaxe = Material.DIAMOND_PICKAXE.asItemStack();\ngoldBlock = Material.GOLD_BLOCK.asBlock();\n\npickaxe.getMiningSpeedMultiplier(goldBlock);"
          ]
        },
        {
          "name": "getNbt",
          "is_arbitrary": false,
          "desc": [
            "This gets the NBT data of the ItemStack as a Map"
          ],
          "returns": {
            "type": "Map",
            "desc": "the NBT data of the ItemStack"
          },
          "examples": [
            "itemStack.getNbt();"
          ]
        },
        {
          "name": "getNbtAsString",
          "is_arbitrary": false,
          "desc": [
            "This gets the NBT data of the ItemStack as a String"
          ],
          "returns": {
            "type": "String",
            "desc": "the NBT data of the ItemStack"
          },
          "examples": [
            "itemStack.getNbtAsString();"
          ]
        },
        {
          "name": "getTranslatedName",
          "is_arbitrary": false,
          "desc": [
            "This gets the translated name of the ItemStack, for example",
            "'diamond_sword' would return 'Diamond Sword' if your language is English"
          ],
          "returns": {
            "type": "String",
            "desc": "the translated name of the ItemStack"
          },
          "examples": [
            "itemStack.getTranslatedName();"
          ]
        },
        {
          "name": "isBlockItem",
          "is_arbitrary": false,
          "desc": [
            "This checks if the ItemStack can be placed as a block"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the ItemStack can be placed as a block, false otherwise"
          },
          "examples": [
            "itemStack.isBlockItem();"
          ]
        },
        {
          "name": "isNbtEqual",
          "is_arbitrary": false,
          "desc": [
            "This checks if the ItemStack has the same NBT data as the other given ItemStack"
          ],
          "params": [
            {
              "name": "itemStack",
              "type": "ItemStack",
              "desc": "the other ItemStack to compare to"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the ItemStack has the same NBT data as the other given ItemStack"
          },
          "examples": [
            "itemStack.isNbtEqual(Material.GOLD_INGOT.asItemStack());"
          ]
        },
        {
          "name": "isStackable",
          "is_arbitrary": false,
          "desc": [
            "This checks if the ItemStack is stackable"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the ItemStack is stackable, false otherwise"
          },
          "examples": [
            "itemStack.isStackable();"
          ]
        },
        {
          "name": "setCustomName",
          "is_arbitrary": false,
          "desc": [
            "This sets the custom name of the ItemStack"
          ],
          "params": [
            {
              "name": "customName",
              "type": "Text",
              "desc": "the custom name of the ItemStack, this can be text or string"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack with the new custom name"
          },
          "examples": [
            "itemStack.setCustomName('My Pickaxe');"
          ]
        },
        {
          "name": "setItemLore",
          "is_arbitrary": false,
          "desc": [
            "This sets the lore of the ItemStack"
          ],
          "params": [
            {
              "name": "lore",
              "type": "List",
              "desc": "the lore of the ItemStack as a list of Text"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack with the new lore"
          },
          "examples": [
            "itemStack = Material.DIAMOND_PICKAXE.asItemStack();\nitemStack.setItemLore([\n    Text.of('This is a pickaxe'),\n    Text.of('It is made of diamond')\n]);"
          ]
        },
        {
          "name": "setNbt",
          "is_arbitrary": false,
          "desc": [
            "This sets the NBT data of the ItemStack"
          ],
          "params": [
            {
              "name": "nbtMap",
              "type": "Map",
              "desc": "the NBT data of the ItemStack as a map"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack with the new NBT data"
          },
          "examples": [
            "itemStack.setNbt({'Lore': []});"
          ]
        },
        {
          "name": "setNbtFromString",
          "is_arbitrary": false,
          "desc": [
            "This sets the NBT data of the ItemStack from an NBT string"
          ],
          "params": [
            {
              "name": "nbtString",
              "type": "String",
              "desc": "the NBT data of the ItemStack as a string"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack with the new NBT data"
          },
          "examples": [
            "itemStack.setNbtFromString(\"{\\\"Lore\\\": []}\");"
          ]
        },
        {
          "name": "setStackSize",
          "is_arbitrary": false,
          "desc": [
            "This sets the stack size of the ItemStack"
          ],
          "params": [
            {
              "name": "stackSize",
              "type": "Number",
              "desc": "the stack size of the ItemStack"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack with the new stack size"
          },
          "examples": [
            "itemStack.setStackSize(5);"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This creates an ItemStack from a material or a string"
          ],
          "params": [
            {
              "name": "material",
              "type": "Material",
              "desc": "the material, item stack, block, or string to create the ItemStack from"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the new ItemStack instance"
          },
          "examples": [
            "ItemStack.of('dirt');"
          ]
        },
        {
          "name": "parse",
          "is_arbitrary": false,
          "desc": [
            "This creates an ItemStack from a NBT string, this can be in the form of a map",
            "or an ItemStack NBT, or like the item stack command format"
          ],
          "params": [
            {
              "name": "nbtString",
              "type": "String",
              "desc": "the NBT string to create the ItemStack from"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the new ItemStack instance"
          },
          "examples": [
            "ItemStack.parse('{id:\"minecraft:dirt\",Count:64}')"
          ]
        }
      ]
    },
    "Iterable": {
      "name": "Iterable",
      "desc": [
        "This class represents an object that can be iterated over.",
        "This class is used internally to denote whether an object can be",
        "iterated over inside a foreach loop"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates an iterable, this cannot be called directly, only from child classes"
          ],
          "examples": [
            "class IterableImpl: Iterable {\n    IterableImpl(): super();\n    \n    fun iterator() {\n        // Example\n        return [].iterator();\n    }\n}"
          ]
        }
      ],
      "methods": [
        {
          "name": "iterator",
          "is_arbitrary": false,
          "desc": [
            "This gets the generated iterator"
          ],
          "returns": {
            "type": "Iterator",
            "desc": "the generated iterator"
          },
          "examples": [
            "iterable = [];\ni = iterable.iterator();\nwhile (i.hasNext()) {\n    next = i.next();\n}\n\n// Or just, compiles to above\nforeach (next : iterable); "
          ]
        }
      ],
      "static_methods": []
    },
    "Iterator": {
      "name": "Iterator",
      "desc": [
        "This class represents an object that iterates.",
        "This is what is used internally to iterate in a",
        "foreach loop and you can create your own iterators",
        "to use be able to use them inside a foreach"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates an iterator, this cannot be called directly, only from child classes"
          ],
          "examples": [
            "class IteratorImpl: Iterator {\n    IteratorImpl(): super();\n    \n    fun hasNext() {\n        return false;\n    }\n    \n    fun next() {\n        throw new Error(\"Nothing next\");\n    }\n}"
          ]
        }
      ],
      "methods": [
        {
          "name": "hasNext",
          "is_arbitrary": false,
          "desc": [
            "Checks whether the iterator has a next item to iterate"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether there are items left to iterate"
          },
          "examples": [
            "iterator = [].iterator();\niterator.hasNext();"
          ]
        },
        {
          "name": "next",
          "is_arbitrary": false,
          "desc": [
            "Gets the next item in the iterator, may throw if there is no next item"
          ],
          "returns": {
            "type": "Object",
            "desc": "the next item"
          },
          "examples": [
            "iterator = [10, 20].iterator();\niterator.next(); // 10\niterator.next(); // 20"
          ]
        }
      ],
      "static_methods": []
    },
    "Java": {
      "name": "Java",
      "desc": [
        "This class wraps Java values allowing for interactions between Java and Arucas.",
        "This class cannot be instantiated or extended but you can create Java values by",
        "using the static method 'Java.valueOf()' to convert Arucas to Java"
      ],
      "import_path": "util.Internal",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "callMethod",
          "is_arbitrary": true,
          "deprecated": [
            "You should call the method directly on the value: Java.valueOf('').isBlank();"
          ],
          "desc": [
            "This calls the specified method with the specified parameters, calling the method",
            "with this function has no benefits unless you are calling a function that also is",
            "native to Arucas. For example `object.copy()` will use the Arucas 'copy' function.",
            "But this is extremely rare so almost all of the time you should all the method normally."
          ],
          "params": [
            {
              "name": "methodName",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameters...",
              "type": "Object",
              "desc": "the parameters to call the method with"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the return value of the method call wrapped in the Java wrapper"
          },
          "examples": [
            "Java.valueOf('').callMethod('isBlank');"
          ]
        },
        {
          "name": "getField",
          "is_arbitrary": false,
          "deprecated": [
            "You should call the method directly on the value: `Java.constructClass('me.senseiwells.impl.Test').A;`"
          ],
          "desc": [
            "This returns the Java wrapped value of the specified field.",
            "There is no reason for you to be using this method, it will be removed in future versions"
          ],
          "params": [
            {
              "name": "fieldName",
              "type": "String",
              "desc": "the name of the field"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java wrapped value of the field"
          },
          "examples": [
            "Java.constructClass('me.senseiwells.impl.Test').getField('A');"
          ]
        },
        {
          "name": "getMethodDelegate",
          "is_arbitrary": false,
          "deprecated": [
            "Consider wrapping the method in a lambda instead"
          ],
          "desc": [
            "This returns a method delegate for the specified method name and parameters.",
            "This should be avoided and replaced with a Arucas function wrapping the call instead.",
            "For example: `delegate = (fun() { Java.valueOf('').isBlank(); });`.",
            "Another thing to note is that the parameter count parameter is no longer",
            "used and ignored internally, instead the parameters are calculated when you",
            "call the delegate. The parameter remains for backwards compatability."
          ],
          "params": [
            {
              "name": "methodName",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameters",
              "type": "Number",
              "desc": "the number of parameters"
            }
          ],
          "returns": {
            "type": "Function",
            "desc": "the function containing the Java method delegate"
          },
          "examples": [
            "Java.valueOf('string!').getMethodDelegate('isBlank', 0);"
          ]
        },
        {
          "name": "setField",
          "is_arbitrary": false,
          "deprecated": [
            "You should assign the value directly on the value: Java.constructClass('me.senseiwells.impl.Test').A = 'Hello';"
          ],
          "desc": [
            "This sets the specified field to the specified value",
            "There is no reason for you to be using this method, it will be removed in future versions"
          ],
          "params": [
            {
              "name": "fieldName",
              "type": "String",
              "desc": "the name of the field"
            },
            {
              "name": "value",
              "type": "Object",
              "desc": "the value to set the field to, the value type must match the type of the field"
            }
          ],
          "examples": [
            "Java.constructClass('me.senseiwells.impl.Test').setField('A', 'Hello');"
          ]
        },
        {
          "name": "toArucas",
          "is_arbitrary": false,
          "desc": [
            "This converts the Java value to an Arucas Value if possible, this may still",
            "be of a Java value if it cannot be converted. For example, Strings, Numbers, Lists",
            "will be converted but "
          ],
          "returns": {
            "type": "Object",
            "desc": "the Value in Arucas, this may still be of Java value if the value cannot be converted into an Arucas value, values like Strings, Numbers, Lists, etc... will be converted"
          },
          "examples": [
            "Java.valueOf([1, 2, 3]).toArucas();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "arrayOf",
          "is_arbitrary": true,
          "desc": [
            "Creates a Java Object array with a given values, this will be the size of the array,",
            "this cannot be used to create primitive arrays"
          ],
          "params": [
            {
              "name": "values...",
              "type": "Object",
              "desc": "the values to add to the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Object array"
          },
          "examples": [
            "Java.arrayOf(1, 2, 3, 'string!', false);"
          ]
        },
        {
          "name": "booleanArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java boolean array with a given size, the array is filled with false",
            "by default and can be filled with only booleans"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java boolean array"
          },
          "examples": [
            "Java.booleanArray(10);"
          ]
        },
        {
          "name": "booleanOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value boolean, to be used in Java"
          ],
          "params": [
            {
              "name": "bool",
              "type": "Boolean",
              "desc": "the boolean to convert to a Java boolean"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the boolean in Java wrapper"
          },
          "examples": [
            "Java.booleanOf(true);"
          ]
        },
        {
          "name": "byteArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java byte array with a given size, the array is filled with 0's",
            "by default and can be filled with only bytes"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java byte array"
          },
          "examples": [
            "Java.byteArray(10);"
          ]
        },
        {
          "name": "byteOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value byte, to be used in Java"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java byte"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the byte in Java wrapper"
          },
          "examples": [
            "Java.byteOf(1);"
          ]
        },
        {
          "name": "callStaticMethod",
          "is_arbitrary": true,
          "deprecated": [
            "You should use 'Java.classOf(name)' then call the static method"
          ],
          "desc": [
            "Calls a static method of a Java class.",
            "This should be avoided and instead use 'classOf' to get the",
            "instance of the class then call the static method on that"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "methodName",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameters...",
              "type": "Object",
              "desc": "any parameters to call the method with"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the return value of the method wrapped in the Java wrapper"
          },
          "examples": [
            "Java.callStaticMethod('java.lang.Integer', 'parseInt', '123');"
          ]
        },
        {
          "name": "charArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java char array with a given size, the array is filled with null characters's",
            "by default and can be filled with only chars"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java char array"
          },
          "examples": [
            "Java.charArray(10);"
          ]
        },
        {
          "name": "charOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value char, to be used in Java"
          ],
          "params": [
            {
              "name": "char",
              "type": "String",
              "desc": "the char to convert to a Java char"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the char in Java wrapper"
          },
          "examples": [
            "Java.charOf('a');"
          ]
        },
        {
          "name": "classFromName",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'Java.classOf(name)' instead"
          ],
          "desc": [
            "Gets a Java class from the name of the class"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class you want to get"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Class<?> value wrapped in the Java wrapper"
          },
          "examples": [
            "Java.classFromName('java.util.ArrayList');"
          ]
        },
        {
          "name": "classOf",
          "is_arbitrary": false,
          "desc": [
            "Gets a Java class from the name of the class"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class you want to get"
            }
          ],
          "returns": {
            "type": "JavaClass",
            "desc": "the Java class value which can be used as a class reference"
          },
          "examples": [
            "Java.classOf('java.util.ArrayList');"
          ]
        },
        {
          "name": "constructClass",
          "is_arbitrary": true,
          "deprecated": [
            "You should use 'Java.classOf(name)' then call the result to construct the class"
          ],
          "desc": [
            "This constructs a Java class with specified class name and parameters.",
            "This should be avoided and instead use 'classOf' to get the class",
            "instance then call the constructor on that instance"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "parameters...",
              "type": "Object",
              "desc": "any parameters to pass to the constructor"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the constructed Java Object wrapped in the Java wrapper"
          },
          "examples": [
            "Java.constructClass('java.util.ArrayList');"
          ]
        },
        {
          "name": "consumerOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Consumer object from a given function, it must have one",
            "parameter and any return values will be ignored"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Consumer object"
          },
          "examples": [
            "Java.consumerOf(fun(something) {\n    print(something);\n});"
          ]
        },
        {
          "name": "doubleArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java double array with a given size, the array is filled with 0's",
            "by default and can be filled with only doubles"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java double array"
          },
          "examples": [
            "Java.doubleArray(10);"
          ]
        },
        {
          "name": "doubleOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value double, to be used in Java"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java double"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the double in Java wrapper"
          },
          "examples": [
            "Java.doubleOf(1.0);"
          ]
        },
        {
          "name": "floatArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java float array with a given size, the array is filled with 0's",
            "by default and can be filled with only floats"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java float array"
          },
          "examples": [
            "Java.floatArray(10);"
          ]
        },
        {
          "name": "floatOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value float, to be used in Java"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java float"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the float in Java wrapper"
          },
          "examples": [
            "Java.floatOf(1.0);"
          ]
        },
        {
          "name": "functionOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Function object from a given function"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed, this must have one parameter and must return a value"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Function object"
          },
          "examples": [
            "Java.functionOf(fun(something) {\n    return something;\n});"
          ]
        },
        {
          "name": "getStaticField",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'Java.classOf(name)' then access the static field"
          ],
          "desc": [
            "Gets a static field Java value from a Java class"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "fieldName",
              "type": "String",
              "desc": "the name of the field"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java value of the field wrapped in the Java wrapper"
          },
          "examples": [
            "Java.getStaticField('java.lang.Integer', 'MAX_VALUE');"
          ]
        },
        {
          "name": "getStaticMethodDelegate",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'Java.classOf(name)' then wrap the static method"
          ],
          "desc": [
            "Gets a static method delegate from a Java class, this should",
            "be avoided and instance use 'classOf' to get the class instance",
            "and then call the method on that class instance. The parameter count",
            "parameter is no longer used internally but remains for backwards compatibility"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "methodName",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameters",
              "type": "Number",
              "desc": "the number of parameters"
            }
          ],
          "returns": {
            "type": "Function",
            "desc": "the delegated Java method in an Arucas Function"
          },
          "examples": [
            "Java.getStaticMethodDelegate('java.lang.Integer', 'parseInt', 1);"
          ]
        },
        {
          "name": "intArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java int array with a given size, the array is filled with 0's",
            "by default and can be filled with only ints"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java int array"
          },
          "examples": [
            "Java.intArray(10);"
          ]
        },
        {
          "name": "intOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value int, to be used in Java"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java int"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the int in Java wrapper"
          },
          "examples": [
            "Java.intOf(1);"
          ]
        },
        {
          "name": "longArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java long array with a given size, the array is filled with 0's",
            "by default and can be filled with only longs"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java long array"
          },
          "examples": [
            "Java.longArray(10);"
          ]
        },
        {
          "name": "longOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value long, to be used in Java"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java long"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the long in Java wrapper"
          },
          "examples": [
            "Java.longOf(1);"
          ]
        },
        {
          "name": "objectArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Object array with a given size, the array is filled with null values",
            "by default and can be filled with any Java values, this array cannot be expanded"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Object array"
          },
          "examples": [
            "Java.arrayWithSize(10);"
          ]
        },
        {
          "name": "predicateOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Predicate object from a given function"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed, this must have one parameter and must return a boolean"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Predicate object"
          },
          "examples": [
            "Java.predicateOf(fun(something) {\n    return something == 'something';\n});"
          ]
        },
        {
          "name": "runnableOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Runnable object from a given function, this must",
            "have no paramters and any return values will be ignored"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Runnable object"
          },
          "examples": [
            "Java.runnableOf(fun() {\n    print('runnable');\n});"
          ]
        },
        {
          "name": "setStaticField",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'Java.classOf(name)' then assign the static field"
          ],
          "desc": [
            "Sets a static field in a Java class with a new value"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "fieldName",
              "type": "String",
              "desc": "the name of the field"
            },
            {
              "name": "newValue",
              "type": "Object",
              "desc": "the new value"
            }
          ],
          "examples": [
            "// Obviously this won't work, but it's just an example\nJava.setStaticField('java.lang.Integer', 'MAX_VALUE', Java.intOf(100));\""
          ]
        },
        {
          "name": "shortArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java short array with a given size, the array is filled with 0's",
            "by default and can be filled with only shorts"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java short array"
          },
          "examples": [
            "Java.shortArray(10);"
          ]
        },
        {
          "name": "shortOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value short, to be used in Java"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java short"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the short in Java wrapper"
          },
          "examples": [
            "Java.shortOf(1);"
          ]
        },
        {
          "name": "supplierOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Supplier object from a given function"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed, this must have no parameters and must return (supply) a value"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Supplier object"
          },
          "examples": [
            "Java.supplierOf(fun() {\n    return 'supplier';\n});"
          ]
        },
        {
          "name": "valueOf",
          "is_arbitrary": false,
          "desc": [
            "Converts any Arucas value into a Java value then wraps it in the Java wrapper and returns it"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "any value to get the Java value of"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java wrapper value, null if argument was null"
          },
          "examples": [
            "Java.valueOf('Hello World!');"
          ]
        }
      ]
    },
    "JavaClass": {
      "name": "JavaClass",
      "desc": [
        "This class 'acts' as a Java class. You are able to call this class which",
        "will invoke the Java class' constructor, and access and assign the static",
        "fields of the class. This class cannot be instantiated or extended."
      ],
      "import_path": "util.Internal",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [],
      "static_methods": []
    },
    "Json": {
      "name": "Json",
      "desc": [
        "This class allows you to create and manipulate JSON objects.",
        "This class cannot be instantiated or extended"
      ],
      "import_path": "util.Json",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getValue",
          "is_arbitrary": false,
          "desc": [
            "This converts the Json back into an object"
          ],
          "returns": {
            "type": "Object",
            "desc": "the Value parsed from the Json"
          },
          "examples": [
            "json.getValue();"
          ]
        },
        {
          "name": "writeToFile",
          "is_arbitrary": false,
          "desc": [
            "This writes the Json to a file",
            "if the file given is a directory or cannot be",
            "written to, an error will be thrown"
          ],
          "params": [
            {
              "name": "file",
              "type": "File",
              "desc": "the file that you want to write to"
            }
          ],
          "examples": [
            "json.writeToFile(new File('D:/cool/realDirectory'));"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "fromFile",
          "is_arbitrary": false,
          "desc": [
            "This will read a file and parse it into a Json, this will throw an error if the file cannot be read"
          ],
          "params": [
            {
              "name": "file",
              "type": "File",
              "desc": "the file that you want to parse into a Json"
            }
          ],
          "returns": {
            "type": "Json",
            "desc": "the Json parsed from the file"
          },
          "examples": [
            "Json.fromFile(new File('this/path/is/an/example.json'));"
          ]
        },
        {
          "name": "fromList",
          "is_arbitrary": false,
          "desc": [
            "This converts a list into a Json, an important thing to note is that",
            "any values that are not Numbers, Booleans, Lists, Maps, or Null will use their",
            "toString() member to convert them to a string"
          ],
          "params": [
            {
              "name": "list",
              "type": "List",
              "desc": "the list that you want to parse into a Json"
            }
          ],
          "returns": {
            "type": "Json",
            "desc": "the Json parsed from the list"
          },
          "examples": [
            "Json.fromList(['value', 1, true]);"
          ]
        },
        {
          "name": "fromMap",
          "is_arbitrary": false,
          "desc": [
            "This converts a map into a Json, an important thing to note is that",
            "any values that are not Numbers, Booleans, Lists, Maps, or Null will use their",
            "toString() member to convert them to a string"
          ],
          "params": [
            {
              "name": "map",
              "type": "Map",
              "desc": "the map that you want to parse into a Json"
            }
          ],
          "returns": {
            "type": "Json",
            "desc": "the Json parsed from the map"
          },
          "examples": [
            "Json.fromMap({'key': ['value1', 'value2']});"
          ]
        },
        {
          "name": "fromString",
          "is_arbitrary": false,
          "desc": [
            "This converts a string into a Json provided it is formatted correctly,",
            "otherwise throwing an error"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string that you want to parse into a Json"
            }
          ],
          "returns": {
            "type": "Json",
            "desc": "the Json parsed from the string"
          },
          "examples": [
            "Json.fromString('{\"key\":\"value\"}');"
          ]
        }
      ]
    },
    "KeyBind": {
      "name": "KeyBind",
      "desc": [
        "This class allows you to create key binds that can be used, everything is",
        "handled for you internally so you just need to regers the key bind and",
        "the function you want to run when it is pressed."
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "Creates a new key bind"
          ],
          "params": [
            {
              "name": "keyName",
              "type": "String",
              "desc": "the name of the key"
            }
          ],
          "examples": [
            "new KeyBind('MyKey');"
          ]
        }
      ],
      "methods": [
        {
          "name": "getKey",
          "is_arbitrary": false,
          "desc": [
            "Gets the key bind's first key"
          ],
          "returns": {
            "type": "String",
            "desc": "the key bind's key"
          },
          "examples": [
            "keyBind.getKey();"
          ]
        },
        {
          "name": "getKeys",
          "is_arbitrary": false,
          "desc": [
            "Gets the all of the keys in the key bind"
          ],
          "returns": {
            "type": "List",
            "desc": "list of strings of all the keys"
          },
          "examples": [
            "keybind.getKeys();"
          ]
        },
        {
          "name": "setCallback",
          "is_arbitrary": false,
          "desc": [
            "Sets the callback function for the key bind"
          ],
          "params": [
            {
              "name": "callback",
              "type": "Function",
              "desc": "the callback function"
            }
          ],
          "examples": [
            "keyBind.setCallback(fun() { print('My key was pressed'); });"
          ]
        },
        {
          "name": "setKey",
          "is_arbitrary": false,
          "desc": [
            "Sets the key bind to a new key"
          ],
          "params": [
            {
              "name": "keyName",
              "type": "String",
              "desc": "the name of the key"
            }
          ],
          "examples": [
            "keyBind.setKey('f');"
          ]
        },
        {
          "name": "setKeys",
          "is_arbitrary": true,
          "desc": [
            "Sets the key bind to new keys, you may also pass",
            "in a list as the parameter, this is to keep compatability"
          ],
          "params": [
            {
              "name": "keyNames...",
              "type": "String",
              "desc": "the names of keys"
            }
          ],
          "examples": [
            "keyBind.setKeys('control', 'f');"
          ]
        }
      ],
      "static_methods": []
    },
    "LineShape": {
      "name": "LineShape",
      "desc": [
        "This class allows you to create a line shape which can be used to draw lines in the world."
      ],
      "import_path": "Minecraft",
      "superclass": "CorneredShape",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "Creates a new line shape"
          ],
          "params": [
            {
              "name": "pos1",
              "type": "Pos",
              "desc": "The starting position of the line"
            },
            {
              "name": "pos2",
              "type": "Pos",
              "desc": "The ending position of the line"
            }
          ],
          "examples": [
            "new LineShape(new Pos(0, 0, 0), new Pos(1, 1, 1));"
          ]
        },
        {
          "desc": [
            "Creates a new line shape"
          ],
          "params": [
            {
              "name": "x1",
              "type": "Number",
              "desc": "The x position of the starting position of the line"
            },
            {
              "name": "y1",
              "type": "Number",
              "desc": "The y position of the starting position of the line"
            },
            {
              "name": "z1",
              "type": "Number",
              "desc": "The z position of the starting position of the line"
            },
            {
              "name": "x2",
              "type": "Number",
              "desc": "The x position of the ending position of the line"
            },
            {
              "name": "y2",
              "type": "Number",
              "desc": "The y position of the ending position of the line"
            },
            {
              "name": "z2",
              "type": "Number",
              "desc": "The z position of the ending position of the line"
            }
          ],
          "examples": [
            "new LineShape(0, 0, 0, 1, 1, 1);"
          ]
        }
      ],
      "methods": [],
      "static_methods": []
    },
    "List": {
      "name": "List",
      "desc": [
        "This class is used for collections of ordered elements"
      ],
      "import_path": null,
      "superclass": "Collection",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a list, this cannot be called directly, only from child classes"
          ],
          "examples": [
            "class ChildList: List {\n    ChildList(): super();\n}"
          ]
        }
      ],
      "methods": [
        {
          "name": "addAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add all the values in another collection to the list"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection you want to add to the list"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].addAll(['foo', 'object']); // ['object', 81, 96, 'case', 'foo', 'object']"
          ]
        },
        {
          "name": "append",
          "is_arbitrary": false,
          "desc": [
            "This allows you to append a value to the end of the list"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to append"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].append('foo'); // ['object', 81, 96, 'case', 'foo']"
          ]
        },
        {
          "name": "clear",
          "is_arbitrary": false,
          "desc": [
            "This allows you to clear the list"
          ],
          "examples": [
            "['object', 81, 96, 'case'].clear(); // []"
          ]
        },
        {
          "name": "contains",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the list contains a specific value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the list contains the value"
          },
          "examples": [
            "['object', 81, 96, 'case'].contains('case'); // true"
          ]
        },
        {
          "name": "containsAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the list contains all the values in another collection"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection you want to check agains"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the list contains all the values in the collection"
          },
          "examples": [
            "['object', 81, 96, 'case'].containsAll(['foo', 'object']); // false"
          ]
        },
        {
          "name": "filter",
          "is_arbitrary": false,
          "desc": [
            "This filters the list using the predicate, a function that either returns",
            "true or false, based on the element on whether it should be kept or not,",
            "and returns a new list with the filtered elements"
          ],
          "params": [
            {
              "name": "predicate",
              "type": "Function",
              "desc": "a function that takes a value and returns Boolean"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the filtered collection"
          },
          "examples": [
            "(list = [1, 2, 3]).filter(fun(v) {\n    return v > 1;\n});\n// list = [2, 3]"
          ]
        },
        {
          "name": "flatten",
          "is_arbitrary": false,
          "desc": [
            "If there are any objects in the list that are collections they will",
            "be expanded and added to the list. However collections inside those",
            "collections will not be flattened, this is returned as a new list"
          ],
          "returns": {
            "type": "List",
            "desc": "the flattened list"
          },
          "examples": [
            "(list = [1, 2, 3, [4, 5], [6, [7]]]).flatten();\n// list = [1, 2, 3, 4, 5, 6, [7]]"
          ]
        },
        {
          "name": "get",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the value at a specific index, alternative to bracket accessor,",
            "this will throw an error if the index given is out of bounds"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the value you want to get"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the value at the index"
          },
          "examples": [
            "['object', 81, 96, 'case'].get(1); // 81"
          ]
        },
        {
          "name": "indexOf",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the index of a specific value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to get the index of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the index of the value"
          },
          "examples": [
            "['object', 81, 96, 'case', 81].indexOf(81); // 1"
          ]
        },
        {
          "name": "insert",
          "is_arbitrary": false,
          "desc": [
            "This allows you to insert a value at a specific index, this will throw an error if the index is out of bounds"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to insert"
            },
            {
              "name": "index",
              "type": "Number",
              "desc": "the index you want to insert the value at"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].insert('foo', 1); // ['object', 'foo', 81, 96, 'case']"
          ]
        },
        {
          "name": "lastIndexOf",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the last index of a specific value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to get the last index of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the last index of the value"
          },
          "examples": [
            "['object', 81, 96, 'case', 96].lastIndexOf(96); // 4"
          ]
        },
        {
          "name": "map",
          "is_arbitrary": false,
          "desc": [
            "This maps the list using the mapper, a function that takes a value and",
            "returns a new value, and returns a new list with the mapped elements"
          ],
          "params": [
            {
              "name": "mapper",
              "type": "Function",
              "desc": "a function that takes a value and returns a new value"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the mapped collection"
          },
          "examples": [
            "(list = [1, 2, 3]).map(fun(v) {\n    return v * 2;\n});\n// list = [2, 4, 6]"
          ]
        },
        {
          "name": "prepend",
          "is_arbitrary": false,
          "desc": [
            "This allows you to prepend a value to the beginning of the list"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to prepend"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96].prepend('foo'); // ['foo', 'object', 81, 96]"
          ]
        },
        {
          "name": "reduce",
          "is_arbitrary": false,
          "desc": [
            "This reduces the list using the reducer, a function that takes an",
            "accumulated value and a new value and returns the next accumulated value"
          ],
          "params": [
            {
              "name": "reducer",
              "type": "Function",
              "desc": "a function that takes a value and returns a new value"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the reduced value"
          },
          "examples": [
            "// a will start at 1 and b at 2\n// next accumulator will be 3\n// a will be 3 and b will be 3 = 6\n(list = [1, 2, 3]).reduce(fun(a, b) {\n    return a + b;\n});\n// 6"
          ]
        },
        {
          "name": "remove",
          "is_arbitrary": false,
          "desc": [
            "This allows you to remove the value at a specific index, alternative to bracket assignment.",
            "This will throw an error if the index is out of bounds"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the value you want to remove"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the value that was removed"
          },
          "examples": [
            "['object', 81, 96, 'case'].remove(1); // 81"
          ]
        },
        {
          "name": "removeAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to remove all the values in another collection from the list"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection you want to remove from the list"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].removeAll(['foo', 'object']); // [81, 96, 'case']"
          ]
        },
        {
          "name": "retainAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to retain only the values that are in both lists"
          ],
          "params": [
            {
              "name": "list",
              "type": "List",
              "desc": "the list you want to retain values from"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].retainAll(['case', 'object', 54]); // ['object', 'case']"
          ]
        },
        {
          "name": "reverse",
          "is_arbitrary": false,
          "desc": [
            "This allows you to reverse the list"
          ],
          "returns": {
            "type": "List",
            "desc": "the reversed list"
          },
          "examples": [
            "['a', 'b', 'c', 'd'].reverse(); // ['d', 'c', 'b', 'a']"
          ]
        },
        {
          "name": "set",
          "is_arbitrary": false,
          "desc": [
            "This allows you to set the value at a specific index, alternative to bracket assignment,",
            "this will throw an erroor if the index given is out of bounds"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to set"
            },
            {
              "name": "index",
              "type": "Number",
              "desc": "the index you want to set the value at"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].set('foo', 1); // ['object', 'foo', 96, 'case']"
          ]
        },
        {
          "name": "shuffle",
          "is_arbitrary": false,
          "desc": [
            "This allows you to shuffle the list"
          ],
          "returns": {
            "type": "List",
            "desc": "the shuffled list"
          },
          "examples": [
            "['a', 'b', 'c', 'd'].shuffle(); // some random order ¯\\_(ツ)_/¯"
          ]
        },
        {
          "name": "sort",
          "is_arbitrary": false,
          "desc": [
            "This allows you to sort the list using the elements compare method"
          ],
          "returns": {
            "type": "List",
            "desc": "the sorted list"
          },
          "examples": [
            "['d', 'a', 'c', 'b'].sort(); // ['a', 'b', 'c', 'd']"
          ]
        },
        {
          "name": "sort",
          "is_arbitrary": false,
          "desc": [
            "This allows you to sort the list using a comparator function"
          ],
          "params": [
            {
              "name": "comparator",
              "type": "Function",
              "desc": "the comparator function"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the sorted list"
          },
          "examples": [
            "[6, 5, 9, -10].sort(fun(a, b) { return a - b; }); // [-10, 5, 6, 9]"
          ]
        }
      ],
      "static_methods": []
    },
    "LivingEntity": {
      "name": "LivingEntity",
      "desc": [
        "This class extends Entity and so inherits all of their methods too,",
        "LivingEntities are any entities that are alive, so all mobs"
      ],
      "import_path": "Minecraft",
      "superclass": "Entity",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getHealth",
          "is_arbitrary": false,
          "desc": [
            "This gets the LivingEntity's current health"
          ],
          "returns": {
            "type": "Number",
            "desc": "the LivingEntity's health"
          },
          "examples": [
            "livingEntity.getHealth();"
          ]
        },
        {
          "name": "getStatusEffects",
          "is_arbitrary": false,
          "desc": [
            "This gets the LivingEntity's status effects, you can find",
            "a list of all the ids of the status effects",
            "[here](https://minecraft.fandom.com/wiki/Java_Edition_data_values#Effects)"
          ],
          "returns": {
            "type": "List",
            "desc": "a list of status effects, may be empty"
          },
          "examples": [
            "livingEntity.getStatusEffects();"
          ]
        },
        {
          "name": "isFlyFalling",
          "is_arbitrary": false,
          "desc": [
            "This checks if the LivingEntity is fly falling (gliding with elytra)"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the LivingEntity is fly falling"
          },
          "examples": [
            "livingEntity.isFlyFalling();"
          ]
        }
      ],
      "static_methods": []
    },
    "Map": {
      "name": "Map",
      "desc": [
        "This class is used to create a map of objects, using keys and values.",
        "This class cannot be directly instantiated, but can be extended to create a map of your own type."
      ],
      "import_path": null,
      "superclass": "Collection",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates an empty map, this cannot be called directly, only from child classes"
          ],
          "examples": [
            "class ChildMap: Map {\n    ChildMap(): super();\n}"
          ]
        }
      ],
      "methods": [
        {
          "name": "clear",
          "is_arbitrary": false,
          "desc": [
            "This allows you to clear the map of all the keys and values"
          ],
          "examples": [
            "(map = {'key': 'value'}).clear(); // map = {}"
          ]
        },
        {
          "name": "containsKey",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the map contains a specific key"
          ],
          "params": [
            {
              "name": "key",
              "type": "Object",
              "desc": "the key you want to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the map contains the key, false otherwise"
          },
          "examples": [
            "{'key': 'value'}.containsKey('key'); // true"
          ]
        },
        {
          "name": "containsValue",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the map contains a specific value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the map contains the value, false otherwise"
          },
          "examples": [
            "{'key': 'value'}.containsValue('foo'); // false"
          ]
        },
        {
          "name": "get",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the value of a key in the map"
          ],
          "params": [
            {
              "name": "key",
              "type": "Object",
              "desc": "the key you want to get the value of"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the value of the key, will return null if non-existent"
          },
          "examples": [
            "{'key': 'value'}.get('key'); // 'value'"
          ]
        },
        {
          "name": "getKeys",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the keys in the map"
          ],
          "returns": {
            "type": "List",
            "desc": "a complete list of all the keys"
          },
          "examples": [
            "{'key': 'value', 'key2': 'value2'}.getKeys(); // ['key', 'key2']"
          ]
        },
        {
          "name": "getValues",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the values in the map"
          ],
          "returns": {
            "type": "List",
            "desc": "a complete list of all the values"
          },
          "examples": [
            "{'key': 'value', 'key2': 'value2'}.getValues(); // ['value', 'value2']"
          ]
        },
        {
          "name": "map",
          "is_arbitrary": false,
          "desc": [
            "This allows you to map the values in the map and returns a new map"
          ],
          "params": [
            {
              "name": "remapper",
              "type": "Function",
              "desc": "the function you want to map the values with"
            }
          ],
          "returns": {
            "type": "Map",
            "desc": "a new map with the mapped values"
          },
          "examples": [
            "map = {'key': 'value', 'key2': 'value2'}\nmap.map(fun(k, v) {\n    return [v, k];\n});\n// map = {'value': 'key', 'value2': 'key2'}"
          ]
        },
        {
          "name": "put",
          "is_arbitrary": false,
          "desc": [
            "This allows you to put a key and value in the map"
          ],
          "params": [
            {
              "name": "key",
              "type": "Object",
              "desc": "the key you want to put"
            },
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to put"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the previous value associated with the key, null if none"
          },
          "examples": [
            "{'key': 'value'}.put('key2', 'value2'); // null"
          ]
        },
        {
          "name": "putAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to put all the keys and values of another map into this map"
          ],
          "params": [
            {
              "name": "another map",
              "type": "Map",
              "desc": "the map you want to merge into this map"
            }
          ],
          "examples": [
            "(map = {'key': 'value'}).putAll({'key2': 'value2'}); // map = {'key': 'value', 'key2': 'value2'}"
          ]
        },
        {
          "name": "putIfAbsent",
          "is_arbitrary": false,
          "desc": [
            "This allows you to put a key and value in the map if it doesn't exist"
          ],
          "params": [
            {
              "name": "key",
              "type": "Object",
              "desc": "the key you want to put"
            },
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to put"
            }
          ],
          "examples": [
            "(map = {'key': 'value'}).putIfAbsent('key2', 'value2'); // map = {'key': 'value', 'key2': 'value2'}"
          ]
        },
        {
          "name": "remove",
          "is_arbitrary": false,
          "desc": [
            "This allows you to remove a key and its value from the map"
          ],
          "params": [
            {
              "name": "key",
              "type": "Object",
              "desc": "the key you want to remove"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the value associated with the key, null if none"
          },
          "examples": [
            "{'key': 'value'}.remove('key'); // 'value'"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "unordered",
          "is_arbitrary": false,
          "desc": [
            "This function allows you to create an unordered map"
          ],
          "returns": {
            "type": "Map",
            "desc": "an unordered map"
          },
          "examples": [
            "Map.unordered();"
          ]
        }
      ]
    },
    "Material": {
      "name": "Material",
      "desc": [
        "This class represents all possible item and block types",
        "and allows you to convert them into instances of ItemStacks and Blocks"
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "asBlock",
          "is_arbitrary": false,
          "desc": [
            "This converts the material into a Block.",
            "If it cannot be converted an error will be thrown"
          ],
          "returns": {
            "type": "Block",
            "desc": "the Block representation of the material"
          },
          "examples": [
            "material.asBlock();"
          ]
        },
        {
          "name": "asItemStack",
          "is_arbitrary": false,
          "desc": [
            "This converts the material into an ItemStack.",
            "If it cannot be converted an error will be thrown"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack representation of the material"
          },
          "examples": [
            "material.asItemStack();"
          ]
        },
        {
          "name": "getFullId",
          "is_arbitrary": false,
          "desc": [
            "This returns the full id of the material, for example: 'minecraft:diamond'"
          ],
          "returns": {
            "type": "String",
            "desc": "the full id representation of the material"
          },
          "examples": [
            "material.getFullId();"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This returns the id of the material, for example: 'diamond'"
          ],
          "returns": {
            "type": "String",
            "desc": "the id representation of the material"
          },
          "examples": [
            "material.getId();"
          ]
        },
        {
          "name": "getTranslatedName",
          "is_arbitrary": false,
          "desc": [
            "This gets the translated name of the ItemStack, for example: ",
            "Material.DIAMOND_SWORD would return 'Diamond Sword' if your language is English"
          ],
          "returns": {
            "type": "String",
            "desc": "the translated name of the Material"
          },
          "examples": [
            "material.getTranslatedName();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This converts a block or item id into a Material.",
            "This method will throw an error if the id is invalid"
          ],
          "params": [
            {
              "name": "id",
              "type": "String",
              "desc": "the id of the block or item"
            }
          ],
          "returns": {
            "type": "Material",
            "desc": "the material instance from the id"
          },
          "examples": [
            "Material.of('diamond');"
          ]
        }
      ]
    },
    "Math": {
      "name": "Math",
      "desc": [
        "Provides many basic math functions. This is a utility class, and cannot be constructed"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [
        {
          "name": "e",
          "assignable": false,
          "desc": [
            "The value of e"
          ],
          "type": "Number",
          "examples": [
            "Math.e;"
          ]
        },
        {
          "name": "pi",
          "assignable": false,
          "desc": [
            "The value of pi"
          ],
          "type": "Number",
          "examples": [
            "Math.pi;"
          ]
        },
        {
          "name": "root2",
          "assignable": false,
          "desc": [
            "The value of root 2"
          ],
          "type": "Number",
          "examples": [
            "Math.root2;"
          ]
        }
      ],
      "constructors": [],
      "methods": [],
      "static_methods": [
        {
          "name": "abs",
          "is_arbitrary": false,
          "desc": [
            "Returns the absolute value of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the absolute value of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the absolute value of the number"
          },
          "examples": [
            "Math.abs(-3);"
          ]
        },
        {
          "name": "arccos",
          "is_arbitrary": false,
          "desc": [
            "Returns the arc cosine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the arc cosine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the arc cosine of the number"
          },
          "examples": [
            "Math.arccos(Math.cos(Math.pi));"
          ]
        },
        {
          "name": "arcsin",
          "is_arbitrary": false,
          "desc": [
            "Returns the arc sine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the arc sine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the arc sine of the number"
          },
          "examples": [
            "Math.arcsin(Math.sin(Math.pi));"
          ]
        },
        {
          "name": "arctan",
          "is_arbitrary": false,
          "desc": [
            "Returns the arc tangent of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the arc tangent of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the arc tangent of the number"
          },
          "examples": [
            "Math.arctan(Math.tan(Math.pi));"
          ]
        },
        {
          "name": "arctan2",
          "is_arbitrary": false,
          "desc": [
            "Returns the angle theta of the polar coordinates (r, theta) that correspond to the rectangular",
            "coordinates (x, y) by computing the arc tangent of the value y / x"
          ],
          "params": [
            {
              "name": "y",
              "type": "Number",
              "desc": "the ordinate coordinate"
            },
            {
              "name": "x",
              "type": "Number",
              "desc": "the abscissa coordinate"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the theta component of the point (r, theta)"
          },
          "examples": [
            "Math.arctan2(Math.tan(Math.pi), Math.cos(Math.pi)); // -3.141592"
          ]
        },
        {
          "name": "ceil",
          "is_arbitrary": false,
          "desc": [
            "Rounds a number up to the nearest integer"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to round"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "Math.ceil(3.5);"
          ]
        },
        {
          "name": "clamp",
          "is_arbitrary": false,
          "desc": [
            "Clamps a value between a minimum and maximum"
          ],
          "params": [
            {
              "name": "value",
              "type": "Number",
              "desc": "the value to clamp"
            },
            {
              "name": "min",
              "type": "Number",
              "desc": "the minimum"
            },
            {
              "name": "max",
              "type": "Number",
              "desc": "the maximum"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the clamped value"
          },
          "examples": [
            "Math.clamp(10, 2, 8);"
          ]
        },
        {
          "name": "cos",
          "is_arbitrary": false,
          "desc": [
            "Returns the cosine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the cosine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the cosine of the number"
          },
          "examples": [
            "Math.cos(Math.pi);"
          ]
        },
        {
          "name": "cosec",
          "is_arbitrary": false,
          "desc": [
            "Returns the cosecant of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the cosecant of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the cosecant of the number"
          },
          "examples": [
            "Math.cosec(Math.pi);"
          ]
        },
        {
          "name": "cosh",
          "is_arbitrary": false,
          "desc": [
            "Returns the hyperbolic cosine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the hyperbolic cosine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the hyperbolic cosine of the number"
          },
          "examples": [
            "Math.cosh(1);"
          ]
        },
        {
          "name": "cot",
          "is_arbitrary": false,
          "desc": [
            "Returns the cotangent of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the cotangent of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the cotangent of the number"
          },
          "examples": [
            "Math.cot(Math.pi);"
          ]
        },
        {
          "name": "floor",
          "is_arbitrary": false,
          "desc": [
            "Rounds a number down to the nearest integer"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to round"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "Math.floor(3.5);"
          ]
        },
        {
          "name": "lerp",
          "is_arbitrary": false,
          "desc": [
            "Linear interpolation between two numbers"
          ],
          "params": [
            {
              "name": "start",
              "type": "Number",
              "desc": "the first number"
            },
            {
              "name": "end",
              "type": "Number",
              "desc": "the second number"
            },
            {
              "name": "delta",
              "type": "Number",
              "desc": "the interpolation factor"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the interpolated number"
          },
          "examples": [
            "Math.lerp(0, 10, 0.5);"
          ]
        },
        {
          "name": "ln",
          "is_arbitrary": false,
          "desc": [
            "Returns the natural logarithm of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the logarithm of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the natural logarithm of the number"
          },
          "examples": [
            "Math.ln(Math.e);"
          ]
        },
        {
          "name": "log",
          "is_arbitrary": false,
          "desc": [
            "Returns the logarithm of a number with a specified base"
          ],
          "params": [
            {
              "name": "base",
              "type": "Number",
              "desc": "the base"
            },
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the logarithm of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the logarithm of the number"
          },
          "examples": [
            "Math.log(2, 4);"
          ]
        },
        {
          "name": "log10",
          "is_arbitrary": false,
          "desc": [
            "Returns the base 10 logarithm of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the logarithm of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the base 10 logarithm of the number"
          },
          "examples": [
            "Math.log10(100);"
          ]
        },
        {
          "name": "max",
          "is_arbitrary": false,
          "desc": [
            "Returns the largest number"
          ],
          "params": [
            {
              "name": "num1",
              "type": "Number",
              "desc": "the first number to compare"
            },
            {
              "name": "num2",
              "type": "Number",
              "desc": "the second number to compare"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the largest number"
          },
          "examples": [
            "Math.max(5, 2);"
          ]
        },
        {
          "name": "min",
          "is_arbitrary": false,
          "desc": [
            "Returns the smallest number"
          ],
          "params": [
            {
              "name": "num1",
              "type": "Number",
              "desc": "the first number to compare"
            },
            {
              "name": "num2",
              "type": "Number",
              "desc": "the second number to compare"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the smallest number"
          },
          "examples": [
            "Math.min(5, 2);"
          ]
        },
        {
          "name": "mod",
          "is_arbitrary": false,
          "desc": [
            "Returns the modulus of a division"
          ],
          "params": [
            {
              "name": "num1",
              "type": "Number",
              "desc": "the number to divide"
            },
            {
              "name": "num2",
              "type": "Number",
              "desc": "the divisor"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the modulus of the division"
          },
          "examples": [
            "Math.mod(5, 2);"
          ]
        },
        {
          "name": "rem",
          "is_arbitrary": false,
          "desc": [
            "Returns the remainder of a division"
          ],
          "params": [
            {
              "name": "num1",
              "type": "Number",
              "desc": "the number to divide"
            },
            {
              "name": "num2",
              "type": "Number",
              "desc": "the divisor"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the remainder of the division"
          },
          "examples": [
            "Math.rem(5, 2);"
          ]
        },
        {
          "name": "round",
          "is_arbitrary": false,
          "desc": [
            "Rounds a number to the nearest integer"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to round"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "Math.round(3.5);"
          ]
        },
        {
          "name": "sec",
          "is_arbitrary": false,
          "desc": [
            "Returns the secant of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the secant of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the secant of the number"
          },
          "examples": [
            "Math.sec(Math.pi);"
          ]
        },
        {
          "name": "signum",
          "is_arbitrary": false,
          "desc": [
            "Returns the sign of a number, 1 if the number is positive,",
            "-1 if the number is negative, and 0 if the number is 0"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the sign of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the sign of the number"
          },
          "examples": [
            "Math.signum(3);"
          ]
        },
        {
          "name": "sin",
          "is_arbitrary": false,
          "desc": [
            "Returns the sine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the sine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the sine of the number"
          },
          "examples": [
            "Math.sin(Math.pi);"
          ]
        },
        {
          "name": "sinh",
          "is_arbitrary": false,
          "desc": [
            "Returns the hyperbolic sine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the hyperbolic sine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the hyperbolic sine of the number"
          },
          "examples": [
            "Math.sinh(1);"
          ]
        },
        {
          "name": "sqrt",
          "is_arbitrary": false,
          "desc": [
            "Returns the square root of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to square root"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the square root of the number"
          },
          "examples": [
            "Math.sqrt(9);"
          ]
        },
        {
          "name": "tan",
          "is_arbitrary": false,
          "desc": [
            "Returns the tangent of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the tangent of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the tangent of the number"
          },
          "examples": [
            "Math.tan(Math.pi);"
          ]
        },
        {
          "name": "tanh",
          "is_arbitrary": false,
          "desc": [
            "Returns the hyperbolic tangent of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the hyperbolic tangent of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the hyperbolic tangent of the number"
          },
          "examples": [
            "Math.tanh(1);"
          ]
        },
        {
          "name": "toDegrees",
          "is_arbitrary": false,
          "desc": [
            "Converts a number from radians to degrees"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the number in degrees"
          },
          "examples": [
            "Math.toDegrees(Math.pi);"
          ]
        },
        {
          "name": "toRadians",
          "is_arbitrary": false,
          "desc": [
            "Converts a number from degrees to radians"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the number in radians"
          },
          "examples": [
            "Math.toRadians(90);"
          ]
        }
      ]
    },
    "MerchantScreen": {
      "name": "MerchantScreen",
      "desc": [
        "This class extends Screen and so inherits all of their methods too,",
        "this class is used to add functionality to trading screens."
      ],
      "import_path": "Minecraft",
      "superclass": "Screen",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "clearTrade",
          "is_arbitrary": false,
          "desc": [
            "This clears the currently selected trade.",
            "You must be inside the merchant GUI or an error will be thrown"
          ],
          "examples": [
            "screen.clearTrade();"
          ]
        },
        {
          "name": "doesVillagerHaveTrade",
          "is_arbitrary": false,
          "desc": [
            "This checks if the villager has a trade for a certain item.",
            "You must be inside the merchant GUI or an error will be thrown"
          ],
          "params": [
            {
              "name": "materialLike",
              "type": "Material",
              "desc": "the item or material to check for"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the villager has a trade for the item, false otherwise"
          },
          "examples": [
            "screen.doesVillagerHaveTrade(Material.DIAMOND_PICKAXE);"
          ]
        },
        {
          "name": "getIndexOfTradeItem",
          "is_arbitrary": false,
          "desc": [
            "This gets the index of a trade for a certain item.",
            "You must be inside the merchant GUI or an error will be thrown"
          ],
          "params": [
            {
              "name": "material",
              "type": "Material",
              "desc": "the item to get the index of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the index of the trade"
          },
          "examples": [
            "screen.getIndexOfTradeItem(Material.DIAMOND_PICKAXE);"
          ]
        },
        {
          "name": "getPriceForIndex",
          "is_arbitrary": false,
          "desc": [
            "This gets the price of a trade at a certain index.",
            "You must be inside the merchant GUI or an error will be thrown"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the trade"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the price of the trade"
          },
          "examples": [
            "screen.getPriceForIndex(0);"
          ]
        },
        {
          "name": "getTradeItemForIndex",
          "is_arbitrary": false,
          "desc": [
            "This gets the item stack of a trade at a certain index.",
            "You must be inside the merchant GUI or an error will be thrown"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the trade"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the item stack of the trade"
          },
          "examples": [
            "screen.getTradeItemForIndex(0);"
          ]
        },
        {
          "name": "getTradeList",
          "is_arbitrary": false,
          "desc": [
            "This gets a list of all the merchant's trades"
          ],
          "returns": {
            "type": "List",
            "desc": "the list of all the Trades"
          },
          "examples": [
            "screen.getTradeList();"
          ]
        },
        {
          "name": "getTradeListSize",
          "is_arbitrary": false,
          "desc": [
            "This gets the size of all the trades available"
          ],
          "returns": {
            "type": "Number",
            "desc": "the size of the trade list"
          },
          "examples": [
            "screen.getTradeListSize();"
          ]
        },
        {
          "name": "getVillagerLevel",
          "is_arbitrary": false,
          "desc": [
            "This gets the level of the villager, this will",
            "throw an error if you are not trading with a villager.",
            "The level can be between 1 - 5 from Novice to Master"
          ],
          "returns": {
            "type": "Number",
            "desc": "the level of the villager"
          },
          "examples": [
            "screen.getVillagerLevel();"
          ]
        },
        {
          "name": "getVillagerXp",
          "is_arbitrary": false,
          "desc": [
            "This gets the amount of xp in the villagers xp bar,",
            "The total amount of xp is hardcoded for each level.",
            "Level 2 requires 10 xp, 3 requires 70 (60 xp from 2 -> 3),",
            "4 requires 150 (80 xp from 3 -> 4), 5 requires 250",
            "(100 xp from 4 -> 5). 250 is the max xp a villager can have"
          ],
          "returns": {
            "type": "Number",
            "desc": "the amount of xp"
          },
          "examples": [
            "screen.getVillagerXpBar"
          ]
        },
        {
          "name": "isTradeDisabled",
          "is_arbitrary": false,
          "desc": [
            "This returns true if a trade is disabled at an index"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the trade"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if a trade is disabled"
          },
          "examples": [
            "screen.isTradeDisabled(1);"
          ]
        },
        {
          "name": "isTradeSelected",
          "is_arbitrary": false,
          "desc": [
            "This returns true if a trade is selected"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if a trade is selected"
          },
          "examples": [
            "screen.isTradeSelected();"
          ]
        },
        {
          "name": "selectTrade",
          "is_arbitrary": false,
          "desc": [
            "This selects the currently selected trade, as if you were to click it.",
            "You must be inside the merchant GUI or an error will be thrown"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the trade"
            }
          ],
          "examples": [
            "screen.selectTrade(0);"
          ]
        },
        {
          "name": "tradeIndex",
          "is_arbitrary": false,
          "desc": [
            "This makes your player trade with the merchant at a certain index.",
            "You must be inside the merchant GUI or an error will be thrown"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the trade"
            }
          ],
          "examples": [
            "screen.tradeIndex(0);"
          ]
        },
        {
          "name": "tradeSelected",
          "is_arbitrary": false,
          "desc": [
            "This trades the currently selected trade.",
            "This function accepts optional boolean to simulate click action even if screen is not synced or filled.",
            "You must be inside the merchant GUI or an error will be thrown"
          ],
          "examples": [
            "screen.tradeSelected();"
          ]
        },
        {
          "name": "tradeSelectedAndThrow",
          "is_arbitrary": false,
          "desc": [
            "This trades the currently selected trade and throws the items that were traded.",
            "This function accepts optional boolean to simulate click action even if screen is not synced or filled.",
            "You must be inside the merchant GUI or an error will be thrown"
          ],
          "examples": [
            "screen.tradeSelectedAndThrow();"
          ]
        }
      ],
      "static_methods": []
    },
    "MinecraftClient": {
      "name": "MinecraftClient",
      "desc": [
        "This allows for many core interactions with the MinecraftClient"
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "addCommand",
          "is_arbitrary": false,
          "desc": [
            "This allows you to register your own client side command in game"
          ],
          "params": [
            {
              "name": "command",
              "type": "Map",
              "desc": "a command map or a command builder"
            }
          ],
          "examples": [
            "client.addCommand({\n    \"name\": \"example\",\n    \"subcommands\": { },\n    \"arguments\": { }\n});"
          ]
        },
        {
          "name": "canSendScriptPacket",
          "is_arbitrary": false,
          "desc": [
            "Returns whether the server supports client script packets"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "Whether the client can send packets to the server"
          },
          "examples": [
            "client.canSendScriptPacket()"
          ]
        },
        {
          "name": "clearChat",
          "is_arbitrary": false,
          "desc": [
            "This will clear the chat hud"
          ],
          "examples": [
            "client.clearChat();"
          ]
        },
        {
          "name": "editSign",
          "is_arbitrary": false,
          "desc": [
            "This allows you to edit sign at certain position with given string(lines), up to 4 lines.",
            "This function does not check if sign is editable / is in position."
          ],
          "params": [
            {
              "name": "position",
              "type": "Pos",
              "desc": "the position of sign"
            },
            {
              "name": "string...",
              "type": "String",
              "desc": "the lines for the sign, requires 1 string and up to 4 strings"
            }
          ],
          "examples": [
            "client.editSign(new Pos(0,0,0), '100', '101', 'this is third line', 'last line');"
          ]
        },
        {
          "name": "getClientRenderDistance",
          "is_arbitrary": false,
          "desc": [
            "This returns the current render distance set on the client"
          ],
          "returns": {
            "type": "Number",
            "desc": "the render distance"
          },
          "examples": [
            "client.getClientRenderDistance();"
          ]
        },
        {
          "name": "getCursorStack",
          "is_arbitrary": false,
          "desc": [
            "This returns the item stack that is currently being held by the cursor"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the item stack, will be Air if there is nothing"
          },
          "examples": [
            "client.getCursorStack();"
          ]
        },
        {
          "name": "getEssentialClientValue",
          "is_arbitrary": false,
          "desc": [
            "This gets the value of the given client rule.",
            "This will throw an error if the rule name is invalid"
          ],
          "params": [
            {
              "name": "ruleName",
              "type": "String",
              "desc": "the client rule"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the value of the client rule"
          },
          "examples": [
            "client.getEssentialClientValue('overrideCreativeWalkSpeed');"
          ]
        },
        {
          "name": "getFps",
          "is_arbitrary": false,
          "desc": [
            "This gets the current fps"
          ],
          "returns": {
            "type": "Number",
            "desc": "the fps"
          },
          "examples": [
            "client.getFps();"
          ]
        },
        {
          "name": "getLatestChatMessage",
          "is_arbitrary": false,
          "desc": [
            "This will return the latest chat message"
          ],
          "returns": {
            "type": "Text",
            "desc": "the latest chat message, null if there is none"
          },
          "examples": [
            "client.getLatestChatMessage();"
          ]
        },
        {
          "name": "getModList",
          "is_arbitrary": false,
          "desc": [
            "This gets a list of all the mod ids of the mods installed"
          ],
          "returns": {
            "type": "List",
            "desc": "the mod ids"
          },
          "examples": [
            "client.getModList();"
          ]
        },
        {
          "name": "getPing",
          "is_arbitrary": false,
          "desc": [
            "This gets the current connected server's ping.",
            "This will throw an error if the client is not connected to a server"
          ],
          "returns": {
            "type": "Number",
            "desc": "the server ping in milliseconds"
          },
          "examples": [
            "client.getPing();"
          ]
        },
        {
          "name": "getPlayer",
          "is_arbitrary": false,
          "desc": [
            "This returns the current player on the client"
          ],
          "returns": {
            "type": "Player",
            "desc": "the main player"
          },
          "examples": [
            "client.getPlayer();"
          ]
        },
        {
          "name": "getRunDirectory",
          "is_arbitrary": false,
          "desc": [
            "Returns the directory where the client is running"
          ],
          "returns": {
            "type": "File",
            "desc": "the Minecraft run directory"
          },
          "examples": [
            "client.getRunDirectory();"
          ]
        },
        {
          "name": "getScriptsPath",
          "is_arbitrary": false,
          "desc": [
            "This gets the script directory path, this is where all scripts are stored"
          ],
          "returns": {
            "type": "String",
            "desc": "the script directory path"
          },
          "examples": [
            "client.getScriptPath();"
          ]
        },
        {
          "name": "getServerIp",
          "is_arbitrary": false,
          "desc": [
            "This will return the server ip"
          ],
          "returns": {
            "type": "String",
            "desc": "The server ip, null if in single player"
          },
          "examples": [
            "client.getServerIp();"
          ]
        },
        {
          "name": "getServerName",
          "is_arbitrary": false,
          "desc": [
            "This gets the current connected server's name that you have set it to in the multiplayer screen"
          ],
          "returns": {
            "type": "String",
            "desc": "the server name"
          },
          "examples": [
            "client.getServerName();"
          ]
        },
        {
          "name": "getVersion",
          "is_arbitrary": false,
          "desc": [
            "This returns the current version of Minecraft you are playing"
          ],
          "returns": {
            "type": "String",
            "desc": "the version for example: '1.17.1'"
          },
          "examples": [
            "client.getVersion();"
          ]
        },
        {
          "name": "getWorld",
          "is_arbitrary": false,
          "desc": [
            "This returns the world that is currently being played on"
          ],
          "returns": {
            "type": "World",
            "desc": "the world"
          },
          "examples": [
            "client.getWorld();"
          ]
        },
        {
          "name": "holdKey",
          "is_arbitrary": false,
          "desc": [
            "This allows you to simulate a key being held inside of Minecraft, this will press, hold, and release.",
            "This will throw an error if the given key is unknown"
          ],
          "params": [
            {
              "name": "key",
              "type": "String",
              "desc": "the key to hold"
            },
            {
              "name": "milliseconds",
              "type": "Number",
              "desc": "the number of milliseconds you want it held for"
            }
          ],
          "examples": [
            "client.holdKey('f', 100);"
          ]
        },
        {
          "name": "isInSinglePlayer",
          "is_arbitrary": false,
          "desc": [
            "This will return true if the client is in single player mode"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the client is in single player mode"
          },
          "examples": [
            "client.isInSinglePlayer();"
          ]
        },
        {
          "name": "parseStringToNbt",
          "is_arbitrary": false,
          "desc": [
            "This parses a string and turns it into a Nbt compound"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to parse"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the nbt compound as a value"
          },
          "examples": [
            "client.parseStringToNbt('{\"test\":\"test\"}');"
          ]
        },
        {
          "name": "playSound",
          "is_arbitrary": false,
          "desc": [
            "This plays the given sound with the given volume and pitch around the player",
            "sound id's can be found [here](https://minecraft.fandom.com/wiki/Sounds.json#Sound_events)"
          ],
          "params": [
            {
              "name": "soundId",
              "type": "String",
              "desc": "the sound id you want to play"
            },
            {
              "name": "volume",
              "type": "Number",
              "desc": "the volume of the sound"
            },
            {
              "name": "pitch",
              "type": "Number",
              "desc": "the pitch of the sound"
            }
          ],
          "examples": [
            "client.playSound('entity.lightning_bolt.thunder', 1, 1);"
          ]
        },
        {
          "name": "playerNameFromUuid",
          "is_arbitrary": false,
          "desc": [
            "This will return the player name from the given uuid"
          ],
          "params": [
            {
              "name": "uuid",
              "type": "String",
              "desc": "the uuid as a string"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the player name, null if the uuid is not found"
          },
          "examples": [
            "client.playerNameFromUuid('d4fca8c4-e083-4300-9a73-bf438847861c');"
          ]
        },
        {
          "name": "pressKey",
          "is_arbitrary": false,
          "desc": [
            "This allows you to simulate a key press inside of Minecraft, this will only press the key down.",
            "This will throw an error if the key is unknown"
          ],
          "params": [
            {
              "name": "key",
              "type": "String",
              "desc": "the key to press"
            }
          ],
          "examples": [
            "client.pressKey('f');"
          ]
        },
        {
          "name": "releaseKey",
          "is_arbitrary": false,
          "desc": [
            "This allows you to simulate a key release inside of Minecraft, this",
            "is useful for keys that only work on release, for example `F3`, this",
            "will throw an error if the key is unknown"
          ],
          "params": [
            {
              "name": "key",
              "type": "String",
              "desc": "the key to release"
            }
          ],
          "examples": [
            "client.releaseKey('f');"
          ]
        },
        {
          "name": "renderFloatingItem",
          "is_arbitrary": false,
          "desc": [
            "This renders an item in front of the player using the totem of undying animation"
          ],
          "params": [
            {
              "name": "material",
              "type": "Material",
              "desc": "the material to render"
            }
          ],
          "examples": [
            "client.renderFloatingItem(Material.DIAMOND);"
          ]
        },
        {
          "name": "resetEssentialClientRule",
          "is_arbitrary": false,
          "desc": [
            "This resets the given client rule to its default value.",
            "This will throw an error if the rule name is invalid"
          ],
          "params": [
            {
              "name": "ruleName",
              "type": "String",
              "desc": "the client rule"
            }
          ],
          "examples": [
            "client.resetEssentialClientRule('highlightLavaSources');"
          ]
        },
        {
          "name": "run",
          "is_arbitrary": false,
          "desc": [
            "This runs the given function on the main thread"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to run"
            }
          ],
          "examples": [
            "client.run(fun() { print('Do something'); });"
          ]
        },
        {
          "name": "runOnMainThread",
          "is_arbitrary": false,
          "deprecated": [
            "Use 'client.run(task)' instead"
          ],
          "desc": [
            "This runs the given function on the main thread"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to run"
            }
          ],
          "examples": [
            "client.runOnMainThread(fun() { print('Do something'); });"
          ]
        },
        {
          "name": "screenshot",
          "is_arbitrary": false,
          "desc": [
            "This makes the client take a screenshot"
          ],
          "examples": [
            "client.screenshot();"
          ]
        },
        {
          "name": "screenshot",
          "is_arbitrary": false,
          "desc": [
            "This makes the client take a screenshot and saves it with a given name"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "the name of the file"
            }
          ],
          "examples": [
            "client.screenshot('screenshot.png');"
          ]
        },
        {
          "name": "sendScriptPacket",
          "is_arbitrary": true,
          "desc": [
            "This sends a script packet to the server",
            "You can send the follow types of values:",
            "Boolean, Number, String, List (of numbers), Text, ItemStack, Pos, and NbtMaps",
            "You can send byte, int, and long arrays by using the strings 'b', 'i', and 'l' at the start of the list"
          ],
          "params": [
            {
              "name": "values...",
              "type": "Object",
              "desc": "the data you want to send to the server"
            }
          ],
          "examples": [
            "client.sendScriptPacket('test', false, ['l', 9999, 0, 45]);"
          ]
        },
        {
          "name": "setClientRenderDistance",
          "is_arbitrary": false,
          "desc": [
            "This sets the render distance on the client"
          ],
          "params": [
            {
              "name": "number",
              "type": "Number",
              "desc": "the render distance"
            }
          ],
          "examples": [
            "client.setClientRenderDistance(10);"
          ]
        },
        {
          "name": "setCursorStack",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'fakeInventoryScreen.setCursorStack(item)' instead"
          ],
          "desc": [
            "This sets the item stack that is currently being held by the cursor, this does not work",
            "in normal screens only in FakeScreens, this does not actually pick up an item just display like you have"
          ],
          "params": [
            {
              "name": "itemStack",
              "type": "ItemStack",
              "desc": "the item stack to set"
            }
          ],
          "examples": [
            "client.setCursorStack(Material.DIAMOND.asItemStack());"
          ]
        },
        {
          "name": "setEssentialClientRule",
          "is_arbitrary": false,
          "desc": [
            "This sets the given client rule to the given value.",
            "This may throw an error if the name is invalid or the rule cannot be set"
          ],
          "params": [
            {
              "name": "ruleName",
              "type": "String",
              "desc": "the client rule"
            },
            {
              "name": "value",
              "type": "Object",
              "desc": "the new value for the rule"
            }
          ],
          "examples": [
            "client.setEssentialClientRule('highlightLavaSources', false);"
          ]
        },
        {
          "name": "stripFormatting",
          "is_arbitrary": false,
          "desc": [
            "This strips the formatting from the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to strip"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the stripped string"
          },
          "examples": [
            "client.stripFormatting('§cHello§r');"
          ]
        },
        {
          "name": "syncToTick",
          "is_arbitrary": false,
          "desc": [
            "Synchronizes the current thread in Arucas to the next game tick"
          ],
          "examples": [
            "client.syncToTick();"
          ]
        },
        {
          "name": "tick",
          "is_arbitrary": false,
          "desc": [
            "This ticks the client"
          ],
          "examples": [
            "client.tick();"
          ]
        },
        {
          "name": "uuidFromPlayerName",
          "is_arbitrary": false,
          "desc": [
            "This will return the uuid from the given player name"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "the player name"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the uuid, null if the player name is not found"
          },
          "examples": [
            "client.uuidFromPlayerName('senseiwells');"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "get",
          "is_arbitrary": false,
          "desc": [
            "Returns the MinecraftClient instance"
          ],
          "returns": {
            "type": "MinecraftClient",
            "desc": "the MinecraftClient instance"
          },
          "examples": [
            "MinecraftClient.get();"
          ]
        },
        {
          "name": "getClient",
          "is_arbitrary": false,
          "desc": [
            "Returns the MinecraftClient instance"
          ],
          "returns": {
            "type": "MinecraftClient",
            "desc": "the MinecraftClient instance"
          },
          "examples": [
            "MinecraftClient.getClient();"
          ]
        }
      ]
    },
    "MinecraftTask": {
      "name": "MinecraftTask",
      "desc": [
        "This class is used to create tasks that can be chained and",
        "run on the main Minecraft thread. This ensures that all",
        "behaviors work as intended."
      ],
      "import_path": null,
      "superclass": "Task",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new empty Minecraft task"
          ],
          "examples": [
            "task = new MinecraftTask();"
          ]
        }
      ],
      "methods": [
        {
          "name": "run",
          "is_arbitrary": false,
          "desc": [
            "This runs the task on the main Minecraft thread. It returns a future",
            "which can be awaited, the last function in the chain will be used as",
            "the return value for the future"
          ],
          "returns": {
            "type": "Future",
            "desc": "the future value that can be awaited"
          },
          "examples": [
            "task = new MinecraftTask()\n    .then(fun() print(\"hello\"))\n    .then(fun() print(\" \"))\n    .then(fun() print(\"world\"))\n    .then(fun() 10);\nf = task.run(); // prints 'hello world'\nprint(f.await()); // prints 10"
          ]
        },
        {
          "name": "waitThen",
          "is_arbitrary": false,
          "desc": [
            "This adds a delay (in ticks) then runs the given task.",
            "This delay is will also affect all following chained function",
            "delays. If this is the last function in the chain, then the",
            "return value will be determined by this function"
          ],
          "params": [
            {
              "name": "ticks",
              "type": "Number",
              "desc": "the amount of ticks delay before the function runs"
            },
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to run after the delay"
            }
          ],
          "returns": {
            "type": "MinecraftTask",
            "desc": "the task, this allows for chaining"
          },
          "examples": [
            "task = new MinecraftTask()\n    .then(fun() print(\"hello\"))\n    .waitThen(5, fun() print(\"world\"));\ntask.run(); // prints 'hello', waits 5 ticks, prints 'world'"
          ]
        }
      ],
      "static_methods": []
    },
    "Network": {
      "name": "Network",
      "desc": [
        "Allows you to do http requests. This is a utility class and cannot be constructed."
      ],
      "import_path": "util.Network",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [],
      "static_methods": [
        {
          "name": "downloadFile",
          "is_arbitrary": false,
          "desc": [
            "Downloads a file from an url to a file"
          ],
          "params": [
            {
              "name": "url",
              "type": "String",
              "desc": "the url to download from"
            },
            {
              "name": "file",
              "type": "File",
              "desc": "the file to download to"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the download was successful"
          },
          "examples": [
            "Network.downloadFile('https://arucas.com', new File('dir/downloads'));"
          ]
        },
        {
          "name": "openUrl",
          "is_arbitrary": false,
          "desc": [
            "Opens an url in the default browser"
          ],
          "params": [
            {
              "name": "url",
              "type": "String",
              "desc": "the url to open"
            }
          ],
          "examples": [
            "Network.openUrl('https://google.com');"
          ]
        },
        {
          "name": "requestUrl",
          "is_arbitrary": false,
          "desc": [
            "Requests an url and returns the response"
          ],
          "params": [
            {
              "name": "url",
              "type": "String",
              "desc": "the url to request"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the response from the url"
          },
          "examples": [
            "Network.requestUrl('https://google.com');"
          ]
        }
      ]
    },
    "Null": {
      "name": "Null",
      "desc": [
        "This class is used for the null object,",
        "this cannot be instantiated or extended"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [],
      "static_methods": []
    },
    "Number": {
      "name": "Number",
      "desc": [
        "This class cannot be constructed as it has a literal representation.",
        "For math related functions see the Math class."
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "ceil",
          "is_arbitrary": false,
          "desc": [
            "This allows you to round a number up to the nearest integer"
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "3.5.ceil();"
          ]
        },
        {
          "name": "floor",
          "is_arbitrary": false,
          "desc": [
            "This allows you to round a number down to the nearest integer"
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "3.5.floor();"
          ]
        },
        {
          "name": "isInfinite",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if a number is infinite"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the number is infinite"
          },
          "examples": [
            "(1/0).isInfinite();"
          ]
        },
        {
          "name": "isNaN",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if a number is not a number"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the number is not a number"
          },
          "examples": [
            "(0/0).isNaN();"
          ]
        },
        {
          "name": "round",
          "is_arbitrary": false,
          "desc": [
            "This allows you to round a number to the nearest integer"
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "3.5.round();"
          ]
        }
      ],
      "static_methods": []
    },
    "Object": {
      "name": "Object",
      "desc": [
        "This is the base class for every other class in Arucas.",
        "This class cannot be instantiated from, you can extend it",
        "however every class already extends this class by default"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "copy",
          "is_arbitrary": false,
          "desc": [
            "This returns a copy of the value if implemented.",
            "Some objects that are immutable, such as Strings and Numbers",
            "will not be copied, and will return the same instance.",
            "Any object that has not implemented the copy method will also",
            "return the same instance"
          ],
          "returns": {
            "type": "Object",
            "desc": "a copy of the value"
          },
          "examples": [
            "[10, 11, 12].copy(); // [10, 11, 12]"
          ]
        },
        {
          "name": "hashCode",
          "is_arbitrary": false,
          "desc": [
            "This returns the hash code of the value, mainly used for maps and sets",
            "the hash code of an object must remain consistent for objects to be able",
            "to be used as keys in a map or set. If two objects are equal, they must",
            "have the same hash code"
          ],
          "returns": {
            "type": "Number",
            "desc": "the hash code of the value"
          },
          "examples": [
            "[10, 11, 12].hashCode(); // -1859087"
          ]
        },
        {
          "name": "instanceOf",
          "is_arbitrary": false,
          "desc": [
            "This returns true if the value is an instance of the given type"
          ],
          "params": [
            {
              "name": "type",
              "type": "Type",
              "desc": "the type to check against"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the value is an instance of the given type"
          },
          "examples": [
            "[10, 11, 12].instanceOf(List.type); // true"
          ]
        },
        {
          "name": "toString",
          "is_arbitrary": false,
          "desc": [
            "This returns the string representation of the value"
          ],
          "returns": {
            "type": "String",
            "desc": "the string representation of the value"
          },
          "examples": [
            "[10, 11, 12].toString(); // [10, 11, 12]"
          ]
        },
        {
          "name": "uniqueHash",
          "is_arbitrary": false,
          "desc": [
            "This returns the unique hash of the value, this is different for every instance of a value"
          ],
          "returns": {
            "type": "Number",
            "desc": "the unique hash of the value"
          },
          "examples": [
            "'thing'.uniqueHash();"
          ]
        }
      ],
      "static_methods": []
    },
    "OtherPlayer": {
      "name": "OtherPlayer",
      "desc": [
        "This class is used to represent all players, mainly other players,",
        "this class extends LivingEntity and so inherits all of their methods too"
      ],
      "import_path": "Minecraft",
      "superclass": "LivingEntity",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getAbilities",
          "is_arbitrary": false,
          "desc": [
            "This gets the abilities of the player in a map",
            "For example:",
            "`{\"invulnerable\": false, \"canFly\": true, \"canBreakBlocks\": true, \"isCreative\": true, \"walkSpeed\": 1.0, \"flySpeed\": 1.2}`"
          ],
          "returns": {
            "type": "Map",
            "desc": "the abilities of the player"
          },
          "examples": [
            "otherPlayer.getAbilities();"
          ]
        },
        {
          "name": "getAllSlotsFor",
          "is_arbitrary": false,
          "desc": [
            "This gets all the slot numbers of the specified item in the players combined inventory"
          ],
          "params": [
            {
              "name": "materialLike",
              "type": "Material",
              "desc": "the item or material you want to get the slot of"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the slot numbers of the item, empty list if not found"
          },
          "examples": [
            "otherPlayer.getAllSlotsFor(Material.DIAMOND);"
          ]
        },
        {
          "name": "getAllSlotsFor",
          "is_arbitrary": false,
          "desc": [
            "This gets all the slot numbers of the specified item in the players combined inventory"
          ],
          "params": [
            {
              "name": "materialLike",
              "type": "Material",
              "desc": "the item or material you want to get the slot of"
            },
            {
              "name": "inventoryType",
              "type": "String",
              "desc": "all/combined -> includes external, player/main -> player slots, external/other -> excludes player inventory"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the slot numbers of the item, empty list if not found"
          },
          "examples": [
            "otherPlayer.getAllSlotsFor(Material.DIAMOND, 'player');"
          ]
        },
        {
          "name": "getCurrentSlot",
          "is_arbitrary": false,
          "desc": [
            "This gets the players currently selected slot"
          ],
          "returns": {
            "type": "Number",
            "desc": "the currently selected slot number"
          },
          "examples": [
            "otherPlayer.getCurrentSlot();"
          ]
        },
        {
          "name": "getFishingBobber",
          "is_arbitrary": false,
          "desc": [
            "This gets the fishing bobber that the player has"
          ],
          "returns": {
            "type": "Entity",
            "desc": "the fishing bobber entity, null if the player isn't fishing"
          },
          "examples": [
            "otherPlayer.getFishingBobber();"
          ]
        },
        {
          "name": "getGamemode",
          "is_arbitrary": false,
          "desc": [
            "This gets the players gamemode, may be null if not known"
          ],
          "returns": {
            "type": "String",
            "desc": "the players gamemode as a string, for example 'creative', 'survival', 'spectator'"
          },
          "examples": [
            "otherPlayer.getGamemode();"
          ]
        },
        {
          "name": "getHeldItem",
          "is_arbitrary": false,
          "desc": [
            "This gets the players currently selected item, in their main hand"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the currently selected item"
          },
          "examples": [
            "otherPlayer.getHeldItem();"
          ]
        },
        {
          "name": "getHunger",
          "is_arbitrary": false,
          "desc": [
            "This gets the hunger level of the player"
          ],
          "returns": {
            "type": "Number",
            "desc": "the hunger level"
          },
          "examples": [
            "otherPlayer.getHunger();"
          ]
        },
        {
          "name": "getItemForPlayerSlot",
          "is_arbitrary": false,
          "desc": [
            "This gets the item in the specified slot, in the players inventory, not including inventories of open containers.",
            "This will throw an error if the slot is out of bounds"
          ],
          "params": [
            {
              "name": "slotNum",
              "type": "Number",
              "desc": "the slot number you want to get"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the item in the specified slot"
          },
          "examples": [
            "otherPlayer.getItemForPlayerSlot(0);"
          ]
        },
        {
          "name": "getItemForSlot",
          "is_arbitrary": false,
          "desc": [
            "This gets the item in the specified slot, in the total players inventory, including inventories of open containers.",
            "This will throw an error if the index is out of bounds"
          ],
          "params": [
            {
              "name": "slotNum",
              "type": "Number",
              "desc": "the slot number you want to get"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the item in the specified slot"
          },
          "examples": [
            "otherPlayer.getItemForSlot(0);"
          ]
        },
        {
          "name": "getLevels",
          "is_arbitrary": false,
          "desc": [
            "This gets the number of experience levels the player has"
          ],
          "returns": {
            "type": "Number",
            "desc": "the number of experience levels"
          },
          "examples": [
            "otherPlayer.getLevels();"
          ]
        },
        {
          "name": "getNextLevelExperience",
          "is_arbitrary": false,
          "desc": [
            "This gets the number of experience required to level up for the player"
          ],
          "returns": {
            "type": "Number",
            "desc": "the number required to next level"
          },
          "examples": [
            "otherPlayer.getNextLevelExperience();"
          ]
        },
        {
          "name": "getPlayerName",
          "is_arbitrary": false,
          "desc": [
            "This gets the players name"
          ],
          "returns": {
            "type": "String",
            "desc": "the players name"
          },
          "examples": [
            "otherPlayer.getPlayerName();"
          ]
        },
        {
          "name": "getSaturation",
          "is_arbitrary": false,
          "desc": [
            "This gets the saturation level of the player"
          ],
          "returns": {
            "type": "Number",
            "desc": "the saturation level"
          },
          "examples": [
            "otherPlayer.getSaturation();"
          ]
        },
        {
          "name": "getSlotFor",
          "is_arbitrary": false,
          "desc": [
            "This gets the slot number of the specified item in the players combined inventory"
          ],
          "params": [
            {
              "name": "materialLike",
              "type": "Material",
              "desc": "the item or material you want to get the slot of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the slot number of the item, null if not found"
          },
          "examples": [
            "otherPlayer.getSlotFor(Material.DIAMOND.asItemStack());"
          ]
        },
        {
          "name": "getTotalSlots",
          "is_arbitrary": false,
          "desc": [
            "This gets the players total inventory slots"
          ],
          "returns": {
            "type": "Number",
            "desc": "the players total inventory slots"
          },
          "examples": [
            "otherPlayer.getTotalSlots();"
          ]
        },
        {
          "name": "getXpProgress",
          "is_arbitrary": false,
          "desc": [
            "This gets the number of experience progress the player has"
          ],
          "returns": {
            "type": "Number",
            "desc": "the number of experience progress"
          },
          "examples": [
            "otherPlayer.getXpProgress();"
          ]
        },
        {
          "name": "isInventoryFull",
          "is_arbitrary": false,
          "desc": [
            "This gets whether the players inventory is full"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the inventory is full"
          },
          "examples": [
            "otherPlayer.isInventoryFull();"
          ]
        },
        {
          "name": "isPlayerSlot",
          "is_arbitrary": false,
          "desc": [
            "This gets inventory type (player / other) for given slot numbers.",
            "This will throw an error if the index is out of bounds"
          ],
          "params": [
            {
              "name": "slotNum",
              "type": "Number",
              "desc": "the slot number you want to get"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether slot was player inventory or not"
          },
          "examples": [
            "otherPlayer.isPlayerSlot(0);"
          ]
        }
      ],
      "static_methods": []
    },
    "OutlinedShape": {
      "name": "OutlinedShape",
      "desc": [
        "This class represents all shapes that can be outlined"
      ],
      "import_path": null,
      "superclass": "Shape",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getOutlineBlue",
          "is_arbitrary": false,
          "desc": [
            "This gets the outline blue value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the blue value of the outline"
          },
          "examples": [
            "shape.getOutlineBlue();"
          ]
        },
        {
          "name": "getOutlineGreen",
          "is_arbitrary": false,
          "desc": [
            "This gets the outline green value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the green value of the outline"
          },
          "examples": [
            "shape.getOutlineGreen();"
          ]
        },
        {
          "name": "getOutlineRed",
          "is_arbitrary": false,
          "desc": [
            "This gets the outline red value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the red value of the outline"
          },
          "examples": [
            "shape.getOutlineRed();"
          ]
        },
        {
          "name": "getOutlineWidth",
          "is_arbitrary": false,
          "desc": [
            "This gets the outline width of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the width of the outline"
          },
          "examples": [
            "shape.getOutlineWidth();"
          ]
        },
        {
          "name": "setOutlineBlue",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline blue value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue between 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineBlue(34);"
          ]
        },
        {
          "name": "setOutlineColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the width of the shape, using a single value, this function",
            "also has a sibling named `setOutlineColor()` that has the same functionality.",
            "The colour generally should be hexadecimal in the form 0xRRGGBB"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour you want to set"
            }
          ],
          "examples": [
            "shape.setOutlineColour(0xFF00FF);"
          ]
        },
        {
          "name": "setOutlineColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline colour of the shape, using three values, this function",
            "also has a sibling named `setOutlineColor()` that has the same functionality.",
            "If the colours are not between 0 and 255 an error will be thrown"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineColour(255, 0, 255);"
          ]
        },
        {
          "name": "setOutlineGreen",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline green value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green between 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineGreen(34);"
          ]
        },
        {
          "name": "setOutlineRed",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline red value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red between 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineRed(34);"
          ]
        },
        {
          "name": "setOutlineWidth",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline width of the shape, this should not be negative"
          ],
          "params": [
            {
              "name": "width",
              "type": "Number",
              "desc": "the width of the outline"
            }
          ],
          "examples": [
            "shape.setOutlineWidth(2);"
          ]
        }
      ],
      "static_methods": []
    },
    "Player": {
      "name": "Player",
      "desc": [
        "This class is used to interact with the main player, this extends OtherPlayer",
        "and so inherits all methods from that class."
      ],
      "import_path": "Minecraft",
      "superclass": "OtherPlayer",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "anvil",
          "is_arbitrary": false,
          "desc": [
            "This allows you to combine two items in an anvil"
          ],
          "params": [
            {
              "name": "predicate1",
              "type": "Function",
              "desc": "a function determining whether the first ItemStack meets a criteria"
            },
            {
              "name": "predicate2",
              "type": "Function",
              "desc": "a function determining whether the second ItemStack meets a criteria"
            }
          ],
          "returns": {
            "type": "Future",
            "desc": "whether the anvilling was successful, if the player doesn't have enough levels it will return the xp cost"
          },
          "examples": [
            "// Enchant a pickaxe with mending\nplayer.anvil(\n    // Predicate for pick\n    fun(item) {\n        // We want a netherite pickaxe without mending\n        if (item.getItemId() == \"netherite_pickaxe\") {\n            hasMending = item.getEnchantments().getKeys().contains(\"mending\");\n            return !hasMending;\n        }\n        return false;\n    },\n    // Predicate for book\n    fun(item) {\n        // We want a book with mending\n        if (item.getItemId() == \"enchanted_book\") {\n            hasMending = item.getEnchantments().getKeys().contains(\"mending\");\n            return hasMending;\n        }\n        return false;\n    }\n);"
          ]
        },
        {
          "name": "anvil",
          "is_arbitrary": false,
          "desc": [
            "This allows you to combine two items in an anvil"
          ],
          "params": [
            {
              "name": "predicate1",
              "type": "Function",
              "desc": "a function determining whether the first ItemStack meets a criteria"
            },
            {
              "name": "predicate2",
              "type": "Function",
              "desc": "a function determining whether the second ItemStack meets a criteria"
            },
            {
              "name": "take",
              "type": "Boolean",
              "desc": "whether you should take the item after putting items in the anvil"
            }
          ],
          "returns": {
            "type": "Future",
            "desc": "whether the anvilling was successful, if the player doesn't have enough levels it will return the xp cost"
          },
          "examples": [
            "// Enchant a pickaxe with mending\nplayer.anvil(\n    // Predicate for pick\n    fun(item) {\n        // We want a netherite pickaxe without mending\n        if (item.getItemId() == \"netherite_pickaxe\") {\n            hasMending = item.getEnchantments().getKeys().contains(\"mending\");\n            return !hasMending;\n        }\n        return false;\n    },\n    // Predicate for book\n    fun(item) {\n        // We want a book with mending\n        if (item.getItemId() == \"enchanted_book\") {\n            hasMending = item.getEnchantments().getKeys().contains(\"mending\");\n            return hasMending;\n        }\n        return false;\n    },\n    false\n);"
          ]
        },
        {
          "name": "anvilRename",
          "is_arbitrary": false,
          "desc": [
            "This allows you to name an item in an anvil"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "the name you want to give the item"
            },
            {
              "name": "predicate",
              "type": "Function",
              "desc": "whether the ItemStack meets a certain criteria"
            }
          ],
          "returns": {
            "type": "Future",
            "desc": "whether the anvilling was successful, if the player doesn't have enough levels it will return the xp cost"
          },
          "examples": [
            "// Rename any shulker box\nplayer.anvilRename(\"Rocket Box\",\n    fun(item) {\n        isShulker = item.getItemId().containsString(\"shulker_box\"));\n        return isShulker;\n    }\n);"
          ]
        },
        {
          "name": "attack",
          "is_arbitrary": false,
          "desc": [
            "This allows you to make your player attack, you must",
            "pass 'hold', 'stop', or 'once' otherwise an error will be thrown"
          ],
          "params": [
            {
              "name": "action",
              "type": "String",
              "desc": "the type of action, either 'hold', 'stop', or 'once'"
            }
          ],
          "examples": [
            "player.attack('once');"
          ]
        },
        {
          "name": "attackBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to attack a block at a position and direction"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the attack, e.g. 'up', 'north', 'east', etc."
            }
          ],
          "examples": [
            "player.attackBlock(new Pos(0, 0, 0), 'up');"
          ]
        },
        {
          "name": "attackBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to attack a block at a position and direction"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the attack, e.g. 'up', 'north', 'east', etc."
            }
          ],
          "examples": [
            "player.attackBlock(0, 0, 0, 'up');"
          ]
        },
        {
          "name": "attackEntity",
          "is_arbitrary": false,
          "desc": [
            "This makes your player attack an entity without",
            "having to be looking at it or clicking on the entity"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "the entity to attack"
            }
          ],
          "examples": [
            "allEntities = client.getWorld().getAllEntities();\nforeach (entity : allEntities) {\n    if (entity.getId() == \"villager\" && player.getSquaredDistanceTo(entity) < 5) {\n        player.attackEntity(entity);\n        break;\n    }\n}"
          ]
        },
        {
          "name": "breakBlock",
          "is_arbitrary": false,
          "desc": [
            "This breaks a block at a given position, if it is able to be broken"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            }
          ],
          "returns": {
            "type": "Future",
            "desc": "the future will be completed when the block is broken"
          },
          "examples": [
            "player.breakBlock(new Pos(0, 0, 0));"
          ]
        },
        {
          "name": "canPlaceBlockAt",
          "is_arbitrary": false,
          "desc": [
            "Checks block can be placed at given position"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position to check"
            }
          ],
          "examples": [
            "player.canPlaceBlockAt(block, pos);"
          ]
        },
        {
          "name": "canPlaceBlockAt",
          "is_arbitrary": false,
          "desc": [
            "Checks block can be placed at given position"
          ],
          "params": [
            {
              "name": "block",
              "type": "Block",
              "desc": "the block to check for"
            },
            {
              "name": "x",
              "type": "Number",
              "desc": "the x coordinate of the position"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y coordinate of the position"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z coordinate of the position"
            }
          ],
          "examples": [
            "player.canPlaceBlockAt(block, 0, 0, 0);"
          ]
        },
        {
          "name": "clickCreativeStack",
          "is_arbitrary": false,
          "desc": [
            "This allows you to click Creative stack, but requires sync with server"
          ],
          "params": [
            {
              "name": "itemStack",
              "type": "ItemStack",
              "desc": "Stack to click"
            },
            {
              "name": "slot",
              "type": "Number",
              "desc": "the slot to click"
            }
          ],
          "examples": [
            "player.clickCreativeStack(Material.DIAMOND_SWORD.asItemStack(), 9);"
          ]
        },
        {
          "name": "clickRecipe",
          "is_arbitrary": false,
          "desc": [
            "This allows you to click a predefined recipe"
          ],
          "params": [
            {
              "name": "recipe",
              "type": "Recipe",
              "desc": "the recipe you want to select"
            }
          ],
          "examples": [
            "player.clickRecipe(Recipe.CHEST);"
          ]
        },
        {
          "name": "clickRecipe",
          "is_arbitrary": false,
          "desc": [
            "This allows you to click a predefined recipe"
          ],
          "params": [
            {
              "name": "recipe",
              "type": "Recipe",
              "desc": "the recipe you want to select"
            },
            {
              "name": "boolean",
              "type": "Boolean",
              "desc": "whether to shift click the recipe"
            }
          ],
          "examples": [
            "player.clickRecipe(Recipe.CHEST, true);"
          ]
        },
        {
          "name": "clickSlot",
          "is_arbitrary": false,
          "desc": [
            "This allows you to click a slot with either right or left click",
            "and a slot action, the click must be either 'left' or 'right' or a number (for swap).",
            "The action must be either 'click', 'shift_click', 'swap', 'middle_click',",
            "'throw', 'drag', or 'double_click' or an error will be thrown"
          ],
          "params": [
            {
              "name": "slot",
              "type": "Number",
              "desc": "the slot to click"
            },
            {
              "name": "click",
              "type": "String",
              "desc": "the click type, this should be either 'left' or 'right'"
            },
            {
              "name": "action",
              "type": "String",
              "desc": "the action to perform"
            }
          ],
          "examples": [
            "player.clickSlot(9, 'left', 'double_click');"
          ]
        },
        {
          "name": "closeScreen",
          "is_arbitrary": false,
          "desc": [
            "This closes the current screen"
          ],
          "examples": [
            "player.closeScreen();"
          ]
        },
        {
          "name": "craft",
          "is_arbitrary": false,
          "desc": [
            "This allows you to craft a recipe, this can be 2x2 or 3x3",
            "The list you pass in must contain Materials or ItemStacks",
            "Most of the time you should use craftRecipe instead. You must",
            "be in an appropriate gui for the crafting recipe or an error will be thrown"
          ],
          "params": [
            {
              "name": "recipe",
              "type": "List",
              "desc": "a list of materials making up the recipe you want to craft including air"
            }
          ],
          "examples": [
            "chestRecipe = [\n    Material.OAK_PLANKS, Material.OAK_PLANKS, Material.OAK_PLANKS,\n    Material.OAK_PLANKS,    Material.AIR    , Material.OAK_PLANKS,\n    Material.OAK_PLANKS, Material.OAK_PLANKS, Material.OAK_PLANKS\n];\nplayer.craft(chestRecipe);"
          ]
        },
        {
          "name": "craftRecipe",
          "is_arbitrary": false,
          "desc": [
            "This allows you to craft a predefined recipe"
          ],
          "params": [
            {
              "name": "recipe",
              "type": "Recipe",
              "desc": "the recipe you want to craft"
            }
          ],
          "examples": [
            "player.craftRecipe(Recipe.CHEST);"
          ]
        },
        {
          "name": "craftRecipe",
          "is_arbitrary": false,
          "desc": [
            "This allows you to craft a predefined recipe"
          ],
          "params": [
            {
              "name": "recipe",
              "type": "Recipe",
              "desc": "the recipe you want to craft"
            },
            {
              "name": "boolean",
              "type": "Boolean",
              "desc": "whether result should be dropped or not"
            }
          ],
          "examples": [
            "player.craftRecipe(Recipe.CHEST, true);"
          ]
        },
        {
          "name": "dropAll",
          "is_arbitrary": false,
          "desc": [
            "This drops all items of a given type in the player's inventory"
          ],
          "params": [
            {
              "name": "material",
              "type": "Material",
              "desc": "the item stack, or material type to drop"
            }
          ],
          "examples": [
            "player.dropAll(Material.DIRT.asItemStack());"
          ]
        },
        {
          "name": "dropAllExact",
          "is_arbitrary": false,
          "desc": [
            "This drops all the items that have the same nbt as a given stack"
          ],
          "params": [
            {
              "name": "itemStack",
              "type": "ItemStack",
              "desc": "the stack with nbt to drop"
            }
          ],
          "examples": [
            "player.dropAllExact(Material.GOLD_INGOT.asItemStack());"
          ]
        },
        {
          "name": "dropItemInHand",
          "is_arbitrary": false,
          "desc": [
            "This drops the item(s) in the player's main hand"
          ],
          "params": [
            {
              "name": "dropAll",
              "type": "Boolean",
              "desc": "if true, all items in the player's main hand will be dropped"
            }
          ],
          "examples": [
            "player.dropItemInHand(true);"
          ]
        },
        {
          "name": "dropSlot",
          "is_arbitrary": false,
          "desc": [
            "This allows you to drop the items in a slot"
          ],
          "params": [
            {
              "name": "slot",
              "type": "Number",
              "desc": "the slot to drop"
            }
          ],
          "examples": [
            "player.dropSlot(9);"
          ]
        },
        {
          "name": "fakeLook",
          "is_arbitrary": false,
          "desc": [
            "This makes the player 'fake' looking in a direction, this can be",
            "used to place blocks in unusual orientations without moving the camera"
          ],
          "params": [
            {
              "name": "yaw",
              "type": "Number",
              "desc": "the yaw to look at"
            },
            {
              "name": "pitch",
              "type": "Number",
              "desc": "the pitch to look at"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction to look at"
            },
            {
              "name": "duration",
              "type": "Number",
              "desc": "the duration of the look in ticks"
            }
          ],
          "examples": [
            "player.fakeLook(90, 0, 'up', 100);"
          ]
        },
        {
          "name": "getBlockBreakingSpeed",
          "is_arbitrary": false,
          "desc": [
            "This returns the block breaking speed of the player on a block including enchanements and effects"
          ],
          "params": [
            {
              "name": "itemStack",
              "type": "ItemStack",
              "desc": "item to test with"
            },
            {
              "name": "block",
              "type": "Block",
              "desc": "the block to get the speed of"
            }
          ],
          "examples": [
            "speed = player.getBlockBreakingSpeed(Material.NETHERITE_PICKAXE.asItem(), Material.GOLD_BLOCK.asBlock());"
          ]
        },
        {
          "name": "getCurrentScreen",
          "is_arbitrary": false,
          "desc": [
            "This gets the current screen the player is in"
          ],
          "returns": {
            "type": "Screen",
            "desc": "the screen the player is in, if the player is not in a screen it will return null"
          },
          "examples": [
            "screen = player.getCurrentScreen();"
          ]
        },
        {
          "name": "getLookingAtEntity",
          "is_arbitrary": false,
          "desc": [
            "This gets the entity that the player is currently looking at"
          ],
          "returns": {
            "type": "Entity",
            "desc": "the entity that the player is looking at"
          },
          "examples": [
            "player.getLookingAtEntity();"
          ]
        },
        {
          "name": "getSwappableHotbarSlot",
          "is_arbitrary": false,
          "desc": [
            "This will get the next empty slot in the hotbar starting from the current slot",
            "going right, and if it reaches the end of the hotbar it will start from the beginning.",
            "If there is no empty slot it will return any slot that doesn't have an item with",
            "an enchantment that is in the hotbar, again going from the current slot",
            "if there is no such slot it will return the current selected slot"
          ],
          "returns": {
            "type": "Number",
            "desc": "the slot that is swappable"
          },
          "examples": [
            "player.getSwappableHotbarSlot();"
          ]
        },
        {
          "name": "interactBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to interact with a block at a position and direction"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the interaction, e.g. 'up', 'north', 'east', etc."
            }
          ],
          "examples": [
            "player.interactBlock(new Pos(0, 0, 0), 'up');"
          ]
        },
        {
          "name": "interactBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to interact with a block at a position, direction, and hand"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the interaction, e.g. 'up', 'north', 'east', etc."
            },
            {
              "name": "hand",
              "type": "String",
              "desc": "the hand to use, e.g. 'main_hand', 'off_hand'"
            }
          ],
          "examples": [
            "player.interactBlock(new Pos(0, 0, 0), 'up', 'off_hand');"
          ]
        },
        {
          "name": "interactBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to interact with a block at a position and direction"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the interaction, e.g. 'up', 'north', 'east', etc."
            }
          ],
          "examples": [
            "player.interactBlock(0, 100, 0, 'up');"
          ]
        },
        {
          "name": "interactBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to interact with a block at a position and direction",
            "This function is for very specific cases where there needs to be extra precision",
            "like when placing stairs or slabs in certain directions, so the first set of",
            "coords is the exact position of the block, and the second set of coords is the position"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the exact position of the block"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the interaction, e.g. 'up', 'north', 'east', etc."
            },
            {
              "name": "blockPos",
              "type": "Pos",
              "desc": "the position of the block"
            },
            {
              "name": "insideBlock",
              "type": "Boolean",
              "desc": "whether the player is inside the block"
            }
          ],
          "examples": [
            "player.interactBlock(new Pos(0, 15.5, 0), 'up', new Pos(0, 15, 0), true);"
          ]
        },
        {
          "name": "interactBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to interact with a block at a position and direction",
            "This function is for very specific cases where there needs to be extra precision",
            "like when placing stairs or slabs in certain directions, so the first set of",
            "coords is the exact position of the block, and the second set of coords is the position"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the exact position of the block"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the interaction, e.g. 'up', 'north', 'east', etc."
            },
            {
              "name": "hand",
              "type": "String",
              "desc": "the hand to use, e.g. 'main_hand', 'off_hand'"
            },
            {
              "name": "blockPos",
              "type": "Pos",
              "desc": "the position of the block"
            },
            {
              "name": "insideBlock",
              "type": "Boolean",
              "desc": "whether the player is inside the block"
            }
          ],
          "examples": [
            "player.interactBlock(new Pos(0, 15.5, 0), 'up', new Pos(0, 15, 0), true, 'off_hand');"
          ]
        },
        {
          "name": "interactBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to interact with a block at a position and direction",
            "This function is for very specific cases where there needs to be extra precision",
            "like when placing stairs or slabs in certain directions, so the first set of",
            "coords is the exact position of the block, and the second set of coords is the position"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the exact x position"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the exact y position"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the exact z position"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the interaction, e.g. 'up', 'north', 'east', etc."
            },
            {
              "name": "blockX",
              "type": "Number",
              "desc": "the x position of the block"
            },
            {
              "name": "blockY",
              "type": "Number",
              "desc": "the y position of the block"
            },
            {
              "name": "blockZ",
              "type": "Number",
              "desc": "the z position of the block"
            },
            {
              "name": "insideBlock",
              "type": "Boolean",
              "desc": "whether the player is inside the block"
            }
          ],
          "examples": [
            "player.interactBlock(0, 100.5, 0, 'up', 0, 100, 0, true);"
          ]
        },
        {
          "name": "interactItem",
          "is_arbitrary": false,
          "desc": [
            "This allows you to interact item with given Hand"
          ],
          "params": [
            {
              "name": "hand",
              "type": "String",
              "desc": " Hand to use, either 'main' or 'offhand'"
            }
          ],
          "examples": [
            "player.interactItem('main');"
          ]
        },
        {
          "name": "interactWithEntity",
          "is_arbitrary": false,
          "desc": [
            "This allows your player to interact with an entity without",
            "having to be looking at it or clicking on the entity"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "the entity to interact with"
            }
          ],
          "examples": [
            "allEntities = client.getWorld().getAllEntities();\nforeach (entity : allEntities) {\n    if (entity.getId() == \"villager\" && player.getSquaredDistanceTo(entity) < 5) {\n        player.interactWithEntity(entity);\n        break;\n    }\n}"
          ]
        },
        {
          "name": "jump",
          "is_arbitrary": false,
          "desc": [
            "This will make the player jump if they are on the ground"
          ],
          "examples": [
            "player.jump();"
          ]
        },
        {
          "name": "logout",
          "is_arbitrary": false,
          "desc": [
            "This forces the player to leave the world"
          ],
          "params": [
            {
              "name": "message",
              "type": "String",
              "desc": "the message to display to the player on the logout screen"
            }
          ],
          "examples": [
            "player.logout('You've been lazy!');"
          ]
        },
        {
          "name": "look",
          "is_arbitrary": false,
          "desc": [
            "This sets the player's look direction"
          ],
          "params": [
            {
              "name": "yaw",
              "type": "Number",
              "desc": "the yaw of the player's look direction"
            },
            {
              "name": "pitch",
              "type": "Number",
              "desc": "the pitch of the player's look direction"
            }
          ],
          "examples": [
            "player.look(0, 0);"
          ]
        },
        {
          "name": "lookAtPos",
          "is_arbitrary": false,
          "desc": [
            "This makes your player look towards a position"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position to look at"
            }
          ],
          "examples": [
            "player.lookAtPos(pos);"
          ]
        },
        {
          "name": "lookAtPos",
          "is_arbitrary": false,
          "desc": [
            "This makes your player look towards a position"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x coordinate of the position"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y coordinate of the position"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z coordinate of the position"
            }
          ],
          "examples": [
            "player.lookAtPos(0, 0, 0);"
          ]
        },
        {
          "name": "message",
          "is_arbitrary": false,
          "desc": [
            "This allows you to send a message to your player, only they will see this, purely client side"
          ],
          "params": [
            {
              "name": "message",
              "type": "Text",
              "desc": "the message to send, can also be string"
            }
          ],
          "examples": [
            "player.message('Hello World!');"
          ]
        },
        {
          "name": "messageActionBar",
          "is_arbitrary": false,
          "desc": [
            "This allows you to set the current memssage displaying on the action bar"
          ],
          "params": [
            {
              "name": "message",
              "type": "Text",
              "desc": "the message to send, can also be string"
            }
          ],
          "examples": [
            "player.messageActionBar('Hello World!');"
          ]
        },
        {
          "name": "openInventory",
          "is_arbitrary": false,
          "desc": [
            "This opens the player's inventory"
          ],
          "examples": [
            "player.openInventory();"
          ]
        },
        {
          "name": "openScreen",
          "is_arbitrary": false,
          "desc": [
            "This opens a screen for the player, this cannot open server side screens.",
            "This will throw an error if you are trying to open a handled screen"
          ],
          "params": [
            {
              "name": "screen",
              "type": "Screen",
              "desc": "the screen to open"
            }
          ],
          "examples": [
            "player.openScreen(new FakeScreen('MyScreen', 4));"
          ]
        },
        {
          "name": "say",
          "is_arbitrary": false,
          "desc": [
            "This allows you to make your player send a message in chat, this includes commands"
          ],
          "params": [
            {
              "name": "message",
              "type": "String",
              "desc": "the message to send"
            }
          ],
          "examples": [
            "player.say('/help');"
          ]
        },
        {
          "name": "setSelectedSlot",
          "is_arbitrary": false,
          "desc": [
            "This allows you to set the slot number your player is holding.",
            "If the number is not between 0 and 8 an error will be thrown"
          ],
          "params": [
            {
              "name": "slot",
              "type": "Number",
              "desc": "the slot number, must be between 0 - 8"
            }
          ],
          "examples": [
            "player.setSelectedSlot(0);"
          ]
        },
        {
          "name": "setSneaking",
          "is_arbitrary": false,
          "desc": [
            "This sets the player's sneaking state"
          ],
          "params": [
            {
              "name": "sneaking",
              "type": "Boolean",
              "desc": "the sneaking state"
            }
          ],
          "examples": [
            "player.setSneaking(true);"
          ]
        },
        {
          "name": "setSprinting",
          "is_arbitrary": false,
          "desc": [
            "This sets the player's sprinting state"
          ],
          "params": [
            {
              "name": "sprinting",
              "type": "Boolean",
              "desc": "the sprinting state"
            }
          ],
          "examples": [
            "player.setSprinting(true);"
          ]
        },
        {
          "name": "setWalking",
          "is_arbitrary": false,
          "desc": [
            "This sets the player's walking state"
          ],
          "params": [
            {
              "name": "walking",
              "type": "Boolean",
              "desc": "the walking state"
            }
          ],
          "examples": [
            "player.setWalking(true);"
          ]
        },
        {
          "name": "shiftClickSlot",
          "is_arbitrary": false,
          "desc": [
            "This allows you to shift click a slot"
          ],
          "params": [
            {
              "name": "slot",
              "type": "Number",
              "desc": "the slot to click"
            }
          ],
          "examples": [
            "player.shiftClickSlot(9);"
          ]
        },
        {
          "name": "showTitle",
          "is_arbitrary": false,
          "desc": [
            "THis allows you to show a title and subtitle to the player"
          ],
          "params": [
            {
              "name": "title",
              "type": "Text",
              "desc": "the title to show, can be string or null"
            },
            {
              "name": "subtitle",
              "type": "Text",
              "desc": "the subtitle to show, can be string or null"
            }
          ],
          "examples": [
            "player.showTitle('Title!', 'Subtitle!');"
          ]
        },
        {
          "name": "spectatorTeleport",
          "is_arbitrary": false,
          "desc": [
            "This allows you to teleport to any entity as long as you are in spectator mode"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "the entity to teleport to"
            }
          ],
          "examples": [
            "player.spectatorTeleport(player.getLookingAtEntity());"
          ]
        },
        {
          "name": "stonecutter",
          "is_arbitrary": false,
          "desc": [
            "This allows you to use the stonecutter"
          ],
          "params": [
            {
              "name": "itemInput",
              "type": "Material",
              "desc": "the item or material you want to input"
            },
            {
              "name": "itemOutput",
              "type": "Material",
              "desc": "the item or material you want to craft"
            }
          ],
          "returns": {
            "type": "Future",
            "desc": "whether the result was successful"
          },
          "examples": [
            "player.stonecutter(Material.STONE.asItemstack(), Material.STONE_BRICKS.asItemStack());"
          ]
        },
        {
          "name": "swapHands",
          "is_arbitrary": false,
          "desc": [
            "This will swap the player's main hand with the off hand"
          ],
          "examples": [
            "player.swapHands();"
          ]
        },
        {
          "name": "swapPlayerSlotWithHotbar",
          "is_arbitrary": false,
          "desc": [
            "This allows you to swap a slot in the player's inventory with the hotbar"
          ],
          "params": [
            {
              "name": "slot",
              "type": "Number",
              "desc": "the slot to swap"
            }
          ],
          "examples": [
            "player.swapPlayerSlotWithHotbar(15);"
          ]
        },
        {
          "name": "swapSlots",
          "is_arbitrary": false,
          "desc": [
            "The allows you to swap two slots with one another.",
            "A note about slot order is that slots go from top to bottom.",
            "This will throw an errof if the slots are out of bounds"
          ],
          "params": [
            {
              "name": "slot1",
              "type": "Number",
              "desc": "the slot to swap with slot2"
            },
            {
              "name": "slot2",
              "type": "Number",
              "desc": "the slot to swap with slot1"
            }
          ],
          "examples": [
            "player.swapSlots(13, 14);"
          ]
        },
        {
          "name": "swingHand",
          "is_arbitrary": false,
          "desc": [
            "This will play the player's hand swing animation for a given hand"
          ],
          "params": [
            {
              "name": "hand",
              "type": "String",
              "desc": "the hand to swing, this should be either 'main_hand' or 'off_hand'"
            }
          ],
          "examples": [
            "player.swingHand('main_hand');"
          ]
        },
        {
          "name": "updateBreakingBlock",
          "is_arbitrary": false,
          "deprecated": [
            "Consider using other alternatives for breaking blocks, e.g. <Player>.breakBlock"
          ],
          "desc": [
            "This allows you to update your block breaking progress at a position"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            }
          ],
          "examples": [
            "player.updateBreakingBlock(new Pos(0, 0, 0));"
          ]
        },
        {
          "name": "updateBreakingBlock",
          "is_arbitrary": false,
          "deprecated": [
            "Consider using other alternatives for breaking blocks, e.g. <Player>.breakBlock"
          ],
          "desc": [
            "This allows you to update your block breaking progress at a position"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position"
            }
          ],
          "examples": [
            "player.updateBreakingBlock(0, 0, 0);"
          ]
        },
        {
          "name": "use",
          "is_arbitrary": false,
          "desc": [
            "This allows you to make your player use, you must",
            "pass 'hold', 'stop', or 'once' otherwise an error will be thrown"
          ],
          "params": [
            {
              "name": "action",
              "type": "String",
              "desc": "the type of action, either 'hold', 'stop', or 'once'"
            }
          ],
          "examples": [
            "player.use('hold');"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "get",
          "is_arbitrary": false,
          "desc": [
            "This gets the main player"
          ],
          "returns": {
            "type": "Player",
            "desc": "The main player"
          },
          "examples": [
            "player = Player.get();"
          ]
        }
      ]
    },
    "Pos": {
      "name": "Pos",
      "desc": [
        "This class is a wrapper for 3 coordinate points in Minecraft"
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "Creates a new Pos object with the given coordinates in a list"
          ],
          "params": [
            {
              "name": "list",
              "type": "List",
              "desc": "the list containing three coordinates"
            }
          ],
          "examples": [
            "new Pos([1, 2, 3])"
          ]
        },
        {
          "desc": [
            "This creates a new Pos with the given x, y, and z"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position"
            }
          ],
          "examples": [
            "new Pos(100, 0, 96);"
          ]
        }
      ],
      "methods": [
        {
          "name": "add",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos x, y, and z added by the given pos x, y, and z"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the Pos to add by"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.add(new Pos(2, 3, 5));"
          ]
        },
        {
          "name": "add",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos x, y, and z added by the given x, y, and z"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x adder"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y adder"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z adder"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.add(2, 3, 5);"
          ]
        },
        {
          "name": "asCentre",
          "is_arbitrary": false,
          "desc": [
            "This returns center value of the position"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the center of the position"
          },
          "examples": [
            "pos.asCentre();"
          ]
        },
        {
          "name": "crossProduct",
          "is_arbitrary": false,
          "desc": [
            "This returns the cross product of the current pos and the given pos"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the Pos to cross product with"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the cross product"
          },
          "examples": [
            "pos.crossProduct(new Pos(2, 3, 5));"
          ]
        },
        {
          "name": "distanceTo",
          "is_arbitrary": false,
          "desc": [
            "This returns distance to other position"
          ],
          "params": [
            {
              "name": "other",
              "type": "Pos",
              "desc": "other position"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "distance to other position"
          },
          "examples": [
            "pos.distanceTo(new Pos(0, 0, 0));"
          ]
        },
        {
          "name": "distanceTo",
          "is_arbitrary": false,
          "desc": [
            "This returns distance to other x, y, z position"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "other position x"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "other position y"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "other position z"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "distance to other position"
          },
          "examples": [
            "pos.distanceTo(0, 0, 0);"
          ]
        },
        {
          "name": "dotProduct",
          "is_arbitrary": false,
          "desc": [
            "This returns the dot product of the current pos and the given pos"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the Pos to dot product with"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the dot product"
          },
          "examples": [
            "pos.dotProduct(new Pos(2, 3, 5));"
          ]
        },
        {
          "name": "down",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos y decremented by 1"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.down();"
          ]
        },
        {
          "name": "down",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos y decremented by the given number"
          ],
          "params": [
            {
              "name": "number",
              "type": "Number",
              "desc": "the number to decrement by"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.down(2);"
          ]
        },
        {
          "name": "east",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos x incremented by 1"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.east();"
          ]
        },
        {
          "name": "east",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos x incremented by the given number"
          ],
          "params": [
            {
              "name": "number",
              "type": "Number",
              "desc": "the number to increment by"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.east(2);"
          ]
        },
        {
          "name": "getSidePos",
          "is_arbitrary": false,
          "desc": [
            "This returns side position value of position"
          ],
          "params": [
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction, can be: north, south, east, west, up, down"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the side of the position"
          },
          "examples": [
            "pos.getSidePos('east');"
          ]
        },
        {
          "name": "getX",
          "is_arbitrary": false,
          "desc": [
            "This returns the x position of the Pos"
          ],
          "returns": {
            "type": "Number",
            "desc": "the x position"
          },
          "examples": [
            "pos.getX();"
          ]
        },
        {
          "name": "getY",
          "is_arbitrary": false,
          "desc": [
            "This returns the y position of the Pos"
          ],
          "returns": {
            "type": "Number",
            "desc": "the y position"
          },
          "examples": [
            "pos.getY();"
          ]
        },
        {
          "name": "getZ",
          "is_arbitrary": false,
          "desc": [
            "This returns the z position of the Pos"
          ],
          "returns": {
            "type": "Number",
            "desc": "the z position"
          },
          "examples": [
            "pos.getZ();"
          ]
        },
        {
          "name": "isNear",
          "is_arbitrary": false,
          "desc": [
            "This returns whether position to entity is less than 4.5"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "the entity you want to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether entity is within 4.5 block distance"
          },
          "examples": [
            "pos.isNear(Player.get());"
          ]
        },
        {
          "name": "isWithin",
          "is_arbitrary": false,
          "desc": [
            "This returns whether position to entity is less than given distance"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "the entity you want to check"
            },
            {
              "name": "distance",
              "type": "Number",
              "desc": "the distance you want to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether entity is within given distance"
          },
          "examples": [
            "pos.isNear(player, 8);"
          ]
        },
        {
          "name": "multiply",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos x, y, and z multiplied by the given pos x, y, and z"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the Pos to multiply by"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.multiply(new Pos(2, 3, 5));"
          ]
        },
        {
          "name": "multiply",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos x, y, and z multiplied by the given x, y, and z"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x multiplier"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y multiplier"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z multiplier"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.multiply(2, 3, 5);"
          ]
        },
        {
          "name": "normalize",
          "is_arbitrary": false,
          "desc": [
            "Normalizes the vector to have a magnitude of 1"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the normalized position"
          },
          "examples": [
            "pos.normalize();"
          ]
        },
        {
          "name": "north",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos z incremented by 1"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.north();"
          ]
        },
        {
          "name": "north",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos z incremented by the given number"
          ],
          "params": [
            {
              "name": "number",
              "type": "Number",
              "desc": "the number to increment by"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.north(2);"
          ]
        },
        {
          "name": "offset",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos x, y, and z offset by a direction"
          ],
          "params": [
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction to offset by, must be one of: north, south, east, west, up, down"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.offset('north');"
          ]
        },
        {
          "name": "offset",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos x, y, and z offset by a direction and a distance"
          ],
          "params": [
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction to offset by, must be one of: north, south, east, west, up, down"
            },
            {
              "name": "distance",
              "type": "Number",
              "desc": "the distance to offset by"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.offset('north', 2);"
          ]
        },
        {
          "name": "south",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos z decremented by 1"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.south();"
          ]
        },
        {
          "name": "south",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos z decremented by the given number"
          ],
          "params": [
            {
              "name": "number",
              "type": "Number",
              "desc": "the number to decrement by"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.south(2);"
          ]
        },
        {
          "name": "subtract",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos x, y, and z subtracted by the given pos x, y, and z"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the Pos to subtract by"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.subtract(new Pos(2, 3, 5));"
          ]
        },
        {
          "name": "subtract",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos x, y, and z subtracted by the given x, y, and z"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x subtractor"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y subtractor"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z subtractor"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.subtract(2, 3, 5);"
          ]
        },
        {
          "name": "toBlockPos",
          "is_arbitrary": false,
          "desc": [
            "This floors all of the positions values to the nearest block"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.toBlockPos();"
          ]
        },
        {
          "name": "toList",
          "is_arbitrary": false,
          "desc": [
            "This returns the Pos as a List containing the x, y, and z positions in order"
          ],
          "returns": {
            "type": "List",
            "desc": "the Pos as a List"
          },
          "examples": [
            "x, y, z = pos.toList();"
          ]
        },
        {
          "name": "up",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos y incremented by 1"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.up();"
          ]
        },
        {
          "name": "up",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos y incremented by the given number"
          ],
          "params": [
            {
              "name": "number",
              "type": "Number",
              "desc": "the number to increment by"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.up(2);"
          ]
        },
        {
          "name": "west",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos x decremented by 1"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.west();"
          ]
        },
        {
          "name": "west",
          "is_arbitrary": false,
          "desc": [
            "This returns a new Pos with the current pos x decremented by the given number"
          ],
          "params": [
            {
              "name": "number",
              "type": "Number",
              "desc": "the number to decrement by"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the new Pos"
          },
          "examples": [
            "pos.west(2);"
          ]
        }
      ],
      "static_methods": []
    },
    "Recipe": {
      "name": "Recipe",
      "desc": [
        "This class represents recipes in Minecraft."
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getCraftingType",
          "is_arbitrary": false,
          "desc": [
            "This returns the crafting type of the recipe"
          ],
          "returns": {
            "type": "String",
            "desc": "the crafting type of the recipe, for example: 'crafting', 'smelting', 'blasting'"
          },
          "examples": [
            "recipe.getCraftingType()"
          ]
        },
        {
          "name": "getFullId",
          "is_arbitrary": false,
          "desc": [
            "This returns the full id of the recipe"
          ],
          "returns": {
            "type": "String",
            "desc": "the full id of the recipe"
          },
          "examples": [
            "recipe.getFullId()"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This returns the id of the recipe"
          ],
          "returns": {
            "type": "String",
            "desc": "the id of the recipe"
          },
          "examples": [
            "recipe.getId()"
          ]
        },
        {
          "name": "getIngredients",
          "is_arbitrary": false,
          "desc": [
            "This returns all the possible ingredients of the recipe"
          ],
          "returns": {
            "type": "List",
            "desc": "list of lists, each inner lists contains possible recipe items"
          },
          "examples": [
            "recipe.getIngredients()"
          ]
        },
        {
          "name": "getOutput",
          "is_arbitrary": false,
          "desc": [
            "This returns the output of the recipe"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the output of the recipe"
          },
          "examples": [
            "recipe.getOutput()"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This converts a recipe id into a Recipe if it's valid,",
            "otherwise an error will be thrown"
          ],
          "params": [
            {
              "name": "recipeId",
              "type": "String",
              "desc": "the id of the recipe to convert to a Recipe"
            }
          ],
          "returns": {
            "type": "Recipe",
            "desc": "the recipe instance from the id"
          },
          "examples": [
            "Recipe.of('redstone_block')"
          ]
        }
      ]
    },
    "Screen": {
      "name": "Screen",
      "desc": [
        "This allows you to get information about the player's current screen."
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "Gets the name of the specific screen"
          ],
          "returns": {
            "type": "String",
            "desc": "the screen name, if you are in the creative menu it will return the name of the tab you are on"
          },
          "examples": [
            "screen.getName()"
          ]
        },
        {
          "name": "getTitle",
          "is_arbitrary": false,
          "desc": [
            "Gets the title of the specific screen"
          ],
          "returns": {
            "type": "String",
            "desc": "the screen title as text, this may include formatting, and custom names for the screen if applicable"
          },
          "examples": [
            "screen.getTitle()"
          ]
        }
      ],
      "static_methods": []
    },
    "Set": {
      "name": "Set",
      "desc": [
        "Sets are collections of unique values. Similar to maps, without the values.",
        "An instance of the class can be created by using `Set.of(values...)`"
      ],
      "import_path": null,
      "superclass": "Collection",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates an empty set"
          ],
          "examples": [
            "new Set();"
          ]
        }
      ],
      "methods": [
        {
          "name": "add",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add a value to the set"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to add to the set"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the value was successfully added to the set"
          },
          "examples": [
            "Set.of().add('object');"
          ]
        },
        {
          "name": "addAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add all the values in a collection into the set"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection of values you want to add"
            }
          ],
          "returns": {
            "type": "Set",
            "desc": "the modified set"
          },
          "examples": [
            "Set.of().addAll(Set.of('object', 81, 96, 'case'));"
          ]
        },
        {
          "name": "clear",
          "is_arbitrary": false,
          "desc": [
            "This removes all values from inside the set"
          ],
          "examples": [
            "Set.of('object').clear();"
          ]
        },
        {
          "name": "contains",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check whether a value is in the set"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value that you want to check in the set"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the value is in the set"
          },
          "examples": [
            "Set.of('object').contains('object');"
          ]
        },
        {
          "name": "containsAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check whether a collection of values are all in the set"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection of values you want to check in the set"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether all the values are in the set"
          },
          "examples": [
            "Set.of('object').containsAll(Set.of('object', 81, 96, 'case'));"
          ]
        },
        {
          "name": "filter",
          "is_arbitrary": false,
          "desc": [
            "This allows you to filter the set"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function you want to filter the set by"
            }
          ],
          "returns": {
            "type": "Set",
            "desc": "the filtered set"
          },
          "examples": [
            "Set.of(-9, 81, 96, 15).filter(fun(value) { return value > 80; });"
          ]
        },
        {
          "name": "get",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get a value from in the set.",
            "The reason this might be useful is if you want to retrieve something",
            "from the set that will have the same hashcode but be in a different state",
            "as the value you are passing in"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to get from the set"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the value you wanted to get, null if it wasn't in the set"
          },
          "examples": [
            "Set.of('object').get('object');"
          ]
        },
        {
          "name": "map",
          "is_arbitrary": false,
          "desc": [
            "This allows you to map the set"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function you want to map the set by"
            }
          ],
          "returns": {
            "type": "Set",
            "desc": "the mapped set"
          },
          "examples": [
            "Set.of(-9, 81, 96, 15).map(fun(value) { return value * 2; });"
          ]
        },
        {
          "name": "reduce",
          "is_arbitrary": false,
          "desc": [
            "This allows you to reduce the set"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function you want to reduce the set by"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the reduced set"
          },
          "examples": [
            "Set.of(-9, 81, 96, 15).reduce(fun(value, next) { return value + next; });"
          ]
        },
        {
          "name": "remove",
          "is_arbitrary": false,
          "desc": [
            "This allows you to remove a value from the set"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to remove from the set"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the value was removed from the set"
          },
          "examples": [
            "Set.of('object').remove('object');"
          ]
        },
        {
          "name": "removeAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to remove all values in a collection from the set"
          ],
          "params": [
            {
              "name": "value",
              "type": "Collection",
              "desc": "the values you want to remove from the set"
            }
          ],
          "returns": {
            "type": "Set",
            "desc": "the set with the values removed"
          },
          "examples": [
            "Set.of('object', 'object').removeAll(Set.of('object'));"
          ]
        },
        {
          "name": "toList",
          "is_arbitrary": false,
          "desc": [
            "This returns a list of all the values in the set"
          ],
          "returns": {
            "type": "List",
            "desc": "the list of values in the set"
          },
          "examples": [
            "Set.of('object', 81, 96, 'case').toList();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": true,
          "desc": [
            "This allows you to create a set with an arbitrary number of values"
          ],
          "params": [
            {
              "name": "values...",
              "type": "Object",
              "desc": "the values you want to add to the set"
            }
          ],
          "returns": {
            "type": "Set",
            "desc": "the set you created"
          },
          "examples": [
            "Set.of('object', 81, 96, 'case');"
          ]
        },
        {
          "name": "unordered",
          "is_arbitrary": false,
          "desc": [
            "This creates an unordered set"
          ],
          "returns": {
            "type": "Set",
            "desc": "the unordered set"
          },
          "examples": [
            "Set.unordered();"
          ]
        }
      ]
    },
    "Shape": {
      "name": "Shape",
      "desc": [
        "This class is the base class for all shapes that can be rendered,",
        "providing the base functionality for all shapes"
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getBlue",
          "is_arbitrary": false,
          "desc": [
            "This returns the blue value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the blue value of the shape"
          },
          "examples": [
            "shape.getBlue();"
          ]
        },
        {
          "name": "getGreen",
          "is_arbitrary": false,
          "desc": [
            "This returns the green value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the green value of the shape"
          },
          "examples": [
            "shape.getGreen();"
          ]
        },
        {
          "name": "getOpacity",
          "is_arbitrary": false,
          "desc": [
            "This returns the opacity of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the opacity of the shape"
          },
          "examples": [
            "shape.getOpacity();"
          ]
        },
        {
          "name": "getRGB",
          "is_arbitrary": false,
          "desc": [
            "This returns the RGB value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the RGB value of the shape as a single number in the form 0xRRGGBB"
          },
          "examples": [
            "shape.getRGB();"
          ]
        },
        {
          "name": "getRGBAList",
          "is_arbitrary": false,
          "desc": [
            "This returns the RGBA value of the shape as a list"
          ],
          "returns": {
            "type": "List",
            "desc": "the RGBA value of the shape as a list in the form [red, green, blue, opacity]"
          },
          "examples": [
            "r, g, b, a = shape.getRGBAList();"
          ]
        },
        {
          "name": "getRGBList",
          "is_arbitrary": false,
          "desc": [
            "This returns the RGB value of the shape as a list"
          ],
          "returns": {
            "type": "List",
            "desc": "the RGB value of the shape as a list in the form [red, green, blue]"
          },
          "examples": [
            "r, g, b = shape.getRGBList();"
          ]
        },
        {
          "name": "getRed",
          "is_arbitrary": false,
          "desc": [
            "This returns the red value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the red value of the shape"
          },
          "examples": [
            "shape.getRed();"
          ]
        },
        {
          "name": "getXScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the x scale of the shape"
          ],
          "examples": [
            "shape.getXScale();"
          ]
        },
        {
          "name": "getXTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the x tilt of the shape"
          ],
          "examples": [
            "shape.getXTilt();"
          ]
        },
        {
          "name": "getYScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the y scale of the shape"
          ],
          "examples": [
            "shape.getYScale();"
          ]
        },
        {
          "name": "getYTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the y tilt of the shape"
          ],
          "examples": [
            "shape.getYTilt();"
          ]
        },
        {
          "name": "getZScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the z scale of the shape"
          ],
          "examples": [
            "shape.getZScale();"
          ]
        },
        {
          "name": "getZTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the z tilt of the shape"
          ],
          "examples": [
            "shape.getZTilt();"
          ]
        },
        {
          "name": "render",
          "is_arbitrary": false,
          "desc": [
            "This sets the shape to be rendered indefinitely, the shape will only stop rendering when",
            "the script ends or when you call the stopRendering() method"
          ],
          "examples": [
            "shape.render();"
          ]
        },
        {
          "name": "setBlue",
          "is_arbitrary": false,
          "desc": [
            "This sets the blue value of the shape, using a single value.",
            "If the colour is not between 0 and 255 an error will be thrown"
          ],
          "params": [
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue between 0 - 255"
            }
          ],
          "examples": [
            "shape.setBlue(34);"
          ]
        },
        {
          "name": "setColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using a single value, this",
            "function also has a sibling named `setColor()` that has the same functionality.",
            "The colour generally should be hexadecimal in the form 0xRRGGBB"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour you want to set"
            }
          ],
          "examples": [
            "shape.setColour(0xFF0000);"
          ]
        },
        {
          "name": "setColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using three values this function",
            "also has a sibling named `setColor()` that has the same functionality.",
            "If the colours are not between 0 and 255 an error will be thrown"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "examples": [
            "shape.setColour(34, 55, 0);"
          ]
        },
        {
          "name": "setGreen",
          "is_arbitrary": false,
          "desc": [
            "This sets the green value of the shape, using a single value.",
            "If the colour is not between 0 and 255 an error will be thrown"
          ],
          "params": [
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green between 0 - 255"
            }
          ],
          "examples": [
            "shape.setGreen(34);"
          ]
        },
        {
          "name": "setOpacity",
          "is_arbitrary": false,
          "desc": [
            "This sets the opacity of the shape, using a single value.",
            "If the colour is not between 0 and 255 an error will be thrown"
          ],
          "params": [
            {
              "name": "opacity",
              "type": "Number",
              "desc": "the amount of opacity between 0 - 255"
            }
          ],
          "examples": [
            "shape.setOpacity(34);"
          ]
        },
        {
          "name": "setRed",
          "is_arbitrary": false,
          "desc": [
            "This sets the red value of the shape, using a single value.",
            "If the colour is not between 0 and 255 an error will be thrown"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red between 0 - 255"
            }
          ],
          "examples": [
            "shape.setRed(34);"
          ]
        },
        {
          "name": "setRenderThroughBlocks",
          "is_arbitrary": false,
          "desc": [
            "This sets whether the shape should render through blocks"
          ],
          "params": [
            {
              "name": "boolean",
              "type": "Boolean",
              "desc": "whether the shape should render through blocks"
            }
          ],
          "examples": [
            "shape.setRenderThroughBlocks(true);"
          ]
        },
        {
          "name": "setScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the scale of the shape"
          ],
          "params": [
            {
              "name": "xScale",
              "type": "Number",
              "desc": "the x scale of the shape"
            },
            {
              "name": "yScale",
              "type": "Number",
              "desc": "the y scale of the shape"
            },
            {
              "name": "zScale",
              "type": "Number",
              "desc": "the z scale of the shape"
            }
          ],
          "examples": [
            "shape.setScale(1.5, 2.5, 3.5);"
          ]
        },
        {
          "name": "setTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the tilt of the shape"
          ],
          "params": [
            {
              "name": "xTilt",
              "type": "Number",
              "desc": "the x tilt"
            },
            {
              "name": "yTilt",
              "type": "Number",
              "desc": "the y tilt"
            },
            {
              "name": "zTilt",
              "type": "Number",
              "desc": "the z tilt"
            }
          ],
          "examples": [
            "shape.setTilt(100, 0, 80);"
          ]
        },
        {
          "name": "setXScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the x scale of the shape"
          ],
          "params": [
            {
              "name": "xScale",
              "type": "Number",
              "desc": "the x scale of the shape"
            }
          ],
          "examples": [
            "shape.setXScale(1.5);"
          ]
        },
        {
          "name": "setXTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the x tilt of the shape"
          ],
          "params": [
            {
              "name": "xTilt",
              "type": "Number",
              "desc": "the x tilt"
            }
          ],
          "examples": [
            "shape.setXTilt(100);"
          ]
        },
        {
          "name": "setYScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the y scale of the shape"
          ],
          "params": [
            {
              "name": "yScale",
              "type": "Number",
              "desc": "the y scale of the shape"
            }
          ],
          "examples": [
            "shape.setYScale(2.5);"
          ]
        },
        {
          "name": "setYTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the y tilt of the shape"
          ],
          "params": [
            {
              "name": "yTilt",
              "type": "Number",
              "desc": "the y tilt"
            }
          ],
          "examples": [
            "shape.setYTilt(0);"
          ]
        },
        {
          "name": "setZScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the z scale of the shape"
          ],
          "params": [
            {
              "name": "zScale",
              "type": "Number",
              "desc": "the z scale of the shape"
            }
          ],
          "examples": [
            "shape.setZScale(3.5);"
          ]
        },
        {
          "name": "setZTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the z tilt of the shape"
          ],
          "params": [
            {
              "name": "zTilt",
              "type": "Number",
              "desc": "the z tilt"
            }
          ],
          "examples": [
            "shape.setZTilt(80);"
          ]
        },
        {
          "name": "shouldRenderThroughBlocks",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the shape should render through blocks"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the shape should render through blocks"
          },
          "examples": [
            "shape.shouldRenderThroughBlocks();"
          ]
        },
        {
          "name": "stopRendering",
          "is_arbitrary": false,
          "desc": [
            "This stops the shape from rendering"
          ],
          "examples": [
            "shape.stopRendering();"
          ]
        }
      ],
      "static_methods": []
    },
    "SphereShape": {
      "name": "SphereShape",
      "desc": [
        "This class is used to create a sphere shape which can be rendered in the world."
      ],
      "import_path": "Minecraft",
      "superclass": "CentredShape",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new sphere shape"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The position of the sphere"
            }
          ],
          "examples": [
            "new SphereShape(new Pos(0, 10, 0));"
          ]
        },
        {
          "desc": [
            "This creates a new sphere shape"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "The x position of the sphere"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "The y position of the sphere"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "The z position of the sphere"
            }
          ],
          "examples": [
            "new SphereShape(0, 10, 0);"
          ]
        }
      ],
      "methods": [
        {
          "name": "getSteps",
          "is_arbitrary": false,
          "desc": [
            "This gets the number of steps the sphere will take to render"
          ],
          "returns": {
            "type": "Number",
            "desc": "The number of steps"
          },
          "examples": [
            "sphere.getSteps();"
          ]
        },
        {
          "name": "setSteps",
          "is_arbitrary": false,
          "desc": [
            "This sets the number of steps the sphere will take to render"
          ],
          "params": [
            {
              "name": "steps",
              "type": "Number",
              "desc": "The number of steps"
            }
          ],
          "examples": [
            "sphere.setSteps(30);"
          ]
        }
      ],
      "static_methods": []
    },
    "String": {
      "name": "String",
      "desc": [
        "This class represents an array of characters to form a string.",
        "This class cannot be instantiated directly, instead use the literal",
        "by using quotes. Strings are immutable in Arucas."
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new string object, not from the string pool, with the given string.",
            "This cannot be called directly, only from child classes"
          ],
          "examples": [
            "class ChildString: String {\n    ChildString(): super(\"example\");\n}"
          ]
        }
      ],
      "methods": [
        {
          "name": "capitalize",
          "is_arbitrary": false,
          "desc": [
            "This returns the string in capitalized form"
          ],
          "returns": {
            "type": "String",
            "desc": "the string in capitalized form"
          },
          "examples": [
            "'hello'.capitalize(); // 'Hello'"
          ]
        },
        {
          "name": "chars",
          "is_arbitrary": false,
          "desc": [
            "This makes a list of all the characters in the string"
          ],
          "returns": {
            "type": "List",
            "desc": "the list of characters"
          },
          "examples": [
            "'hello'.chars(); // ['h', 'e', 'l', 'l', 'o']"
          ]
        },
        {
          "name": "contains",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the string contains the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the string contains the given string"
          },
          "examples": [
            "'hello'.contains('lo'); // true"
          ]
        },
        {
          "name": "endsWith",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the string ends with the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the string ends with the given string"
          },
          "examples": [
            "'hello'.endsWith('lo'); // true"
          ]
        },
        {
          "name": "find",
          "is_arbitrary": false,
          "desc": [
            "This finds all matches of the regex in the string,",
            "this does not find groups, for that use `<String>.findGroups(regex)`"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex to search the string with"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list of all instances of the regex in the string"
          },
          "examples": [
            "'102i 1i'.find('([\\\\d+])i'); // ['2i', '1i']"
          ]
        },
        {
          "name": "findAll",
          "is_arbitrary": false,
          "desc": [
            "This finds all matches and groups of a regex in the matches in the string",
            "the first group of each match will be the complete match and following",
            "will be the groups of the regex, a group may be empty if it doesn't exist"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex to search the string with"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "a list of match groups, which is a list containing matches"
          },
          "examples": [
            "'102i 1i'.findAll('([\\\\d+])i'); // [['2i', '2'], ['1i', '1']]"
          ]
        },
        {
          "name": "format",
          "is_arbitrary": true,
          "desc": [
            "This formats the string using the given arguments.",
            "This internally uses the Java String.format() method.",
            "For how to use see here: https://www.javatpoint.com/java-string-format"
          ],
          "params": [
            {
              "name": "objects...",
              "type": "Object",
              "desc": "the objects to insert"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the formatted string"
          },
          "examples": [
            "'%s %s'.format('hello', 'world'); // 'hello world'"
          ]
        },
        {
          "name": "length",
          "is_arbitrary": false,
          "desc": [
            "This returns the length of the string"
          ],
          "returns": {
            "type": "Number",
            "desc": "the length of the string"
          },
          "examples": [
            "'hello'.length(); // 5"
          ]
        },
        {
          "name": "lowercase",
          "is_arbitrary": false,
          "desc": [
            "This returns the string in lowercase"
          ],
          "returns": {
            "type": "String",
            "desc": "the string in lowercase"
          },
          "examples": [
            "'HELLO'.lowercase(); // 'hello'"
          ]
        },
        {
          "name": "matches",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the string matches the given regex"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex to match the string with"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the string matches the given regex"
          },
          "examples": [
            "'foo'.matches('f.*'); // true"
          ]
        },
        {
          "name": "replaceAll",
          "is_arbitrary": false,
          "desc": [
            "This replaces all the instances of a regex with the replace string"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex you want to replace"
            },
            {
              "name": "replacement",
              "type": "String",
              "desc": "the string you want to replace it with"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the modified string"
          },
          "examples": [
            "'hello'.replaceAll('l', 'x'); // 'hexxo'"
          ]
        },
        {
          "name": "replaceFirst",
          "is_arbitrary": false,
          "desc": [
            "This replaces the first instance of a regex with the replace string"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex you want to replace"
            },
            {
              "name": "replacement",
              "type": "String",
              "desc": "the string you want to replace it with"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the modified string"
          },
          "examples": [
            "'hello'.replaceFirst('l', 'x'); // 'hexlo'"
          ]
        },
        {
          "name": "reverse",
          "is_arbitrary": false,
          "desc": [
            "This returns the string in reverse"
          ],
          "returns": {
            "type": "String",
            "desc": "the string in reverse"
          },
          "examples": [
            "'hello'.reverse(); // 'olleh'"
          ]
        },
        {
          "name": "split",
          "is_arbitrary": false,
          "desc": [
            "This splits the string into a list of strings based on a regex"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex to split the string with"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list of strings"
          },
          "examples": [
            "'foo/bar/baz'.split('/');"
          ]
        },
        {
          "name": "startsWith",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the string starts with the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the string starts with the given string"
          },
          "examples": [
            "'hello'.startsWith('he'); // true"
          ]
        },
        {
          "name": "strip",
          "is_arbitrary": false,
          "desc": [
            "This strips the whitespace from the string"
          ],
          "returns": {
            "type": "String",
            "desc": "the stripped string"
          },
          "examples": [
            "'  hello  '.strip(); // 'hello'"
          ]
        },
        {
          "name": "subString",
          "is_arbitrary": false,
          "desc": [
            "This returns a substring of the string"
          ],
          "params": [
            {
              "name": "from",
              "type": "Number",
              "desc": "the start index (inclusive)"
            },
            {
              "name": "to",
              "type": "Number",
              "desc": "the end index (exclusive)"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the substring"
          },
          "examples": [
            "'hello'.subString(1, 3); // 'el'"
          ]
        },
        {
          "name": "toList",
          "is_arbitrary": false,
          "deprecated": [
            "Use '<String>.chars()' instead"
          ],
          "desc": [
            "This makes a list of all the characters in the string"
          ],
          "returns": {
            "type": "List",
            "desc": "the list of characters"
          },
          "examples": [
            "'hello'.toList(); // ['h', 'e', 'l', 'l', 'o']"
          ]
        },
        {
          "name": "toNumber",
          "is_arbitrary": false,
          "desc": [
            "This tries to convert the string to a number.",
            "This method can convert hex or denary into numbers.",
            "If the string is not a number, it will throw an error"
          ],
          "returns": {
            "type": "Number",
            "desc": "the number"
          },
          "examples": [
            "'99'.toNumber(); // 99"
          ]
        },
        {
          "name": "uppercase",
          "is_arbitrary": false,
          "desc": [
            "This returns the string in uppercase"
          ],
          "returns": {
            "type": "String",
            "desc": "the string in uppercase"
          },
          "examples": [
            "'hello'.uppercase(); // 'HELLO'"
          ]
        }
      ],
      "static_methods": []
    },
    "Task": {
      "name": "Task",
      "desc": [
        "This class is used to create tasks that can be chained and",
        "run asynchronously. Tasks can be executed as many times as needed",
        "and chained tasks will be executed in the order they are created."
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new empty task"
          ],
          "examples": [
            "task = new Task();"
          ]
        }
      ],
      "methods": [
        {
          "name": "loopIf",
          "is_arbitrary": false,
          "desc": [
            "This loops the task, essentially just calling 'task.run', the",
            "task will run async from the original task, the loop will continue",
            "if the function provided returns true"
          ],
          "params": [
            {
              "name": "boolSupplier",
              "type": "Function",
              "desc": "the function to check if the loop should run"
            }
          ],
          "returns": {
            "type": "Task",
            "desc": "the task, this allows for chaining"
          },
          "examples": [
            "task = new Task()\n    .then(fun() print(\"hello\"))\n    .then(fun() print(\" \"))\n    .then(fun() print(\"world\"))\n    .loopIf(fun() true); // Always loop"
          ]
        },
        {
          "name": "run",
          "is_arbitrary": false,
          "desc": [
            "This runs the task asynchronously and returns a future which can be awaited.",
            "The last function in the task will be used as the return value for the future"
          ],
          "returns": {
            "type": "Future",
            "desc": "the future value that can be awaited"
          },
          "examples": [
            "task = new Task()\n    .then(fun() print(\"hello\"))\n    .then(fun() print(\" \"))\n    .then(fun() print(\"world\"))\n    .then(fun() 10);\nf = task.run(); // prints 'hello world'\nprint(f.await()); // prints 10"
          ]
        },
        {
          "name": "then",
          "is_arbitrary": false,
          "desc": [
            "This adds a function to the end of the current task.",
            "If this is the last function in the task then the return",
            "value of the function will be the return value of the task."
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to run at the end of the task"
            }
          ],
          "returns": {
            "type": "Task",
            "desc": "the task, this allows for chaining"
          },
          "examples": [
            "task = new Task()\n    .then(fun() print(\"hello\"))\n    .then(fun() print(\" \"))\n    .then(fun() print(\"world\"))\n    .then(fun() 10);\nf = task.run(); // prints 'hello world'\nprint(f.await()); // prints 10"
          ]
        }
      ],
      "static_methods": []
    },
    "Text": {
      "name": "Text",
      "desc": [
        "This class is used to create formatted strings used inside Minecraft."
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "append",
          "is_arbitrary": false,
          "desc": [
            "This allows you to append a text instance to another text instance"
          ],
          "params": [
            {
              "name": "otherText",
              "type": "Text",
              "desc": "the text instance to append to"
            }
          ],
          "returns": {
            "type": "Text",
            "desc": "the text instance with the appended text"
          },
          "examples": [
            "Text.of('Hello').append(Text.of(' world!'));"
          ]
        },
        {
          "name": "format",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add a formatting to a text instance.",
            "A list of formatting names can be found [here](https://minecraft.fandom.com/wiki/Formatting_codes).",
            "This will throw an error if the formatting is invalid"
          ],
          "params": [
            {
              "name": "formatting",
              "type": "String",
              "desc": "the name of the formatting"
            }
          ],
          "returns": {
            "type": "Text",
            "desc": "the text instance with the formatting added"
          },
          "examples": [
            "text.format('DARK_RED').format('BOLD');"
          ]
        },
        {
          "name": "withClickEvent",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add a click event to a text instance.",
            "The possible events are: 'open_url', 'open_file', 'run_command', 'suggest_command', 'copy_to_clipboard', 'run_function'.",
            "This will throw an error if the action is invalid"
          ],
          "params": [
            {
              "name": "event",
              "type": "String",
              "desc": "the name of the event"
            },
            {
              "name": "value",
              "type": "String",
              "desc": "the value associated with the event"
            }
          ],
          "returns": {
            "type": "Text",
            "desc": "the text instance with the click event"
          },
          "examples": [
            "text = Text.of(\"Hello World!\");\n\n// Examples of click events\ntext.withClickEvent(\"open_url\", \"https://youtu.be/dQw4w9WgXcQ\");\ntext.withClickEvent(\"open_file\", \"C:/Users/user/Desktop/thing.txt\");\ntext.withClickEvent(\"run_command\", \"/gamemode creative\");\ntext.withClickEvent(\"suggest_command\", \"/gamemode survival\");\ntext.withClickEvent(\"copy_to_clipboard\", \"Ooops!\");\ntext.withClickEvent(\"run_function\", fun() {\n    print(\"Text was clicked!\");\n});"
          ]
        },
        {
          "name": "withHoverEvent",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add a hover event to a text instance.",
            "The possible events are: 'show_text', 'show_item', 'show_entity'.",
            "This will throw an error if the event is invalid"
          ],
          "params": [
            {
              "name": "event",
              "type": "String",
              "desc": "the name of the event"
            },
            {
              "name": "value",
              "type": "Object",
              "desc": "the value associated with the event"
            }
          ],
          "returns": {
            "type": "Text",
            "desc": "the text instance with the hover event"
          },
          "examples": [
            "text = Text.of(\"Hello World!\");\n\n// Examples of hover events\ntext.withHoverEvent(\"show_text\", Text.of(\"Hello world!\"));\ntext.withHoverEvent(\"show_item\", Material.DIAMOND_SWORD.asItemStack());\ntext.withHoverEvent(\"show_entity\", Player.get());"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This converts a string into a text instance"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "The string to convert into a text instance"
            }
          ],
          "returns": {
            "type": "Text",
            "desc": "the text instance from the string"
          },
          "examples": [
            "Text.of('Hello World!');"
          ]
        },
        {
          "name": "parse",
          "is_arbitrary": false,
          "desc": [
            "This converts a text json into a text instance"
          ],
          "params": [
            {
              "name": "textJson",
              "type": "String",
              "desc": "The string in json format, or a Json value itself"
            }
          ],
          "returns": {
            "type": "Text",
            "desc": "the text instance from the json"
          },
          "examples": [
            "Text.parse('{\"text\":\"Hello World!\",\"color\":\"white\",\"italic\":\"true\"}');"
          ]
        }
      ]
    },
    "Thread": {
      "name": "Thread",
      "desc": [
        "This class allows to to create threads for async executions.",
        "This class cannot be instantiated or extended. To create a new",
        "thread use the static method 'Thread.runThreaded()'"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "freeze",
          "is_arbitrary": false,
          "desc": [
            "This serves the same purpose as 'Thread.freeze()' however this works on the current",
            "thread instance, unlike 'Thread.freeze()' this cannot throw an error."
          ],
          "examples": [
            "Thread.getCurrentThread().freeze()"
          ]
        },
        {
          "name": "getAge",
          "is_arbitrary": false,
          "desc": [
            "This gets the age of the thread in milliseconds"
          ],
          "returns": {
            "type": "Number",
            "desc": "the age of the thread"
          },
          "examples": [
            "Thread.getCurrentThread().getAge();"
          ]
        },
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This gets the name of the thread"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the thread"
          },
          "examples": [
            "Thread.getCurrentThread().getName();"
          ]
        },
        {
          "name": "isAlive",
          "is_arbitrary": false,
          "desc": [
            "This checks if the thread is alive (still running)"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the thread is alive, false if not"
          },
          "examples": [
            "Thread.getCurrentThread().isAlive();"
          ]
        },
        {
          "name": "stop",
          "is_arbitrary": false,
          "desc": [
            "This stops the thread from executing, anything that was running will be instantly stopped.",
            "This method will fail if the thread is not alive"
          ],
          "examples": [
            "Thread.getCurrentThread().stop();"
          ]
        },
        {
          "name": "thaw",
          "is_arbitrary": false,
          "desc": [
            "This will thaw the thread from its frozen state, if the thread is not frozen then an",
            "error will be thrown"
          ],
          "examples": [
            "Thread.getCurrentThread().thaw();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "freeze",
          "is_arbitrary": false,
          "desc": [
            "This freezes the current thread, stops anything else from executing on the thread.",
            "This may fail if you try to freeze a non Arucas Thread in which case an error will be thrown"
          ],
          "examples": [
            "Thread.freeze();"
          ]
        },
        {
          "name": "getCurrentThread",
          "is_arbitrary": false,
          "desc": [
            "This gets the current thread that the code is running on,",
            "this may throw an error if the thread is not safe to get,",
            "which happens when running outside of Arucas Threads"
          ],
          "returns": {
            "type": "Thread",
            "desc": "the current thread"
          },
          "examples": [
            "Thread.getCurrentThread();"
          ]
        },
        {
          "name": "runThreaded",
          "is_arbitrary": false,
          "desc": [
            "This starts a new thread and runs a function on it, the thread will",
            "terminate when it finishes executing the function, threads will stop automatically",
            "when the program stops, you are also able to stop threads by using the Thread object"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function you want to run on a new thread"
            }
          ],
          "returns": {
            "type": "Thread",
            "desc": "the new thread"
          },
          "examples": [
            "Thread.runThreaded(fun() {\n    print(\"Running asynchronously!\");\n});"
          ]
        },
        {
          "name": "runThreaded",
          "is_arbitrary": false,
          "desc": [
            "This starts a new thread with a specific name and runs a function on it"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "the name of the thread"
            },
            {
              "name": "function",
              "type": "Function",
              "desc": "the function you want to run on a new thread"
            }
          ],
          "returns": {
            "type": "Thread",
            "desc": "the new thread"
          },
          "examples": [
            "Thread.runThreaded(\"MyThread\", fun() {\n    print(\"Running asynchronously on MyThread\");\n});"
          ]
        }
      ]
    },
    "Trade": {
      "name": "Trade",
      "desc": [
        "This class represents a trade offer, and allows you to get information about it."
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getAdjustedFirstBuyItem",
          "is_arbitrary": false,
          "desc": [
            "Gets the first item that the merchant will buy, adjusted by the price multiplier"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the first item to buy"
          },
          "examples": [
            "trade.getAdjustedFirstBuyItem();"
          ]
        },
        {
          "name": "getFirstBuyItem",
          "is_arbitrary": false,
          "desc": [
            "Gets the first item that the merchant will buy"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the first item to buy"
          },
          "examples": [
            "trade.getFirstBuyItem();"
          ]
        },
        {
          "name": "getMaxUses",
          "is_arbitrary": false,
          "desc": [
            "Gets the maximum number of times the trade can be used"
          ],
          "returns": {
            "type": "Number",
            "desc": "the maximum number of uses"
          },
          "examples": [
            "trade.getMaxUses();"
          ]
        },
        {
          "name": "getPriceMultiplier",
          "is_arbitrary": false,
          "desc": [
            "Gets the price multiplier which is used to adjust the price of the first buy item"
          ],
          "returns": {
            "type": "Number",
            "desc": "the price multiplier"
          },
          "examples": [
            "trade.getPriceMultiplier();"
          ]
        },
        {
          "name": "getSecondBuyItem",
          "is_arbitrary": false,
          "desc": [
            "Gets the second item that the merchant will buy"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the second item to buy"
          },
          "examples": [
            "trade.getSecondBuyItem();"
          ]
        },
        {
          "name": "getSellItem",
          "is_arbitrary": false,
          "desc": [
            "Gets the item that is being sold by the merchant"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the item for sale"
          },
          "examples": [
            "trade.getSellItem();"
          ]
        },
        {
          "name": "getSpecialPrice",
          "is_arbitrary": false,
          "desc": [
            "This gets the special price which is used to adjust the price of the first buy item"
          ],
          "returns": {
            "type": "Number",
            "desc": "the special price"
          },
          "examples": [
            "trade.getSpecialPrice();"
          ]
        },
        {
          "name": "getUses",
          "is_arbitrary": false,
          "desc": [
            "Gets the number of times the trade has been used"
          ],
          "returns": {
            "type": "Number",
            "desc": "the number of uses"
          },
          "examples": [
            "trade.getUses();"
          ]
        },
        {
          "name": "getXpReward",
          "is_arbitrary": false,
          "desc": [
            "Returns the amount of xp the villager will get, which",
            "goes towards them levelling up, from trading this offer"
          ],
          "returns": {
            "type": "Number",
            "desc": "the amount of xp"
          },
          "examples": [
            "trade.getXpReward"
          ]
        }
      ],
      "static_methods": []
    },
    "Type": {
      "name": "Type",
      "desc": [
        "This class lets you get the type of another class"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This gets the name of the type"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the type"
          },
          "examples": [
            "String.type.getName();"
          ]
        },
        {
          "name": "inheritsFrom",
          "is_arbitrary": false,
          "desc": [
            "This checks whether a type is a subtype of another type"
          ],
          "params": [
            {
              "name": "type",
              "type": "Type",
              "desc": "the other type you want to check against"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the type is of that type"
          },
          "examples": [
            "String.type.inheritsFrom(Number.type);"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This gets the specific type of a value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to get the type of"
            }
          ],
          "returns": {
            "type": "Type",
            "desc": "the type of the value"
          },
          "examples": [
            "Type.of(0);"
          ]
        }
      ]
    },
    "World": {
      "name": "World",
      "desc": [
        "This class represents worlds, and allows you to interact with things inside of them."
      ],
      "import_path": "Minecraft",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getAllEntities",
          "is_arbitrary": false,
          "desc": [
            "This will get all entities in the world"
          ],
          "returns": {
            "type": "List",
            "desc": "a list of all entities"
          },
          "examples": [
            "world.getAllEntities();"
          ]
        },
        {
          "name": "getAllOtherPlayers",
          "is_arbitrary": false,
          "deprecated": [
            "Use '<World>.getAllPlayers()' instead"
          ],
          "desc": [
            "This will get all other players in the world"
          ],
          "returns": {
            "type": "List",
            "desc": "a list of all other players"
          },
          "examples": [
            "world.getAllOtherPlayers();"
          ]
        },
        {
          "name": "getAllPlayers",
          "is_arbitrary": false,
          "desc": [
            "This function gets all players in the world that are loaded"
          ],
          "returns": {
            "type": "List",
            "desc": "all players in the world"
          },
          "examples": [
            "world.getAllPlayers();"
          ]
        },
        {
          "name": "getArea",
          "is_arbitrary": false,
          "deprecated": [
            "This function is memory intensive, you should use `<World>.getPositions(pos1, pos2)`"
          ],
          "desc": [
            "This gets a list of all block positions between the two positions"
          ],
          "params": [
            {
              "name": "pos1",
              "type": "Pos",
              "desc": "the first position"
            },
            {
              "name": "pos2",
              "type": "Pos",
              "desc": "the second position"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list of positions"
          },
          "examples": [
            "world.getArea(new Pos(0, 100, 0), new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "getAreaOfBlocks",
          "is_arbitrary": false,
          "deprecated": [
            "This function is memory intensive, you should use `<World>.getBlocks(pos1, pos2)`"
          ],
          "desc": [
            "This gets a list of all blocks (with positions) between the two positions"
          ],
          "params": [
            {
              "name": "pos1",
              "type": "Pos",
              "desc": "the first position"
            },
            {
              "name": "pos2",
              "type": "Pos",
              "desc": "the second position"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list of blocks"
          },
          "examples": [
            "world.getAreaOfBlocks(new Pos(0, 100, 0), new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "getBiomeAt",
          "is_arbitrary": false,
          "desc": [
            "This function gets the biome at the given coordinates"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position"
            }
          ],
          "returns": {
            "type": "Biome",
            "desc": "the biome at the given coordinates"
          },
          "examples": [
            "world.getBiomeAt(new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "getBiomeAt",
          "is_arbitrary": false,
          "desc": [
            "This function gets the biome at the given coordinates"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x coordinate"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y coordinate"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z coordinate"
            }
          ],
          "returns": {
            "type": "Biome",
            "desc": "the biome at the given coordinates"
          },
          "examples": [
            "world.getBiomeAt(0, 100, 0);"
          ]
        },
        {
          "name": "getBlockAt",
          "is_arbitrary": false,
          "desc": [
            "This function gets the block at the given coordinates"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position"
            }
          ],
          "returns": {
            "type": "Block",
            "desc": "the block at the given coordinates"
          },
          "examples": [
            "world.getBlockAt(new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "getBlockAt",
          "is_arbitrary": false,
          "desc": [
            "This function gets the block at the given coordinates"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x coordinate"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y coordinate"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z coordinate"
            }
          ],
          "returns": {
            "type": "Block",
            "desc": "the block at the given coordinates"
          },
          "examples": [
            "world.getBlockAt(0, 100, 0);"
          ]
        },
        {
          "name": "getBlockLight",
          "is_arbitrary": false,
          "desc": [
            "Gets the block light at the given position ignoring sky light"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the light level between 0 - 15"
          },
          "examples": [
            "world.getBlockLight(new Pos(0, 0, 0));"
          ]
        },
        {
          "name": "getBlocks",
          "is_arbitrary": false,
          "desc": [
            "This gets an iterator for all blocks (and positions) between two positions"
          ],
          "params": [
            {
              "name": "pos1",
              "type": "Pos",
              "desc": "the first position"
            },
            {
              "name": "pos2",
              "type": "Pos",
              "desc": "the second position"
            }
          ],
          "returns": {
            "type": "Iterable",
            "desc": "the iterator for the blocks"
          },
          "examples": [
            "foreach (block : world.getBlocks(new Pos(0, 100, 100), new Pos(0, 100, 0)));"
          ]
        },
        {
          "name": "getBlocksFromCentre",
          "is_arbitrary": false,
          "desc": [
            "This gets an iterator for all blocks (and positions) between two positions.",
            "The iterator iterates from the centre outwards"
          ],
          "params": [
            {
              "name": "centre",
              "type": "Pos",
              "desc": "the central position"
            },
            {
              "name": "xRange",
              "type": "Number",
              "desc": "how far to iterate on the x axis"
            },
            {
              "name": "yRange",
              "type": "Number",
              "desc": "how far to iterate on the y axis"
            },
            {
              "name": "zRange",
              "type": "Number",
              "desc": "how far to iterate on the z axis"
            }
          ],
          "returns": {
            "type": "Iterable",
            "desc": "the iterator for the blocks"
          },
          "examples": [
            "foreach (block : world.getBlocksFromCentre(new Pos(0, 100, 100), 10, 5, 60));"
          ]
        },
        {
          "name": "getClosestPlayer",
          "is_arbitrary": false,
          "desc": [
            "This will get the closest player to another entity in the world"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "the entity to get the closest player to"
            },
            {
              "name": "maxDistance",
              "type": "Number",
              "desc": "the maximum distance to search for a player in blocks"
            }
          ],
          "returns": {
            "type": "Player",
            "desc": "the closest player, null if not found"
          },
          "examples": [
            "world.getClosestPlayer(Player.get(), 100);"
          ]
        },
        {
          "name": "getDimensionName",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'world.getId()' instead"
          ],
          "desc": [
            "This will get the id of the world"
          ],
          "returns": {
            "type": "String",
            "desc": "the id of the world, for example: 'overworld'"
          },
          "examples": [
            "world.getDimensionName();"
          ]
        },
        {
          "name": "getEmittedRedstonePower",
          "is_arbitrary": false,
          "desc": [
            "Gets the emitted restone power at the given position and direction"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction to check, for example 'north', 'east', 'up', etc."
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the emitted redstone power"
          },
          "examples": [
            "world.getEmittedRedstonePower(new Pos(0, 100, 0), 'north');"
          ]
        },
        {
          "name": "getEmittedRedstonePower",
          "is_arbitrary": false,
          "desc": [
            "Gets the emitted restone power at the given position and direction"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position of the block"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position of the block"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position of the block"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction to check, for example 'north', 'east', 'up', etc."
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the emitted redstone power"
          },
          "examples": [
            "world.getEmittedRedstonePower(0, 100, 0, 'north');"
          ]
        },
        {
          "name": "getEntityFromId",
          "is_arbitrary": false,
          "desc": [
            "This will get an entity from the given entity id"
          ],
          "params": [
            {
              "name": "entityId",
              "type": "Number",
              "desc": "the entity id"
            }
          ],
          "returns": {
            "type": "Entity",
            "desc": "the entity, null if not found"
          },
          "examples": [
            "world.getEntityFromId(1);"
          ]
        },
        {
          "name": "getFullId",
          "is_arbitrary": false,
          "desc": [
            "This will get the full id of the world"
          ],
          "returns": {
            "type": "String",
            "desc": "the full id of the world, for example: 'minecraft:overworld'"
          },
          "examples": [
            "world.getFullId();"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This will get the id of the world"
          ],
          "returns": {
            "type": "String",
            "desc": "the id of the world, for example: 'overworld'"
          },
          "examples": [
            "world.getId();"
          ]
        },
        {
          "name": "getLight",
          "is_arbitrary": false,
          "desc": [
            "Gets the light level at the given position, takes the max of either sky light of block light"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the light level between 0 - 15"
          },
          "examples": [
            "world.getLight(new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "getLight",
          "is_arbitrary": false,
          "desc": [
            "Gets the light level at the given position, takes the max of either sky light of block light"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position of the block"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position of the block"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position of the block"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the light level between 0 - 15"
          },
          "examples": [
            "world.getLight(0, 100, 0);"
          ]
        },
        {
          "name": "getOtherPlayer",
          "is_arbitrary": false,
          "deprecated": [
            "Use '<World>.getPlayer(name)' instead"
          ],
          "desc": [
            "This gets another player from the given username"
          ],
          "params": [
            {
              "name": "username",
              "type": "String",
              "desc": "the username of the other player"
            }
          ],
          "returns": {
            "type": "Player",
            "desc": "the other player, null if not found"
          },
          "examples": [
            "world.getOtherPlayer('senseiwells');"
          ]
        },
        {
          "name": "getPlayer",
          "is_arbitrary": false,
          "desc": [
            "This function gets the player with the given name"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "the name of the player"
            }
          ],
          "returns": {
            "type": "Player",
            "desc": "the player with the given name"
          },
          "examples": [
            "world.getPlayer('player');"
          ]
        },
        {
          "name": "getPositions",
          "is_arbitrary": false,
          "desc": [
            "This gets an iterator for all positions between two positions"
          ],
          "params": [
            {
              "name": "pos1",
              "type": "Pos",
              "desc": "the first position"
            },
            {
              "name": "pos2",
              "type": "Pos",
              "desc": "the second position"
            }
          ],
          "returns": {
            "type": "Iterable",
            "desc": "the iterator for the positions"
          },
          "examples": [
            "foreach (pos : world.getPositions(new Pos(0, 100, 100), new Pos(0, 100, 0)));"
          ]
        },
        {
          "name": "getPositionsFromCentre",
          "is_arbitrary": false,
          "desc": [
            "This gets an iterator for all positions between two positions.",
            "The iterator iterates from the centre outwards"
          ],
          "params": [
            {
              "name": "centre",
              "type": "Pos",
              "desc": "the central position"
            },
            {
              "name": "xRange",
              "type": "Number",
              "desc": "how far to iterate on the x axis"
            },
            {
              "name": "yRange",
              "type": "Number",
              "desc": "how far to iterate on the y axis"
            },
            {
              "name": "zRange",
              "type": "Number",
              "desc": "how far to iterate on the z axis"
            }
          ],
          "returns": {
            "type": "Iterable",
            "desc": "the iterator for the positions"
          },
          "examples": [
            "foreach (pos : world.getPositionsFromCentre(new Pos(0, 100, 100), 10, 10, 10));"
          ]
        },
        {
          "name": "getSkyLight",
          "is_arbitrary": false,
          "desc": [
            "Gets the sky light at the given position ignoring block light"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the light level between 0 - 15"
          },
          "examples": [
            "world.getSkyLight(new Pos(0, 0, 0));"
          ]
        },
        {
          "name": "getTimeOfDay",
          "is_arbitrary": false,
          "desc": [
            "This will get the time of day of the world",
            "info on the time of day [here](https://minecraft.fandom.com/wiki/Daylight_cycle)"
          ],
          "returns": {
            "type": "Number",
            "desc": "the time of day of the world, between 0 and 24000"
          },
          "examples": [
            "world.getTimeOfDay();"
          ]
        },
        {
          "name": "isAir",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the block at the given position is air"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the block is air"
          },
          "examples": [
            "world.isAir(new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "isAir",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the block at the given position is air"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position of the block"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position of the block"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position of the block"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the block is air"
          },
          "examples": [
            "world.isAir(0, 100, 0);"
          ]
        },
        {
          "name": "isLoaded",
          "is_arbitrary": false,
          "desc": [
            "This function returns loaded state of given coordinates(client side)"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the block is loaded at the given coordinates"
          },
          "examples": [
            "world.isLoaded(new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "isRaining",
          "is_arbitrary": false,
          "desc": [
            "This will check if the world is currently raining"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the world is currently raining"
          },
          "examples": [
            "world.isRaining();"
          ]
        },
        {
          "name": "isThundering",
          "is_arbitrary": false,
          "desc": [
            "This will check if the world is currently thundering"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the world is currently thundering"
          },
          "examples": [
            "world.isThundering();"
          ]
        },
        {
          "name": "renderParticle",
          "is_arbitrary": false,
          "desc": [
            "This will render a particle in the world, you can find a list of all",
            "the particle ids [here](https://minecraft.fandom.com/wiki/Java_Edition_data_values#Particles),",
            "this will throw an error if the id is invalid"
          ],
          "params": [
            {
              "name": "particleId",
              "type": "String",
              "desc": "the id of the particle"
            },
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the particle"
            }
          ],
          "examples": [
            "world.renderParticle('end_rod', pos);"
          ]
        },
        {
          "name": "renderParticle",
          "is_arbitrary": false,
          "desc": [
            "This will render a particle in the world, you can find a list of all",
            "the particle ids [here](https://minecraft.fandom.com/wiki/Java_Edition_data_values#Particles),",
            "if the id is invalid it will throw an error"
          ],
          "params": [
            {
              "name": "particleId",
              "type": "String",
              "desc": "the id of the particle"
            },
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position of the particle"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position of the particle"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position of the particle"
            }
          ],
          "examples": [
            "world.renderParticle('end_rod', 10, 10, 10);"
          ]
        },
        {
          "name": "renderParticle",
          "is_arbitrary": false,
          "desc": [
            "This will render a particle in the world with a velocity, you can find a list of all",
            "the particle ids [here](https://minecraft.fandom.com/wiki/Java_Edition_data_values#Particles),",
            "this will throw an error if the id is invalid"
          ],
          "params": [
            {
              "name": "particleId",
              "type": "String",
              "desc": "the id of the particle"
            },
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the particle"
            },
            {
              "name": "velX",
              "type": "Number",
              "desc": "the velocity of the particle on the x axis"
            },
            {
              "name": "velY",
              "type": "Number",
              "desc": "the velocity of the particle on the y axis"
            },
            {
              "name": "velZ",
              "type": "Number",
              "desc": "the velocity of the particle on the z axis"
            }
          ],
          "examples": [
            "world.renderParticle('end_rod', pos, 0.5, 0.5, 0.5);"
          ]
        },
        {
          "name": "setGhostBlock",
          "is_arbitrary": false,
          "deprecated": [
            "This function is dangerous, use at your own risk"
          ],
          "desc": [
            "This sets a ghost block in the world as if it were a real block, may cause issues"
          ],
          "params": [
            {
              "name": "block",
              "type": "Block",
              "desc": "the block to set"
            },
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            }
          ],
          "examples": [
            "world.setGhostBlock(Material.BEDROCK.asBlock(), new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "setGhostBlock",
          "is_arbitrary": false,
          "deprecated": [
            "This function is dangerous, use at your own risk"
          ],
          "desc": [
            "This sets a ghost block in the world as if it were a real block, may cause issues"
          ],
          "params": [
            {
              "name": "block",
              "type": "Block",
              "desc": "the block to set"
            },
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position of the block"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position of the block"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position of the block"
            }
          ],
          "examples": [
            "world.setGhostBlock(Material.BEDROCK.asBlock(), 0, 100, 0);"
          ]
        }
      ],
      "static_methods": []
    }
  },
  "events": [
    {
      "name": "onAttackEntity",
      "description": "This event is fired when the player attacks an entity",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "desc": "the entity that was attacked"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onScriptPacket",
      "description": "This event is fired when a script packet is received from scarpet on the server",
      "params": [
        {
          "name": "packet",
          "type": "List",
          "desc": "a list of data that was received"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onCloseScreen",
      "description": "This event is fired when the player closes a screen",
      "params": [
        {
          "name": "screen",
          "type": "Screen",
          "desc": "the screen that was just closed"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onUse",
      "description": "This event is fired when the player uses",
      "cancellable": true
    },
    {
      "name": "onClientTick",
      "description": "The event is fired on every client tick",
      "cancellable": false
    },
    {
      "name": "onAttack",
      "description": "This event is fired when the player attacks",
      "cancellable": true
    },
    {
      "name": "onConnect",
      "description": "The event is fired when the player connects to a server",
      "params": [
        {
          "name": "player",
          "type": "Player",
          "desc": "the player entity"
        },
        {
          "name": "world",
          "type": "World",
          "desc": "the world the player joined"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onDimensionChange",
      "description": "This event is fired when the player changes their dimension",
      "params": [
        {
          "name": "world",
          "type": "World",
          "desc": "the new world"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onKeyRelease",
      "description": "This event is fired when a key is released",
      "params": [
        {
          "name": "key",
          "type": "String",
          "desc": "the key that was released"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onDeath",
      "description": "This event is fired when the player dies",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "desc": "the entity that killed the player, may be null"
        },
        {
          "name": "message",
          "type": "Text",
          "desc": "the death message"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onInteractItem",
      "description": "This event is fired when the player interacts with an item",
      "params": [
        {
          "name": "itemStack",
          "type": "ItemStack",
          "desc": "the item stack that was interacted with"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onDisconnect",
      "description": "This event is fired when the player disconnects from a server",
      "cancellable": false
    },
    {
      "name": "onInteractEntity",
      "description": "This event is fired when the player interacts with an entity",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "desc": "the entity that was interacted with"
        },
        {
          "name": "itemStack",
          "type": "ItemStack",
          "desc": "the item stack that was interacted with"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onEat",
      "description": "This event is fired when the player eats something",
      "params": [
        {
          "name": "food",
          "type": "ItemStack",
          "desc": "the item stack that was eaten"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onEntitySpawn",
      "description": "This event is fired when an entity spawns, this doesn't include mobs",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "desc": "the entity that was spawned"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onAttackBlock",
      "description": "This event is fired when the player attacks a block",
      "params": [
        {
          "name": "block",
          "type": "Block",
          "desc": "the block that was attacked"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onTotem",
      "description": "This event is fired when the player uses a totem",
      "cancellable": false
    },
    {
      "name": "onPlayerLook",
      "description": "This event is fired when the player changes their yaw and/or pitch",
      "params": [
        {
          "name": "yaw",
          "type": "Number",
          "desc": "the player's yaw"
        },
        {
          "name": "pitch",
          "type": "Number",
          "desc": "the player's pitch"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onAnvil",
      "description": "This event is fired when the player anvils an item",
      "params": [
        {
          "name": "first",
          "type": "ItemStack",
          "desc": "the first input"
        },
        {
          "name": "second",
          "type": "ItemStack",
          "desc": "the second input"
        },
        {
          "name": "result",
          "type": "ItemStack",
          "desc": "the result of the first and second input"
        },
        {
          "name": "newName",
          "type": "String",
          "desc": "the new name of the item stack"
        },
        {
          "name": "levelCost",
          "type": "Number",
          "desc": "the amount of xp required"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onDropItem",
      "description": "This event is fired when the player tries to drop an item",
      "params": [
        {
          "name": "itemStack",
          "type": "ItemStack",
          "desc": "the item that is trying to be dropped"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onClickSlot",
      "description": "This event is fired when the player clicks on a slot in their inventory",
      "params": [
        {
          "name": "slot",
          "type": "Number",
          "desc": "the slot number that was clicked"
        },
        {
          "name": "action",
          "type": "String",
          "desc": "ths action that was used"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onInteractBlock",
      "description": "This event is fired when the player interacts with a block",
      "params": [
        {
          "name": "block",
          "type": "Block",
          "desc": "the block the player is interacting with"
        },
        {
          "name": "itemStack",
          "type": "ItemStack",
          "desc": "the item stack that was interacted with"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onSendMessage",
      "description": "This event is fired when the player sends a message in chat",
      "params": [
        {
          "name": "message",
          "type": "String",
          "desc": "the message that was sent"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onHealthUpdate",
      "description": "This event is fired when the player's health changes",
      "params": [
        {
          "name": "health",
          "type": "Number",
          "desc": "the new health"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onFishBite",
      "description": "This event is fired when a fish bites the player's fishing rod",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "desc": "the fishing bobber entity"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onEntityRemoved",
      "description": "This event is fired when an entity is removed",
      "params": [
        {
          "name": "entity",
          "type": "Entity",
          "desc": "the entity that was removed"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onOpenScreen",
      "description": "This event is fired when the player opens a screen",
      "params": [
        {
          "name": "screen",
          "type": "Screen",
          "desc": "the screen that was just opened"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onPlayerJoin",
      "description": "This event is fired when a player joins the server",
      "params": [
        {
          "name": "name",
          "type": "String",
          "desc": "the player's name"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onBlockPlaced",
      "description": "This event is fired when the player places a block",
      "params": [
        {
          "name": "block",
          "type": "Block",
          "desc": "the block that was placed"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onMobSpawn",
      "description": "This event is fired when a mob spawns",
      "params": [
        {
          "name": "mob",
          "type": "LivingEntity",
          "desc": "the mob that was spawned"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onKeyPress",
      "description": "This event is fired when a key is pressed",
      "params": [
        {
          "name": "key",
          "type": "String",
          "desc": "the key that was pressed"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onClickRecipe",
      "description": "This event is fired when the player clicks on a recipe in the recipe book",
      "params": [
        {
          "name": "recipe",
          "type": "Recipe",
          "desc": "the recipe that was clicked"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onScriptEnd",
      "description": "This event is fired when the script is ends",
      "cancellable": false
    },
    {
      "name": "onMouseScroll",
      "description": "This event is fired when the player scrolls",
      "params": [
        {
          "name": "direction",
          "type": "Number",
          "desc": "either -1 or 1 depending on the scroll direction"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onPickBlock",
      "description": "This event is fired when the player picks a block with middle mouse",
      "params": [
        {
          "name": "itemStack",
          "type": "ItemStack",
          "desc": "the item stack that was picked"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onReceiveMessage",
      "description": "This event is fired when the player receives a message in chat",
      "params": [
        {
          "name": "uuid",
          "type": "String",
          "desc": "the sender's UUID"
        },
        {
          "name": "message",
          "type": "String",
          "desc": "the message that was received"
        }
      ],
      "cancellable": true
    },
    {
      "name": "onGamemodeChange",
      "description": "This event is fired when the player changes their gamemode",
      "params": [
        {
          "name": "gamemode",
          "type": "String",
          "desc": "the new gamemode"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onPlayerLeave",
      "description": "This event is fired when a player leaves the server",
      "params": [
        {
          "name": "name",
          "type": "String",
          "desc": "the player's name"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onPickUpItem",
      "description": "This event is fired when the player picks up an item",
      "params": [
        {
          "name": "itemStack",
          "type": "ItemStack",
          "desc": "the item"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onBlockBroken",
      "description": "This event is fired when the player breaks a new block",
      "params": [
        {
          "name": "block",
          "type": "Block",
          "desc": "the block that was broken"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onBlockUpdate",
      "description": "This event is fired when a block update is recieved on the client",
      "params": [
        {
          "name": "block",
          "type": "Block",
          "desc": "the block that was updated"
        }
      ],
      "cancellable": false
    },
    {
      "name": "onRespawn",
      "description": "This event is fired when the player respawns",
      "params": [
        {
          "name": "player",
          "type": "Player",
          "desc": "the respawned player entity"
        }
      ],
      "cancellable": false
    }
  ]
}